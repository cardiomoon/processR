df2
temp=c("est","lower","upper","p")
colnames(df2)=paste0(rep(temp,count),".",rep(effects,each=4))
df2$type=type
df2 <- df2 %>% select(type,everything())
attr(df2,"effects")<-effects
attr(df2,"equations")<-equation
attr(df2,"se")=fit@Options$se
class(df2)=c("medSummary2","data.frame")
#str(df2)
df2
}
}
#'S3 method print for an object of class modmedSummary
#'@param x An object of class medSummary
#'@param ... additional arguments to pass to print.medSummary
#'@export
print.medSummary=function(x,...){
count=nrow(x)
x[]=lapply(x,myformat)
x[[6]]=pformat(x[[6]])
tempnames=c("Effect","Equation","est","95% Bootstrap CI","p")
if(attr(x,"se")=="standard") tempnames[4]="95% CI"
widthEffect=max(nchar(x$Effect))+2
widthEq=max(nchar(x$equation))+2
width=c(widthEffect,widthEq,8,19,8)
total=sum(width)
cat(centerPrint("Summary of Mediation Effects",total),"\n")
cat(paste(rep("=",total),collapse = ""),"\n")
cat("  ")
for(i in seq_along(tempnames)){
cat(centerPrint(tempnames[i],width[i]))
}
cat("\n")
cat(paste(rep("-",total),collapse = ""),"\n")
for(i in 1:nrow(x)){
cat(centerPrint(x[i,1],width[1]))
cat(centerPrint(x[i,2],width[2]))
cat(rightPrint(x[i,3],width[3]))
cat(rightPrint(paste0("(",x[i,4]," to ",x[i,5],")"),width[4]))
cat(rightPrint(x[i,6],width[5]))
cat("\n")
}
cat(paste(rep("=",total),collapse = ""),"\n")
if(attr(x,"se")!="standard") cat(rightPrint(paste0("boot.ci.type: ",attr(x,"boot.ci.type")),total))
cat("\n")
}
#'S3 method print for an object of class modmedSummary
#'@param x An object of class medSummary
#'@param ... additional arguments to pass to print.medSummary
#'@export
print.medSummary2=function(x,...){
count=(ncol(x)-1)/4
count
df=x
df[]=lapply(df,myformat)
for(i in 1:count){
df[[1+i*4]]=pformat(df[[1+i*4]])
}
for(i in 1:count){
df[[paste0("ci",i)]]=paste0("(",df[[3+(i-1)*4]]," to ",df[[4+(i-1)*4]],")")
}
df
select=c(1)
for(i in 1:count){
select=c(select,2+(i-1)*4,count*4+1+i,5+(i-1)*4)
}
df=df[select]
df
if(attr(x,"se")=="standard") temp=rep(c("estimate","95% CI","p"),count)
else temp=rep(c("estimate","95% Bootstrap CI","p"),count)
colnames(df)=c("type",temp)
width=c(12,rep(c(8,22,8),count))
colwidth=38
total=sum(width)
cat(centerPrint("Summary of Mediation Effects",total),"\n")
cat(paste(rep("=",total),collapse = ""),"\n")
cat(centerPrint("",12))
for(i in 1:count){
cat(centerPrint(attr(x,"effects")[i],colwidth))
}
cat("\n")
cat(centerPrint("",11))
for(i in 1:count){
cat(centerPrint(attr(x,"equations")[i],colwidth))
}
cat("\n",centerPrint("",12))
for(i in 1:count) cat(paste(rep("-",colwidth),collapse = ""))
cat("\n  ")
for(i in seq_along(colnames(df))){
cat(centerPrint(colnames(df)[i],width[i]))
}
cat("\n")
cat(paste(rep("-",total),collapse = ""),"\n")
for(i in 1:nrow(df)){
for(j in 1:ncol(df)) {
cat(centerPrint(df[i,j],width[j]))
}
cat("\n")
}
cat(paste(rep("=",total),collapse = ""),"\n")
cat("\n")
}
#' Make a table summarizing the mediation effects
#' @param x An object of class medSummary or medSummary2 or lavaan
#' @param vanilla A logical
#' @param ... Further arguments to be passed to medSummary
#' @export
medSummaryTable=function(x,vanilla=TRUE,...){
if("lavaan" %in% class(x)){
x=medSummary(x,...)
}
if("medSummary2" %in% class(x)){
medSummaryTable2(x,vanilla=vanilla)
} else{
medSummaryTable1(x,vanilla=vanilla)
}
}
#' Make a table summarizing the mediation effects
#' @param x An object of class medSummary
#' @param vanilla A logical
#' @importFrom flextable autofit
#' @export
medSummaryTable1=function(x,vanilla=TRUE){
df=x
df[]=lapply(df,myformat)
df[[6]]=pformat(df[[6]])
df$ci=paste0("(",df$ci.lower," to ",df$ci.upper,")")
df<-df %>% select(c(1,2,3,7,6))
colnames(df)[2:5]=c("Equation","estimate","95% Bootstrap CI","p")
if(attr(x,"se")=="standard") colnames(df)[4]="95% CI"
table=df2flextable(df,vanilla=vanilla)
table %>% width(j=4,width=2) %>%
align(j=c(1,2,4),align="center",part="body") %>%
fontsize(size=12,part="header") %>%
bold(part="header") %>%
italic(i=1,j=c(5),italic=TRUE,part="header")
if(attr(x,"se")!="standard") {
table <- table %>%
add_footer_lines(paste0("boot.ci.type = ",attr(x,"boot.ci.type") )) %>%
align(align="right",part="footer")
}
table %>%
autofit()
}
#' Make a table summarizing the mediation effects
#' @param x An object of class medSummary2
#' @param vanilla A logical
#' @importFrom flextable autofit
#' @export
medSummaryTable2=function(x,vanilla=TRUE){
count=(ncol(x)-1)/4
count
df=x
class(df)="data.frame"
df[]=lapply(df,myformat)
for(i in 1:count){
df[[1+i*4]]=pformat(df[[1+i*4]])
}
for(i in 1:count){
df[[paste0("ci",i)]]=paste0("(",df[[3+(i-1)*4]]," to ",df[[4+(i-1)*4]],")")
}
if(vanilla){
for(i in 1:count){ df[[paste0("s",i)]]=""}
select=c(1)
for(i in 1:count){
select=c(select,2+(i-1)*4,count*4+1+i,5+(i-1)*4)
if(i<count) select=c(select,which(colnames(df)==paste0("s",i)))
}
df=df[select]
df
if(attr(x,"se")=="standard") temp=rep(c("estimate","95% CI","p",""),count)
else temp=rep(c("estimate","95% Bootstrap CI","p",""),count)
temp=c("type",temp[-length(temp)])
temp
table=rrtable::df2flextable(df,vanilla=vanilla)
table
col_keys=colnames(df)
hlabel<-setNames(temp,col_keys)
hlabel=as.list(hlabel)
hlabel
table<-table %>% set_header_labels(values=hlabel)
hlabel=list(type="",
est.indirect=paste0("Indirect Effect\n",attr(x,"equations")[1]),
s1="",
est.direct=paste0("Direct Effect\n",attr(x,"equations")[2]))
big_border=fp_border(color="black",width=2)
table<-table %>%
hline_top(part="header",border=fp_border(color="black",width=0)) %>%
add_header_row(top=TRUE,values=hlabel,colwidths=c(1,3,1,3)) %>%
hline_top(part="header",border=big_border) %>%
hline(i=1,j=6,part="header",border=fp_border(color="black",width=1))%>%
hline(i=1,j=2,part="header",border=fp_border(color="black",width=1)) %>%
width(j=c(5),width=0.01)
table<-table %>%
align(j=c(1),align="center",part="body") %>%
align(align="center",part="header") %>%
fontsize(size=12,part="header") %>%
bold(part="header") %>%
italic(i=2,j=c(4,7),italic=TRUE,part="header") %>%
width(j=c(3,7),width=2) %>%
align(j=c(3,7),align="center",part="all")
} else{
# vanilla=FALSE
select=c(1)
for(i in 1:count){
select=c(select,2+(i-1)*4,count*4+1+i,5+(i-1)*4)
}
df=df[select]
df
temp=rep(c("estimate","95% Bootstrap CI","p"),count)
if(attr(x,"se")=="standard") temp[2]="95% CI"
temp =c("type",temp)
table=rrtable::df2flextable(df,vanilla=vanilla)
table
col_keys=colnames(df)
hlabel<-setNames(temp,col_keys)
hlabel=as.list(hlabel)
hlabel
table<-table %>% set_header_labels(values=hlabel)
table
hlabel=list(type="type",
est.indirect=paste0("Indirect Effect\n",attr(x,"equations")[1]),
est.direct=paste0("Direct Effect\n",attr(x,"equations")[2]))
big_border=fp_border(color="black",width=2)
table<-table %>%
add_header_row(top=TRUE,values=hlabel,colwidths=c(1,3,3))
table<-table %>%
align(j=c(1),align="center",part="body") %>%
align(align="center",part="header") %>%
fontsize(size=12,part="header") %>%
bold(part="header") %>%
italic(i=2,j=c(4,7),italic=TRUE,part="header") %>%
width(j=c(3,6),width=2)
table<-table %>% color(i=1,j=1:7,color="white",part="header") %>%
bg(i=1,j=1:7,bg="#5B7778",part="header") %>%
merge_at(i=1:2,j=1,part="header")
table
table<-table %>% vline(i=1:2,border=fp_border(color="white"),part="header") %>%
hline(i=1:2,border=fp_border(color="white"),part="header") %>%
width(j=1,width=1) %>%
align(j=c(3,6),align="center",part="all")
}
table
}
res$lhs[str_detect(res$lhs,"indirect")]
res$rhs[str_detect(res$lhs,"indirect")]
# boot.ci.type="bca.simple";mod="sexism";values=NULL
# fit=semfit
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label!="",]
res
if(is.null(values)){
# values1=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
values1=extractRange(res,mod=mod)
values1
} else{
values1=values
}
res$lhs
# select=c("indirect","indirect.below","indirect.above")
selected=which(str_detect(res$lhs,"indirect"))
selected
indirect=res$est[selected]
lower=res$ci.lower[selected]
upper=res$ci.upper[selected]
indirectp=res$pvalue[selected]
selected1=which(str_detect(res$lhs,"direct"))
selected2=setdiff(selected1,selected)
direct=res$est[selected2]
lowerd=res$ci.lower[selected2]
upperd=res$ci.upper[selected2]
#
# se=res$se[selected]
directp=res$p[selected2]
df=data.frame(values=values1,indirect,lower,upper,indirectp,direct,lowerd,upperd,directp)
df
select=c(2,1,3)
count=nrow(df)/3
select2=c()
for(i in 1:count) {
select2=c(select2,select+(i-1)*3)
}
select2
df=df[select2,]
df[]=round(df,3)
attr(df,"mod")=mod
df
res$rhs[str_detect(res$lhs,"indirect")]
res$rhs[str_detect(res$lhs,"indirect.D")]
res$lhs[str_detect(res$lhs,"indirect")]
selected=which(str_detect(res$lhs,"indirect"))
selected
res$lhs[selected]
!str_detect(res$lhs[selected],"\\.a") & !str_detect(res$lhs[selected],"\\.a")
res$lhs[selected]
!str_detect(res$lhs[selected],"\\.a") & !str_detect(res$lhs[selected],"\\.b")
selected1=selected[!str_detect(res$lhs[selected],"\\.a") & !str_detect(res$lhs[selected],"\\.b")]
selected1
selected=which(str_detect(res$lhs,"indirect"))
selected1=selected[!str_detect(res$lhs[selected],"\\.a") & !str_detect(res$lhs[selected],"\\.b")]
selected1
indirect=res$rhs[selected1]
indirect
indirect=str_replace(indirect,paste0(mod,".mean"),"W")
selected1=which(str_detect(res$lhs,"direct"))
selected2=setdiff(selected1,selected)
selected=which(str_detect(res$lhs,"indirect"))
selected1=selected[!str_detect(res$lhs[selected],"\\.a") & !str_detect(res$lhs[selected],"\\.b")]
indirect=res$rhs[selected1]
indirect=str_replace(indirect,paste0(mod,".mean"),"W")
selected1=which(str_detect(res$lhs,"direct"))
selected2=setdiff(selected1,selected)
selected3=selected2[!str_detect(res$lhs[selected2],"\\.a") & !str_detect(res$lhs[selected2],"\\.b")]
selected3
direct=res$rhs[selected3]
direct=str_replace(direct,paste0(mod,".mean"),"W")
direct
#' Summarize the moderated mediation
#' @param fit An object of class lavaan
#' @param mod name of moderator
#' @param values Optional. Numeric vector
#' @param boot.ci.type Type of bootstrapping interval. Choices are c("norm","basic","perc",bca.simple")
#' @importFrom lavaan parameterEstimates
#' @export
#' @return A data.frame and an object of class modmedSummary
modmedSummary=function(fit,mod="skeptic",values=NULL,boot.ci.type="bca.simple"){
# boot.ci.type="bca.simple";mod="sexism";values=NULL
# fit=semfit
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label!="",]
res
if(is.null(values)){
# values1=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
values1=extractRange(res,mod=mod)
values1
} else{
values1=values
}
res$lhs
# select=c("indirect","indirect.below","indirect.above")
selected=which(str_detect(res$lhs,"indirect"))
selected
indirect=res$est[selected]
lower=res$ci.lower[selected]
upper=res$ci.upper[selected]
indirectp=res$pvalue[selected]
selected1=which(str_detect(res$lhs,"direct"))
selected2=setdiff(selected1,selected)
direct=res$est[selected2]
lowerd=res$ci.lower[selected2]
upperd=res$ci.upper[selected2]
#
# se=res$se[selected]
directp=res$p[selected2]
df=data.frame(values=values1,indirect,lower,upper,indirectp,direct,lowerd,upperd,directp)
df
select=c(2,1,3)
count=nrow(df)/3
select2=c()
for(i in 1:count) {
select2=c(select2,select+(i-1)*3)
}
select2
df=df[select2,]
df[]=round(df,3)
attr(df,"mod")=mod
df
if(is.null(values)) {
selected=which(str_detect(res$lhs,"indirect"))
selected1=selected[!str_detect(res$lhs[selected],"\\.a") & !str_detect(res$lhs[selected],"\\.b")]
indirect=res$rhs[selected1]
indirect=str_replace(indirect,paste0(mod,".mean"),"W")
selected1=which(str_detect(res$lhs,"direct"))
selected2=setdiff(selected1,selected)
selected3=selected2[!str_detect(res$lhs[selected2],"\\.a") & !str_detect(res$lhs[selected2],"\\.b")]
selected3
direct=res$rhs[selected3]
direct=str_replace(direct,paste0(mod,".mean"),"W")
} else{
selected=which(str_detect(res$lhs,"indirect"))
selected1=selected[!str_detect(res$lhs[selected],"\\.a") & !str_detect(res$lhs[selected],"\\.b")]
indirect=res$rhs[selected1]
indirect=str_replace(indirect,paste0(values[1]),"W")
selected1=which(str_detect(res$lhs,"direct"))
selected2=setdiff(selected1,selected)
selected3=selected2[!str_detect(res$lhs[selected2],"\\.a") & !str_detect(res$lhs[selected2],"\\.b")]
selected3
direct=res$rhs[selected3]
direct=str_replace(direct,paste0(values[1]),"W")
}
attr(df,"indirect")=indirect
attr(df,"direct")=direct
attr(df,"boot.ci.type")=boot.ci.type
class(df)=c("modmedSummary","data.frame")
df
}
modmedSummary(semfit)
modmedSummary(semfit,mod="sexism")
result=modmedSummary(semfit)
str(result)
# boot.ci.type="bca.simple";mod="sexism";values=NULL
# fit=semfit
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label!="",]
res
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label!="",]
res
str_detect(res$label,"mean")
res
res$lhs[res$str_detect(res$label,"mean")]
res$lhs[str_detect(res$label,"mean")]
mod=res$lhs[str_detect(res$label,"mean")][1]
mod
#' Summarize the moderated mediation
#' @param fit An object of class lavaan
#' @param mod name of moderator
#' @param values Optional. Numeric vector
#' @param boot.ci.type Type of bootstrapping interval. Choices are c("norm","basic","perc",bca.simple")
#' @importFrom lavaan parameterEstimates
#' @export
#' @return A data.frame and an object of class modmedSummary
modmedSummary=function(fit,mod=NULL,values=NULL,boot.ci.type="bca.simple"){
# boot.ci.type="bca.simple";mod="sexism";values=NULL
# fit=semfit
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label!="",]
res
if(is.null(mod)){
mod=res$lhs[str_detect(res$label,"mean")][1]
mod
}
if(is.null(values)){
# values1=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
values1=extractRange(res,mod=mod)
values1
} else{
values1=values
}
res$lhs
# select=c("indirect","indirect.below","indirect.above")
selected=which(str_detect(res$lhs,"indirect"))
selected
indirect=res$est[selected]
lower=res$ci.lower[selected]
upper=res$ci.upper[selected]
indirectp=res$pvalue[selected]
selected1=which(str_detect(res$lhs,"direct"))
selected2=setdiff(selected1,selected)
direct=res$est[selected2]
lowerd=res$ci.lower[selected2]
upperd=res$ci.upper[selected2]
#
# se=res$se[selected]
directp=res$p[selected2]
df=data.frame(values=values1,indirect,lower,upper,indirectp,direct,lowerd,upperd,directp)
df
select=c(2,1,3)
count=nrow(df)/3
select2=c()
for(i in 1:count) {
select2=c(select2,select+(i-1)*3)
}
select2
df=df[select2,]
df[]=round(df,3)
attr(df,"mod")=mod
df
if(is.null(values)) {
selected=which(str_detect(res$lhs,"indirect"))
selected1=selected[!str_detect(res$lhs[selected],"\\.a") & !str_detect(res$lhs[selected],"\\.b")]
indirect=res$rhs[selected1]
indirect=str_replace(indirect,paste0(mod,".mean"),"W")
selected1=which(str_detect(res$lhs,"direct"))
selected2=setdiff(selected1,selected)
selected3=selected2[!str_detect(res$lhs[selected2],"\\.a") & !str_detect(res$lhs[selected2],"\\.b")]
selected3
direct=res$rhs[selected3]
direct=str_replace(direct,paste0(mod,".mean"),"W")
} else{
selected=which(str_detect(res$lhs,"indirect"))
selected1=selected[!str_detect(res$lhs[selected],"\\.a") & !str_detect(res$lhs[selected],"\\.b")]
indirect=res$rhs[selected1]
indirect=str_replace(indirect,paste0(values[1]),"W")
selected1=which(str_detect(res$lhs,"direct"))
selected2=setdiff(selected1,selected)
selected3=selected2[!str_detect(res$lhs[selected2],"\\.a") & !str_detect(res$lhs[selected2],"\\.b")]
selected3
direct=res$rhs[selected3]
direct=str_replace(direct,paste0(values[1]),"W")
}
attr(df,"indirect")=indirect
attr(df,"direct")=direct
attr(df,"boot.ci.type")=boot.ci.type
class(df)=c("modmedSummary","data.frame")
df
}
modemedSummary(semfit)
modmedSummary(semfit)
devtools::document()
devtools::check()
