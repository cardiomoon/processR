fit1=lm(govact~negemot*sex*age+posemot+ideology,data=glbwarm)
modSummary3(fit1,rangemode=1)
fit=lm(mpg~hp*wt,data=mtcars)
modSummary3(fit)
fit=lm(govact~negemot*sex+negemot*age+posemot+ideology,data=glbwarm)
modSummary3Table(fit,mod2.values=c(30,50,70))
fit=lm(govact~negemot*sex+negemot*age+posemot+ideology,data=glbwarm)
modSummary3(fit,mod2.values=c(30,50,70))
fit1=lm(govact~negemot*sex*age+posemot+ideology,data=glbwarm)
modSummary3(fit1,rangemode=1)
fit=lm(mpg~hp*wt,data=mtcars)
modSummary3(fit)
devtools::document()
devtools::check()
fit=lm(govact~negemot*sex+negemot*age+posemot+ideology,data=glbwarm)
modSummary3(fit,mod2.values=c(30,50,70))
fit1=lm(govact~negemot*sex*age+posemot+ideology,data=glbwarm)
modSummary3(fit1,rangemode=1)
fit=lm(mpg~hp*wt,data=mtcars)
modSummary3(fit)
fit=lm(govact~negemot*sex+negemot*age+posemot+ideology,data=glbwarm)
modSummary3(fit,mod2.values=c(30,50,70))
fit1=lm(govact~negemot*sex*age+posemot+ideology,data=glbwarm)
modSummary3(fit1,rangemode=1)
fit=lm(mpg~hp*wt,data=mtcars)
modSummary3(fit)
library(processR)
modSummary3
require(processR)
fit=lm(mpg~hp*wt+am,data=mtcars)
summry(fit)
summary(fit)
modelsSummary(fit)
modelsSummary2(fit)
summary(fit)$coef
df=summary(fit)$coef
df
rownames(df)
vars=rownames(df)[str_detect(rownames(df),":")]
require(stringr)
vars=rownames(df)[str_detect(rownames(df),":")]
vars
fit=lm(mpg~hp*wt+hp*cyl+am,data=mtcars)
summary(fit)
df=summary(fit)$coef
vars=rownames(df)[str_detect(rownames(df),":")]
vars
vars=unlist(strsplit(vars,":"))
vars
require(tidyverse)
rownames(df)
rownames(df) %>% str_detect(":")
rownames(df) %>% filter(str_detect(":"))
vars=rownames(df)[str_detect(rownames(df),":")]
vars=unlist(strsplit(vars,":"))
vars
vars=unique(unlist(strsplit(vars,":")))
vars
vars=rownames(df)[str_detect(rownames(df),":")]
vars
vars1=unique(unlist(strsplit(vars,":")))
vars
vars1
vars2=stediff(rownames(df),union(vars,vars1))
vars2=setdiff(rownames(df),union(vars,vars1))
vars2
vars2=setdiff(rownames(df)[-1],union(vars,vars1))
vars2
vars2=rownames(df)[str_detect(rownames(df),":")]
vars1=unique(unlist(strsplit(vars2,":")))
vars3=setdiff(rownames(df)[-1],union(vars1,vars2))
vars=c(vars1,vars2,vars3)
vars
df[vars,]
#'
reArrange=function(fit){
df=summary(fit)$coef
vars2=rownames(df)[str_detect(rownames(df),":")]
vars1=unique(unlist(strsplit(vars2,":")))
vars3=setdiff(rownames(df)[-1],union(vars1,vars2))
vars=c(vars1,vars2,vars3)
df[vars,]
}
fit=lm(mpg~hp*wt+hp*cyl+am,data=mtcars)
summary(fit)$coef
#'
getCoef=function(fit){
df=summary(fit)$coef
vars2=rownames(df)[str_detect(rownames(df),":")]
vars1=unique(unlist(strsplit(vars2,":")))
vars3=setdiff(rownames(df)[-1],union(vars1,vars2))
vars=c(vars1,vars2,vars3)
df[vars,]
}
#'
getCoef=function(fit){
df=summary(fit)$coef
vars2=rownames(df)[str_detect(rownames(df),":")]
vars1=unique(unlist(strsplit(vars2,":")))
vars3=setdiff(rownames(df)[-1],union(vars1,vars2))
vars=c(vars1,vars2,vars3)
df[vars,]
}
getCoef(fit)
fit=lm(mpg~hp*wt*am,data=mtcars)
summary(fit)$coef
getCoef(fit)
fit=lm(mpg~hp*wt,data=mtcars)
getCoef(fit)
fit=lm(mpg~hp*wt+am,data=mtcars)
getCoef(fit)
fit=lm(mpg~hp*wt+am,data=mtcars)
getCoef(fit)
str(getCoef(fit))
devtools::document()
devtools::check()
fit=lm(mpg~hp*wt+am,data=mtcars)
summary(fit)$coef
getCoef(fit)
#'Get coef summary table
#'@param fit An object of class lm
#'@examples
#'fit=lm(mpg~hp*wt+am)
#'getCoef(fit)
#'@export
getCoef=function(fit){
df=summary(fit)$coef
vars2=rownames(df)[str_detect(rownames(df),":")]
vars1=unique(unlist(strsplit(vars2,":")))
vars3=setdiff(rownames(df)[-1],union(vars1,vars2))
vars=c(rownames(df)[1],vars1,vars2,vars3)
df[vars,]
}
fit=lm(mpg~hp*wt+am)
getCoef(fit)
fit=lm(mpg~hp*wt+am,data=mtcars)
getCoef(fit)
devtools::document()
devtools::check()
fit=lm(mpg~hp*wt+am,data=mtcars)
getCoef(fit)
modelsSummary2(fit)
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp*am,data=mtcars)
labels=list(Y="mpg",X="wt",W="hp",Z="am")
fit=list(fit1,fit2)
modelsSummary2(fit,labels=labels)
require(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp*am,data=mtcars)
labels=list(Y="mpg",X="wt",W="hp",Z="am")
fit=list(fit1,fit2)
modelsSummary2(fit,labels=labels)
fit=list(fit1,fit2)
modelsSummary2(fit,labels=labels)
modelsSummary2(fit1)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp*vs+am,data=mtcars)
labels=list(Y="mpg",X="wt",W="hp",Z="am")
fit=list(fit1,fit2)
modelsSummary2(fit,labels=labels)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp*vs+am,data=mtcars)
labels=list(Y="mpg",X="wt",W="hp",Z="vs")
fit=list(fit1,fit2)
modelsSummary2(fit,labels=labels)
modelsSummary2(fit1)
system("grep -r 'changeLabelName' *")
system("grep -r 'changeLabelName=' *")
labels=list(X="skeptic",Mi="empathy",Y="intervention",W="frame",Z="test")
x=c("skeptic","test","empathy","skeptic:frame:test","D1:frame")
changeLabelName(x,labels)
changeLabelName(x,labels,add=TRUE)
x=c("skeptic","test","empathy","skeptic:frame:test","D1:frame")
labels=list(X="skeptic",Mi="empathy",Y="intervention",W="frame",Z="test")
i=4
temp=unlist(strsplit(x[i],":"))
temp
temp2=c()
for(j in 1:length(temp)){
temp3=names(unlist(labels))[which(unlist(labels)==temp[j])]
temp2=c(temp2,temp3)
}
temp2
if(length(temp2)>1){
temp2=paste0(temp2,collapse=":")
if(add){
res=c(res,paste0(x[i],"(",temp2,")"))
} else{
res=c(res,temp2)
}
} else{
temp=x[i]
temp
for(j in 1:length(labels)){
if(add) {
temp=str_replace(x[i],labels[[j]],paste0(labels[[j]],"(",names(labels)[j],")"))
} else{
temp=str_replace(x[i],labels[[j]],names(labels)[j])
}
}
temp
res=c(res,temp)
}
#'Change Label Names
#'@param x A character vector
#'@param labels A list
#'@param add A logical
#'@export
#'@examples
#'labels=list(X="skeptic",Mi="empathy",Y="intervention",W="frame",Z="test")
#'x=c("skeptic","test","empathy","skeptic:frame:test","D1:frame")
#'changeLabelName(x,labels)
#'changeLabelName(x,labels,add=TRUE)
changeLabelName=function(x,labels,add=FALSE){
res=c()
# i=4
for(i in 1:length(x)){
if(str_detect(x[i],":")){
temp=unlist(strsplit(x[i],":"))
temp
temp2=c()
for(j in 1:length(temp)){
temp3=names(unlist(labels))[which(unlist(labels)==temp[j])]
temp2=c(temp2,temp3)
}
temp2
if(length(temp2)>1){
temp2=paste0(temp2,collapse=":")
if(add){
res=c(res,paste0(x[i],"(",temp2,")"))
} else{
res=c(res,temp2)
}
} else{
temp=x[i]
temp
for(j in 1:length(labels)){
if(add) {
temp=str_replace(x[i],labels[[j]],paste0(labels[[j]],"(",names(labels)[j],")"))
} else{
temp=str_replace(x[i],labels[[j]],names(labels)[j])
}
}
temp
res=c(res,temp)
}
}  else if(x[i] %in% unlist(labels)){
if(add){
temp=names(unlist(labels))[which(unlist(labels)==x[i])]
res=c(res,paste0(x[i],"(",temp,")"))
} else{
res=c(res,names(unlist(labels))[which(unlist(labels)==x[i])])
}
} else{
res=c(res,x[i])
}
}
res
}
labels=list(X="skeptic",Mi="empathy",Y="intervention",W="frame",Z="test")
x=c("skeptic","test","empathy","skeptic:frame:test","D1:frame")
changeLabelName(x,labels)
require(stringr)
changeLabelName(x,labels)
changeLabelName(x,labels,add=TRUE)
library(processR)
library(processR)
showModels()
processR::showModels()
library(processR)
statiticalDiagram(35)
statisticalDiagram(35)
no=35;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;arrowslabels=NULL
arrowslty=NULL
labels=list();nodeslabels=list();whatLabel="name";fit=NULL;estimateTable=NULL
digits=3;covar=list();addCovar=TRUE;type=NULL
includeLatentVars=FALSE;addprime=TRUE
if(!is.null(fit)) {
if(is.null(estimateTable)) estimateTable<-estimatesTable(fit,digits=digits)
}
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=getNodes(no)
}
library(processR)
source('~/ownCloud/Documents/processR/R/statisticalDiagram.R', echo=TRUE)
#
no=35;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;arrowslabels=NULL
arrowslty=NULL
labels=list();nodeslabels=list();whatLabel="name";fit=NULL;estimateTable=NULL
digits=3;covar=list();addCovar=TRUE;type=NULL
includeLatentVars=FALSE;addprime=TRUE
if(!is.null(fit)) {
if(is.null(estimateTable)) estimateTable<-estimatesTable(fit,digits=digits)
}
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=getNodes(no)
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=getArrows(no)
}
nodes
arrows1
# Add covariates
if(addCovar){
if(no!=1.1) nodes=addNodes(nodes,covar,radx=radx,rady=rady,no=no)
}
# print(nodes)
arrows1
covar
if(no==1.1) {
arrows2=arrows1
} else {
if(addCovar){
arrows2=addArrows(arrows1,covar)
} else{
arrows2=arrows1
}
}
arrows2
if( !is.null(estimateTable)) {
if(no==1.1){
arrows2$Predictors=arrows2$start
} else{
arrows2$Predictors=findNames(labels,names=arrows2$start)
}
arrows2$Variables=findNames(labels,names=arrows2$end)
labels
arrows2
estimateTable
# temp=c()
# for(i in 1:nrow(estimateTable)){
#    temp=c(temp,names(labels)[str_detect(labels,estimateTable$Variables[i])])
# }
# temp
# estimateTable$start=temp
# estimateTable
arrows2
if(includeLatentVars){
arrows3<-full_join(arrows2,estimateTable,by=c("Predictors","Variables"))
arrows3
arrows3$no=  arrows3$no[1]
arrows3$name[is.na(arrows3$name)]=""
arrows3$start[is.na(arrows3$start)]=arrows3$Predictors[is.na(arrows3$start)]
arrows3$end[is.na(arrows3$end)]=arrows3$Variables[is.na(arrows3$end)]
arrows3$labelpos=0.5
arrows3$arrpos=0.84
arrows3$end=changeLabelName(arrows3$end,labels)
} else{
arrows3<-left_join(arrows2,estimateTable,by=c("Predictors","Variables"))
}
if(is.null(arrowslty)) {
arrows3$lty=ifelse(arrows3$p<0.05,1,3)
} else{
arrows3$lty=arrowslty
}
# print(arrows3)
}  else{
arrows2$lty=1
arrows3<-arrows2
if(!is.null(arrowslty)) arrows3$lty=arrowslty
}
if(arrowlabel){
if(whatLabel=="name") {
arrows3$label=arrows3$name
} else if(whatLabel=="est"){
arrows3$label=arrows3$B
} else if(whatLabel=="label"){
if((!is.null(arrowslabels))&(length(arrowslabels)==nrow(arrows3))){
arrows3$label=arrowslabels
} else{
arrows3$label=""
}
} else{
arrows3$label=arrows3[,ncol(arrows3)-1]
}
} else {
arrows3$label=""
}
print(arrows3)
if((!is.null(fit))&(includeLatentVars)){
nodes=addLatentNodes(nodes,fit,labels)
nodes=adjustPosNodes(nodes)
}
arrows3
nodes
drawStatDiagram(no=no,arrows=arrows3,nodes=nodes,labels=labels,nodeslabels=nodeslabels,
xmargin=xmargin,radx=radx,rady=rady,fit,addprime=addprime)
library(diagram)
drawStatDiagram(no=no,arrows=arrows3,nodes=nodes,labels=labels,nodeslabels=nodeslabels,
xmargin=xmargin,radx=radx,rady=rady,fit,addprime=addprime)
arrows3
nodes
# print(nodes)
# print(arrows)
openplotmat()
drawArrows(arrows,nodes,xmargin=xmargin,rady=rady,radx=radx,addprime=addprime)
arrows3
# print(nodes)
# print(arrows)
openplotmat()
arrows=arrows3
drawArrows(arrows,nodes,xmargin=xmargin,rady=rady,radx=radx,addprime=addprime)
print(arrows)
# print(arrows)
for(i in 1:nrow(arrows)){
if(is.na(arrows$lty[i])){
myarrow2(nodes,from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],addprime=addprime)
} else{
myarrow2(nodes, from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],lty=arrows$lty[i],addprime=addprime)
}
}
print(arrows)
# print(arrows)
nodes
# print(arrows)
# nodes
nrow(arrows)
# print(arrows)
# nodes
i=1
if(is.na(arrows$lty[i])){
myarrow2(nodes,from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],addprime=addprime)
} else{
myarrow2(nodes, from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],lty=arrows$lty[i],addprime=addprime)
}
openplotmat()
# print(arrows)
# nodes
i=1
if(is.na(arrows$lty[i])){
myarrow2(nodes,from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],addprime=addprime)
} else{
myarrow2(nodes, from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],lty=arrows$lty[i],addprime=addprime)
}
# print(arrows)
# nodes
i=2
if(is.na(arrows$lty[i])){
myarrow2(nodes,from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],addprime=addprime)
} else{
myarrow2(nodes, from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],lty=arrows$lty[i],addprime=addprime)
}
# print(arrows)
# nodes
i=3
for(i in 1:nrow(arrows)){
if(is.na(arrows$lty[i])){
myarrow2(nodes,from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],addprime=addprime)
} else{
myarrow2(nodes, from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],lty=arrows$lty[i],addprime=addprime)
}
}
for(i in 1:nrow(arrows)){
cat("i=",i,"\n")
if(is.na(arrows$lty[i])){
myarrow2(nodes,from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],addprime=addprime)
} else{
myarrow2(nodes, from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=arrows$labelpos[i],arr.pos=arrows$arrpos[i],lty=arrows$lty[i],addprime=addprime)
}
}
print(arrows)
nodes
arrows
arrows
parrows
parrows[parrows$no==35,]
parrows[282,]
nrow(parrows)
parrows=parrows[-282,]
nrow(parrows)
statisticalDiagram(35)
devtools::use_data(parrows)
devtools::use_data(parrows,overwrite=TRUE)
statisticalDiagram(35)
library(processR)
statisticalDiagram(35)
statisticalDiagram(35)
showModels()
require(processR)
showModels()
