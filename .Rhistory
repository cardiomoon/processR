eq
slope
intercept
equation=list()
for(i in 1:(dummyCount+1)){
equation[[i]]=eq
for(j in 1:dummyCount){
temp=paste0("ratio[",i,",",j,"]")
equation[[i]]=str_replace_all(equation[[i]],paste0(group,j),temp)
for(k in seq_along(slopemod)){
slope[[(k-1)*3+i]]=str_replace_all(slope[[(k-1)*3+i]],paste0(group,j),temp)
intercept[[(k-1)*3+i]]=str_replace_all(intercept[[(k-1)*3+i]],paste0(group,j),temp)
}
}
}
result=unlist(lapply(1:length(equation),function(i){eval(parse(text=equation[[i]]))}))
names(result)=paste0("\u0176",0:(length(result)-1))
result
for(i in seq_along(slopemod)){
for(j in 1:3){
slope[[(i-1)*3+j]]=eval(parse(text=slope[[(i-1)*3+j]]))
intercept[[(i-1)*3+j]]=eval(parse(text=intercept[[(i-1)*3+j]]))
}
result=cbind(result,c(slope[[((i-1)*3+1)]],slope[[((i-1)*3+2)]],slope[[((i-1)*3+3)]]),
c(intercept[[((i-1)*3+1)]],intercept[[((i-1)*3+2)]],intercept[[((i-1)*3+3)]]))
}
temp=c("slope","intercept")
names=c()
for(i in seq_along(moderator)){
names=c(names,paste0(temp,moderator[i]))
}
colnames(result)=c("\u0176",names)
as.data.frame(result,stringsAsFactors=FALSE)
}
fit3=lm(Sepal.Length~D2*Sepal.Width+Sepal.Width*D1+Petal.Width,data=iris3)
df=getYhat(fit3,mode=3)
df[]=lapply(df,as.numeric)
df
fun=lapply(1:3,function(x){df[i,2]*x+df[i,3]})
fun=lapply(1:3,function(i){df[i,2]*x+df[i,3]})
fun1=function(x){df[1,2]*x+df[1,3]})
fun1=function(x){df[1,2]*x+df[1,3]}
fun2=function(x){df[2,2]*x+df[2,3]}
p<-ggplot(data=iris,aes(x=Sepal.Width,y=Sepal.Length))+geom_point()
fun1=function(x){df[1,2]*x+df[1,3]}
fun2=function(x){df[2,2]*x+df[2,3]}
fun3=function(x){df[3,2]*x+df[3,3]}
p+stat_function(fun=fun1,col="red")+stat_function(fun=fun2,col="green")+stat_function(fun=fun3)
p<-ggplot(data=iris,aes(x=Sepal.Width,y=Sepal.Length,color=Species))+geom_point()+stat_smooth(method="lm")
fun1=function(x){df[1,2]*x+df[1,3]}
fun2=function(x){df[2,2]*x+df[2,3]}
fun3=function(x){df[3,2]*x+df[3,3]}
p+stat_function(fun=fun1,col="red")+stat_function(fun=fun2,col="green")+stat_function(fun=fun3)
p<-ggplot(data=iris,aes(x=Sepal.Width,y=Sepal.Length,color=Species))+geom_point()+stat_smooth(method="lm",se=FALSE)
fun1=function(x){df[1,2]*x+df[1,3]}
fun2=function(x){df[2,2]*x+df[2,3]}
fun3=function(x){df[3,2]*x+df[3,3]}
p+stat_function(fun=fun1,col="red")+stat_function(fun=fun2,col="green")+stat_function(fun=fun3)
require(ggiraphExtra)
fit3=lm(Sepal.Length~Sepal.Width*D1+Sepal.Width*D2,data=iris3)
df=getYhat(fit3,mode=3)
df[]=lapply(df,as.numeric)
df
require(ggplot2)
p<-ggplot(data=iris,aes(x=Sepal.Width,y=Sepal.Length,color=Species))+geom_point()+stat_smooth(method="lm",se=FALSE)
fun1=function(x){df[1,2]*x+df[1,3]}
fun2=function(x){df[2,2]*x+df[2,3]}
fun3=function(x){df[3,2]*x+df[3,3]}
p+stat_function(fun=fun1,col="red")+stat_function(fun=fun2,col="green")+stat_function(fun=fun3)
fit1=lm(Sepal.Length~Sepal.Width+D1+D2,data=iris1)
getYhat(fit1)
fit1=lm(Sepal.Length~Sepal.Width+D1+D2,data=iris1)
fit=fit1;group="D";mode=1
# fit=fit1;group="D";mode=1
count=length(fit$coeff)
interact=which(str_detect(names(fit$coef),":"))
pattern=paste0("^",group,"[1-9]")
dummy=which(str_detect(names(fit$coef),pattern))
dummy=setdiff(dummy,interact)
dummyCount=length(dummy)
(dummyNames=names(fit$coef)[dummy])
vars=setdiff(1:count,c(1,dummy,interact))
varnames=names(fit$coef)[vars]
df=fit$model
(moderator=setdiff(unlist(strsplit(names(fit$coef)[interact],":")),dummyNames))
ratio=getRatioTable(count=dummyCount+1,mode=mode)
eq="fit$coef[1]"
for(i in 2:count){
eq=c(eq,paste0(names(fit$coef[i]),"*fit$coef[",i,"]"))
}
eq=str_replace_all(eq,":","*")
slopemod<-interceptmod<-list()
eq
moderator
for(i in seq_along(moderator)){
values=strGrouping(eq,moderator[i])
slopemod[[i]]=paste0(values$yes,collapse="+")
interceptmod[[i]]=paste0(values$no,collapse="+")
}
slopemod
slope<-intercept<-list()
for(k in seq_along(slopemod)){
temp1=slopemod[[k]]
temp2=interceptmod[[k]]
for(i in 1:(dummyCount+1)){
for(j in 1:dummyCount){
temp3=paste0("ratio[",i,",",j,"]")
slope[[(k-1)*3+i]]=str_replace_all(temp1,paste0(group,j),temp3)
intercept[[(k-1)*3+i]]=str_replace_all(temp2,paste0(group,j),temp3)
}
}
}
eq=paste0(eq,collapse="+")
for(i in seq_along(varnames)) {
eq=str_replace_all(eq,varnames[i],paste0("mean(df$",varnames[i],",na.rm=TRUE)"))
slope=str_replace_all(slope,varnames[i],paste0("mean(df$",varnames[i],",na.rm=TRUE)"))
intercept=str_replace_all(intercept,varnames[i],paste0("mean(df$",varnames[i],",na.rm=TRUE)"))
}
eq
slope
intercept
equation=list()
for(i in 1:(dummyCount+1)){
equation[[i]]=eq
for(j in 1:dummyCount){
temp=paste0("ratio[",i,",",j,"]")
equation[[i]]=str_replace_all(equation[[i]],paste0(group,j),temp)
for(k in seq_along(slopemod)){
slope[[(k-1)*3+i]]=str_replace_all(slope[[(k-1)*3+i]],paste0(group,j),temp)
intercept[[(k-1)*3+i]]=str_replace_all(intercept[[(k-1)*3+i]],paste0(group,j),temp)
}
}
}
result=unlist(lapply(1:length(equation),function(i){eval(parse(text=equation[[i]]))}))
names(result)=paste0("\u0176",0:(length(result)-1))
result
for(i in seq_along(slopemod)){
for(j in 1:3){
slope[[(i-1)*3+j]]=eval(parse(text=slope[[(i-1)*3+j]]))
intercept[[(i-1)*3+j]]=eval(parse(text=intercept[[(i-1)*3+j]]))
}
result=cbind(result,c(slope[[((i-1)*3+1)]],slope[[((i-1)*3+2)]],slope[[((i-1)*3+3)]]),
c(intercept[[((i-1)*3+1)]],intercept[[((i-1)*3+2)]],intercept[[((i-1)*3+3)]]))
}
temp=c("slope","intercept")
names=c()
for(i in seq_along(moderator)){
names=c(names,paste0(temp,moderator[i]))
}
colnames(result)=c("\u0176",names)
result=unlist(lapply(1:length(equation),function(i){eval(parse(text=equation[[i]]))}))
names(result)=paste0("\u0176",0:(length(result)-1))
result
for(i in seq_along(slopemod)){
for(j in 1:3){
slope[[(i-1)*3+j]]=eval(parse(text=slope[[(i-1)*3+j]]))
intercept[[(i-1)*3+j]]=eval(parse(text=intercept[[(i-1)*3+j]]))
}
result=cbind(result,c(slope[[((i-1)*3+1)]],slope[[((i-1)*3+2)]],slope[[((i-1)*3+3)]]),
c(intercept[[((i-1)*3+1)]],intercept[[((i-1)*3+2)]],intercept[[((i-1)*3+3)]]))
}
temp=c("slope","intercept")
names=c()
for(i in seq_along(moderator)){
names=c(names,paste0(temp,moderator[i]))
}
if(length(moderator)>0) colnames(result)=c("\u0176",names)
as.numeric(as.data.frame(result,stringsAsFactors=FALSE))
as.data.frame(result,stringsAsFactors=FALSE)
result=unlist(lapply(1:length(equation),function(i){eval(parse(text=equation[[i]]))}))
names(result)=paste0("\u0176",0:(length(result)-1))
result
for(i in seq_along(slopemod)){
for(j in 1:3){
slope[[(i-1)*3+j]]=eval(parse(text=slope[[(i-1)*3+j]]))
intercept[[(i-1)*3+j]]=eval(parse(text=intercept[[(i-1)*3+j]]))
}
result=cbind(result,c(slope[[((i-1)*3+1)]],slope[[((i-1)*3+2)]],slope[[((i-1)*3+3)]]),
c(intercept[[((i-1)*3+1)]],intercept[[((i-1)*3+2)]],intercept[[((i-1)*3+3)]]))
}
temp=c("slope","intercept")
names=c()
for(i in seq_along(moderator)){
names=c(names,paste0(temp,moderator[i]))
}
if(length(moderator)>0) {
colnames(result)=c("\u0176",names)
}
colnames(result)=c("\u0176")
result=as.data.frame(result,stringsAsFactors=FALSE)
library(processR)
iris1=addCatVars(iris,c("Species"))
iris3=addCatVars(iris,c("Species"),mode=3)
print(iris1[c(1,51,101),])
print(iris3[c(1,51,101),])
fit1=lm(Sepal.Length~Sepal.Width+D1+D2,data=iris1)
getYhat(fit1)
fit3=lm(Sepal.Length~Sepal.Width*D1+Sepal.Width*D2,data=iris3)
getYhat(fit3,mode=3)
fit1=lm(Sepal.Length~Sepal.Width+D1+D2,data=iris1)
getYhat(fit1)
fit3=lm(Sepal.Length~Sepal.Width+D1+D2,data=iris3)
getYhat(fit3,mode=3)
fit1=lm(Sepal.Length~D2*Sepal.Width+Sepal.Width*D1+Petal.Width,data=iris1)
getYhat(fit1)
fit3=lm(Sepal.Length~D2*Sepal.Width+Sepal.Width*D1+Petal.Width,data=iris3)
df=getYhat(fit3,mode=3)
fit1=lm(Sepal.Length~D2*Sepal.Width+Sepal.Width*D1+Petal.Width,data=iris1)
getYhat(fit1)
fit3=lm(Sepal.Length~D2*Sepal.Width+Sepal.Width*D1+Petal.Width,data=iris3)
getYhat(fit1,mode=3)
df=getYhat(fit3,mode=3)
df[]=lapply(df,as.numeric)
df
require(ggplot2)
p<-ggplot(data=iris,aes(x=Sepal.Width,y=Sepal.Length,color=Species))+geom_point()+stat_smooth(method="lm",se=FALSE)
fun1=function(x){df[1,2]*x+df[1,3]}
fun2=function(x){df[2,2]*x+df[2,3]}
fun3=function(x){df[3,2]*x+df[3,3]}
p+stat_function(fun=fun1,col="red")+stat_function(fun=fun2,col="green")+stat_function(fun=fun3)
library(processR)
fit3=lm(Sepal.Length~D2*Sepal.Width+Sepal.Width*D1+Petal.Width*D1+Petal.Width*D2,data=iris3)
summaty(fit3)
summary(fit3)
getYhat(fit3,mode=3)
devtools::docuemnt()
devtools::document()
devtools::check()
knitr::opts_chunk$set(
comment = NA,
fig.height = 5,
fig.width=7
)
library(processR)
sort(pmacro$no)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
pmacroModel(8,labels=labels)
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator)
cat(model)
library(lavaan)
semfit=sem(model=model,data=disaster,se="bootstrap",bootstrap=10)
summary(semfit,fit.measures=FALSE,standardize=TRUE,rsquare=TRUE)
res=parameterEstimates(semfit,
boot.ci.type = "bca.simple",
level = .95, ci = TRUE,
standardized = FALSE)
select=stringr::str_detect(res$label,"dir|tot|prop")
res[select,]
res=parameterEstimates(semfit,
boot.ci.type = "bca.simple",
level = .95, ci = TRUE,
standardized = FALSE)
select=stringr::str_detect(res$label,"dir|tot|prop")
res[select,]
estimatesTable2(semfit)
library(processR)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
iris1=addCatVars(iris,c("Species"))
iris3=addCatVars(iris,c("Species"),mode=3)
fit1=lm(Sepal.Length~Sepal.Width+D1+D2,data=iris1)
getYhat(fit1)
fit1=lm(Sepal.Length~D2*Sepal.Width+Sepal.Width*D1+Petal.Width,data=iris1)
getYhat(fit1)
fit3=lm(Sepal.Length~D2*Sepal.Width+Sepal.Width*D1+Petal.Width*D1+Petal.Width*D2,data=iris3)
summary(fit3)
getYhat(fit3,mode=3)
mycars=addCatVars(mtcars,c("cyl","carb))
mtcars1=addCatVars(mtcars,c("cyl","carb))
mtcars1=addCatVars(mtcars,c("cyl","carb"))
library(processR)
shiny::runApp('../processRApp')
library(shiny)
library(shiny)
library(shinyWidgets)
ui=fluidPage(
h2("Select Process Macro Model Number"),
fluidRow(
column(2,
selectInput("modelno","Model No",choices=sort(pmacro$no),selectize=FALSE,size=28)
),
column(10,
radioGroupButtons(
inputId = "plotChoice",
label = "Select Plot",
choices = c("Conceptual Diagram"=1, "Statistical Diagram"=2),
status = "primary"
),
plotOutput("modelPlot",height="500px",width="700px")
)
)
)
server=function(input,output,session){
output$modelPlot=renderPlot({
par(family=input$font)
if(input$plotChoice==1) {
pmacroModel(as.numeric(input$modelno))
} else{
statisticalDiagram(as.numeric(input$modelno))
}
})
}
runApp('R')
runApp('inst/showModels')
devtools::document()
devtools::document()
devtools::check()
showModels()
pmacro
showModels()
nodes
library(processR)
shiny::runApp(system.file('showModels',package='processR'))
library(processR)
showModles()
showModels()
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1,1,labels="df")
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c'))
text(0.8,1,labels=expression("c'"))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression("c5'"))
text(0.8,1.2,labels=expression("c[5]'"))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression("c[5]'"))
text(0.8,1.2,labels=expression(c[5]'))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression(c[5]'))
)
text(0.8,1.2,labels=expression(c5))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression(c5))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression(c[5i]))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression(c[5][i]))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression(c[5][i]'))
text(0.8,1.2,labels=expression(c[5][i]"'"))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression(c[5][i]"'"))
text(0.8,1.2,labels=expression(c[5][i] "'"))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression(c[5][i]\'))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression(c[5][i]^'))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression(c[5][i]^(')))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression(c[5][i]italic(')))
text(0.8,1.2,labels=expression(c[5][i]italic("'")))
text(0.8,1.2,labels=expression(c[5][i] tilde(c)))
text(0.8,1.2,labels=expression( tilde(c)))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1.2,labels=expression(scriptstyle(')))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c'"))
text(0.8,1,labels=expression("c5'"))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c5'"))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression("c[5]'"))
text(0.8,1,labels=expression(c[5]))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5]))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i]))
text(0.8,1.2,labels=expression(scriptstyle(\')))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i]''''))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i]'\\'''))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i]'\''))
text(0.8,1.2,labels=expression(scriptstyle(\')))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i]))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i]\prime))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i]\\prime))
text(0.8,1.2,labels=expression(scriptstyle(\')))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=paste0(expression(c[5][i]),"'"))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i]))
text(0.8,1.2,labels=expression(minute))
text(0.8,1,labels=expression(c[5][i]minute))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i][minute]))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i]^minute))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i] textstyle(minute)))
text(0.8,1,labels=expression(c[5][i] textstyle(minute)))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i] minute))
text(0.8,1,labels=expression(c[5][i][minute]))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c minute[5][i]))
text(0.8,1,labels=expression(textstyle(c)minute[5][i]))
text(0.8,1,labels=expression(c minute[5][i]))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(over(minute,c[5][i])))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i]minute))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i][minute]))
text(0.8,1.2,labels=labels=expression(c[minute]))
text(0.8,1.2,labels=expression(c[minute]))
text(0.8,1.2,labels=expression(c sup(minute)))
text(0.8,1.2,labels=expression(c [minute]))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i][minute]))
text(0.8,1.2,labels=expression(c [minute]))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i][minute]))
text(0.8,1.2,labels=expression(c^(minute)))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i][minute]))
text(0.8,1.2,labels=expression(c^minute))
plot(1,1,xlab=expression(frac("F'"(0),"R'"(0))),xaxt="n")
text(1.2,1,labels="df")
text(0.8,1,labels=expression(c[5][i]^minute))
text(0.8,1.2,labels=expression(c^minute))
library(processR)
showModels()
library(processR)
showModels()
devtools::document()
devtools::document()
devtools::document()
shiny::runApp('inst/showModels')
library(processR)
showModels()
library(processR)
showModels()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
showModels()
library(processR)
showModels()
system("grep -r 'drawtext' *")
system("grep -r 'drawtext' *")
system("grep -r 'drawtext *")
system("grep -r 'drawtext' *")
library(processR)
showModels()
showModels()
library(processR)
runApp('../processRApp')
