if(length(result)>0) {
values=result
} else{
values=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
}
values
}
#' extract number from string
#' @param x a string
#' @export
extractNumber=function(x){
result=c()
for(i in seq_along(x)){
temp=x[i]
# temp=str_replace_all(temp,"\\(|\\)","")
# temp=unlist(str_split(temp,"\\+|\\*|-"))
# temp
# select=which(str_detect(temp,"^[0-9|\\.].*"))
#
temp=str_replace_all(temp,"\\(|\\)","")
temp=unlist(str_split(temp,"\\+|\\*"))
select=which(str_detect(temp,"^[0-9|\\.|-].*"))
if(length(select)>0) {
result=c(result,temp[select])
}
}
result
}
# fit=semfit;mod=NULL;values=NULL;boot.ci.type="bca.simple"
fit=semfit
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label!="",]
res
if(is.null(mod)){
mod=res$lhs[str_detect(res$label,"mean")][1]
mod
}
key=ifelse(sum(str_detect(res$label,"indirect"))==0,"direct","indirect")
if(is.null(values)){
# values1=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
values1=extractRange(res,mod=mod,what=key)
if(!is.numeric(values1)) values1=as.numeric(values1)
values1
} else{
values1=values
}
select=paste0(key,c("",".below",".above"))
select
direct=res$est[which(res$lhs %in% select)]
lowerd=res$ci.lower[which(res$lhs %in% select)]
upperd=res$ci.upper[which(res$lhs %in% select)]
#
# se=res$se[which(res$lhs %in% select)]
directp=res$p[which(res$lhs %in% select)]
df=data.frame(values=values1,direct,lowerd,upperd,directp)
df=df[c(2,1,3),]
# str(df)
df[]=round(df,3)
attr(df,"mod")=mod
res
if(is.null(values)) {
direct=res$rhs[res$lhs==key]
direct
if(str_detect(direct,".mean")){
direct=str_replace(direct,paste0(mod,".mean"),"W")
} else{
temp=extractNumber(direct)
direct=str_replace_all(direct,temp,"W")
}
} else{
direct=res$rhs[res$lhs==key]
if(str_detect(direct,paste0(mod,".mean"))) {
direct=str_replace(direct,paste0(mod,".mean"),"W")
} else{
temp=as.character(values1[1])
direct=str_replace(direct,temp,"W")
}
}
attr(df,"direct")=direct
res=res[res$op=="~",]
temp=direct
res
temp
key=ifelse(sum(str_detect(res$label,"indirect"))==0,"direct","indirect")
if(is.null(values)){
# values1=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
values1=extractRange(res,mod=mod,what=key)
if(!is.numeric(values1)) values1=as.numeric(values1)
values1
} else{
values1=values
}
select=paste0(key,c("",".below",".above"))
select
direct=res$est[which(res$lhs %in% select)]
lowerd=res$ci.lower[which(res$lhs %in% select)]
upperd=res$ci.upper[which(res$lhs %in% select)]
#
# se=res$se[which(res$lhs %in% select)]
directp=res$p[which(res$lhs %in% select)]
df=data.frame(values=values1,direct,lowerd,upperd,directp)
df=df[c(2,1,3),]
# str(df)
df[]=round(df,3)
attr(df,"mod")=mod
res
key
fit=semfit;mod=NULL;values=NULL;boot.ci.type="bca.simple"
# fit=semfit;mod=NULL;values=NULL;boot.ci.type="bca.simple"
fit=semfit
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label!="",]
res
if(is.null(mod)){
mod=res$lhs[str_detect(res$label,"mean")][1]
mod
}
key=ifelse(sum(str_detect(res$label,"indirect"))==0,"direct","indirect")
key
if(is.null(values)){
# values1=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
values1=extractRange(res,mod=mod,what=key)
if(!is.numeric(values1)) values1=as.numeric(values1)
values1
} else{
values1=values
}
select=paste0(key,c("",".below",".above"))
select
direct=res$est[which(res$lhs %in% select)]
lowerd=res$ci.lower[which(res$lhs %in% select)]
upperd=res$ci.upper[which(res$lhs %in% select)]
#
# se=res$se[which(res$lhs %in% select)]
directp=res$p[which(res$lhs %in% select)]
df=data.frame(values=values1,direct,lowerd,upperd,directp)
df=df[c(2,1,3),]
# str(df)
df[]=round(df,3)
attr(df,"mod")=mod
res
if(is.null(values)) {
direct=res$rhs[res$lhs==key]
direct
if(str_detect(direct,".mean")){
direct=str_replace(direct,paste0(mod,".mean"),"W")
} else{
temp=extractNumber(direct)
direct=str_replace_all(direct,temp,"W")
}
} else{
direct=res$rhs[res$lhs==key]
if(str_detect(direct,paste0(mod,".mean"))) {
direct=str_replace(direct,paste0(mod,".mean"),"W")
} else{
temp=as.character(values1[1])
direct=str_replace(direct,temp,"W")
}
}
direct
attr(df,"direct")=direct[1]
res=res[res$op=="~",]
temp=direct
temp
temp=direct[1]
temp
for(i in 1:nrow(res)){
temp=str_replace_all(temp,res$label[i],sprintf("%0.3f",res$est[i]))
}
temp=str_replace_all(temp,"\\+\\-","\\-")
attr(df,"direct2")=temp
attr(df,"boot.ci.type")=boot.ci.type
class(df)=c("modSummary","data.frame")
df
devtools::document()
library(processR)
devtools::check()
devtools::document()
library(processR)
devtools::check()
library(processR)
drawModel(semfit,labels=labels,mode=2)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","b","c")))
eq=tripleEquation(labels=labels,moderator=moderator,mode=1)
eq
model=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2)
cat(model)
semfit=sem(model,data=disaster)
drawModel(semfit,labels=labels,mode=2)
library(processR)
devtools::document()
devtools::check()
require(processR)
labels=list(X="negemot",W="sex",Z="age",Y="govact",C1="posemot",C2="ideology")
fit=lm(govact~negemot*sex+negemot*age+posemot+ideology,data=glbwarm)
modSummary2(fit,rangemode=2,mod2.values=c(30,50,70),summarymode=2)
modSummary2(fit,mod2.values=c(30,50,70),summarymode=1,labels=labels)
modSummary2(fit,rangemode=2,mod2.values=c(30,50,70),summarymode=2)
labels=list(X="frame",W="skeptic",Y="justify")
fit=lm(justify~frame*skeptic,data=disaster)
modSummary2(fit,labels=labels)
fit=lm(govact~negemot*sex+negemot*age+posemot+ideology,data=glbwarm)
modSummary3(fit,mod2.values=c(30,50,70))
fit1=lm(govact~negemot*sex*age+posemot+ideology,data=glbwarm)
modSummary3(fit1,rangemode=1)
fit=lm(mpg~hp*wt,data=mtcars)
modSummary3(fit)
pmacro
require(processR)
pmacro
require(processR)
require(lavaan)
labels=list(X="dysfunc",M="negtone",Y="perform",W="negexp")
moderator=list(name="negexp",site=list("b"))
model=tripleEquation(labels=labels,moderator=moderator,rangemode=2,data=teams)
cat(model)
semfit=sem(model,data=teams,se="boot",bootstrap=100)
pmacro
showModels()
showModels()
library(processR)
devtools::document()
library(processR)
devtools::document()
library(processR)
devtools::check()
pmacroModel(8)
devtools::document()
devtools::check()
library(processR)
pmacroModel(0)
pmacroModel(0,ylim=c(0.4,0.9))
pmacroModel(0)
pmacroModel(0,ylim=c(0.3,0.7))
pmacroModel(0,ylim=c(0.4,0.6))
pmacroModel(0,ylim=c(0.3,0.7))
pmacroModel(0,ylim=c(0.3,0.5))
library(processR)
library(processR)
library(klaR)
labels=list(X="GDPpp",M="Illit",Y="LifeEx")
result=mediationBK(labels=labels,data=countries)
data(countries)
labels=list(X="GDPpp",M="Illit",Y="LifeEx")
result=mediationBK(labels=labels,data=countries)
modelsSummary(result$fit)
modelsSummary(result$fit,labels=labels)
modelsSummaryTable(result$fit,labels=labels)
name=c("(Intercept)","negtone","negexp","dysfunc","negtone:negexp")
dep="perform"
labels=list(X="dysfunc",M="negtone",W="negexp",Y="perform")
constant="iy"
prefix="c"
# name=c("(Intercept)","negtone","negexp","dysfunc","negtone:negexp")
# dep="perform"
# labels=list(X="dysfunc",M="negtone",W="negexp",Y="perform")
# constant="iy"
# prefix="c"
result=c()
dep=changeLabelName(dep,labels,add=FALSE)
dep
j<-k<-l<-1
temp=changeLabelName(name,labels,add=FALSE)
temp
for(i in seq_along(temp)){
if(temp[i]=="(Intercept)") result=c(result,constant)
else if(temp[i]=="M") {
result=c(result,paste0("b",l))
l=l+1
} else if(substr(temp[i],1,1)=="C"){
if(dep=="Y") {
result=c(result,paste0("g",k))
} else{
result=c(result,paste0("f",k))
}
k<-k+1
} else if(temp[i]=="X"){
if(dep=="Y") {
result=c(result,paste0("c'",j))
} else{
result=c(result,paste0(prefix,j))
}
j<-j+1
} else if(temp[i]=="W"){
if(("X:W" %in% temp)|("W:X" %in% temp)){
if(dep=="Y") {
result=c(result,paste0("c'",j))
} else{
result=c(result,paste0(prefix,j))
}
j<-j+1
} else{
result=c(result,paste0("b",l))
l<-l+1
}
} else if(temp[i] %in% c("X:W","W:X")){
if(dep=="Y") {
result=c(result,paste0("c'",j))
} else{
result=c(result,paste0(prefix,j))
}
j<-j+1
} else {  #if(temp[i]=="M:W")
result=c(result,paste0("b",l))
l=l+1
}
}
if(!("c2" %in% result)) result[result=="c1"]="c"
if(!("c'2" %in% result)) result[result=="c'1"]="c'"
if(!("b2" %in% result)) result[result=="b1"]="b"
if(!("a2" %in% result)) result[result=="a1"]="a"
if(!("f2" %in% result)) result[result=="f1"]="f"
if(!("g2" %in% result)) result[result=="g1"]="g"
if("W:X" %in% temp) {
result[result=="c'1"]="c'4"
result[result=="c'2"]="c'1"
result[result=="c'4"]="c'2"
}
result
# name=c("(Intercept)","negtone","negexp","dysfunc","negtone:negexp")
name=c("(Intercept)","negtone")
dep="perform"
labels=list(X="dysfunc",M="negtone",W="negexp",Y="perform")
constant="iy"
prefix="c"
# name=c("(Intercept)","negtone","negexp","dysfunc","negtone:negexp")
# name=c("(Intercept)","negtone")
# dep="perform"
# labels=list(X="dysfunc",M="negtone",W="negexp",Y="perform")
# constant="iy"
# prefix="c"
result=c()
dep=changeLabelName(dep,labels,add=FALSE)
dep
j<-k<-l<-1
temp=changeLabelName(name,labels,add=FALSE)
temp
# name=c("(Intercept)","negtone","negexp","dysfunc","negtone:negexp")
name=c("(Intercept)","dysfunction")
dep="perform"
labels=list(X="dysfunc",M="negtone",W="negexp",Y="perform")
constant="iy"
prefix="c"
result=c()
# name=c("(Intercept)","negtone","negexp","dysfunc","negtone:negexp")
# name=c("(Intercept)","dysfunction")
# dep="perform"
# labels=list(X="dysfunc",M="negtone",W="negexp",Y="perform")
# constant="iy"
# prefix="c"
result=c()
dep=changeLabelName(dep,labels,add=FALSE)
dep
j<-k<-l<-1
temp=changeLabelName(name,labels,add=FALSE)
temp
for(i in seq_along(temp)){
if(temp[i]=="(Intercept)") result=c(result,constant)
else if(temp[i]=="M") {
result=c(result,paste0("b",l))
l=l+1
} else if(substr(temp[i],1,1)=="C"){
if(dep=="Y") {
result=c(result,paste0("g",k))
} else{
result=c(result,paste0("f",k))
}
k<-k+1
} else if(temp[i]=="X"){
if(dep=="Y") {
result=c(result,paste0("c'",j))
} else{
result=c(result,paste0(prefix,j))
}
j<-j+1
} else if(temp[i]=="W"){
if(("X:W" %in% temp)|("W:X" %in% temp)){
if(dep=="Y") {
result=c(result,paste0("c'",j))
} else{
result=c(result,paste0(prefix,j))
}
j<-j+1
} else{
result=c(result,paste0("b",l))
l<-l+1
}
} else if(temp[i] %in% c("X:W","W:X")){
if(dep=="Y") {
result=c(result,paste0("c'",j))
} else{
result=c(result,paste0(prefix,j))
}
j<-j+1
} else {  #if(temp[i]=="M:W")
result=c(result,paste0("b",l))
l=l+1
}
}
if(!("c2" %in% result)) result[result=="c1"]="c"
if(!("c'2" %in% result)) result[result=="c'1"]="c'"
if(!("b2" %in% result)) result[result=="b1"]="b"
if(!("a2" %in% result)) result[result=="a1"]="a"
if(!("f2" %in% result)) result[result=="f1"]="f"
if(!("g2" %in% result)) result[result=="g1"]="g"
if("W:X" %in% temp) {
result[result=="c'1"]="c'4"
result[result=="c'2"]="c'1"
result[result=="c'4"]="c'2"
}
result
# name=c("(Intercept)","negtone","negexp","dysfunc","negtone:negexp")
name=c("(Intercept)","dysfunction")
dep="perform"
labels=list(X="dysfunc",M="negtone",W="negexp",Y="perform")
constant="iy"
prefix="c"
# name=c("(Intercept)","negtone","negexp","dysfunc","negtone:negexp")
# name=c("(Intercept)","dysfunction")
# dep="perform"
# labels=list(X="dysfunc",M="negtone",W="negexp",Y="perform")
# constant="iy"
# prefix="c"
result=c()
dep=changeLabelName(dep,labels,add=FALSE)
dep
j<-k<-l<-1
temp=changeLabelName(name,labels,add=FALSE)
temp
# name=c("(Intercept)","negtone","negexp","dysfunc","negtone:negexp")
name=c("(Intercept)","dysfunc")
dep="perform"
labels=list(X="dysfunc",M="negtone",W="negexp",Y="perform")
constant="iy"
prefix="c"
# name=c("(Intercept)","negtone","negexp","dysfunc","negtone:negexp")
# name=c("(Intercept)","dysfunc")
# dep="perform"
# labels=list(X="dysfunc",M="negtone",W="negexp",Y="perform")
# constant="iy"
# prefix="c"
result=c()
dep=changeLabelName(dep,labels,add=FALSE)
dep
j<-k<-l<-1
temp=changeLabelName(name,labels,add=FALSE)
temp
for(i in seq_along(temp)){
if(temp[i]=="(Intercept)") result=c(result,constant)
else if(temp[i]=="M") {
result=c(result,paste0("b",l))
l=l+1
} else if(substr(temp[i],1,1)=="C"){
if(dep=="Y") {
result=c(result,paste0("g",k))
} else{
result=c(result,paste0("f",k))
}
k<-k+1
} else if(temp[i]=="X"){
if(dep=="Y") {
result=c(result,paste0("c'",j))
} else{
result=c(result,paste0(prefix,j))
}
j<-j+1
} else if(temp[i]=="W"){
if(("X:W" %in% temp)|("W:X" %in% temp)){
if(dep=="Y") {
result=c(result,paste0("c'",j))
} else{
result=c(result,paste0(prefix,j))
}
j<-j+1
} else{
result=c(result,paste0("b",l))
l<-l+1
}
} else if(temp[i] %in% c("X:W","W:X")){
if(dep=="Y") {
result=c(result,paste0("c'",j))
} else{
result=c(result,paste0(prefix,j))
}
j<-j+1
} else {  #if(temp[i]=="M:W")
result=c(result,paste0("b",l))
l=l+1
}
}
result
library(processR)
modelsSummary(result$fit,labels=labels)
library(processR)
library(klaR)
data(countries)
labels=list(X="GDPpp",M="Illit",Y="LifeEx")
result=mediationBK(labels=labels,data=countries)
modelsSummary(result$fit,labels=labels)
modelsSummaryTable(result$fit,labels=labels)
modelsSummary(result$fit,labels=labels)
library(processR)
devtools::document()
devtools::check()
labels=list(X="cond",M="pmi",Y="reaction")
result=mediationBK(labels=labels,data=pmi,silent=FALSE)
result
