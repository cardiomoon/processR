equations
purrr::map_df(equations,eq2var,labels=labels)
}
eq2var=function(eq,labels=list()){
temp=unlist(strsplit(eq,"~"))
y=temp[1]
x=unlist(strsplit(temp[2],"\\+"))
y=rep(y,length(x))
df=data.frame(y=y,x=x,stringsAsFactors = FALSE)
df$Variables=changeLabelName(df$y,labels=labels)
df$Predictors=changeLabelName(df$x,labels=labels)
df$name=makeCoefLabel(name=df$x,dep=y[1],labels=labels,constant = "iy",prefix="b")
df
}
eq=multipleMediation(labels=labels,moderator=moderator,mode=1)
eq
eq=multipleMediation(labels=labels,moderator=moderator,mode=1)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=multipleMediation(labels=labels,moderator=moderator,mode=1)
eq
df=equations2var(eq,labels=labels)
df
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
labels2table(labels)
#' Make estimateTable with a list of lm object
#' @param fit A list of lm object
#' @param labels A list
#' @param digits integer indicating the number of decimal places
#' @export
#' @examples
#' labels=list(X="frame",M="justify",Y="donate",W="skeptic")
#' moderator=list(name="skeptic",site=list(c("a","c")))
#' labels2table(labels)
labels2table=function(labels=labels,moderator=list(),digits=3){
eq=multipleMediation(labels=labels,moderator=moderator,mode=1)
eq
df=equations2var(eq,labels=labels)
df
}
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
labels2table(labels)
equations2var=function(eq,labels=list()){
Y=c()
X=list()
equations=unlist(strsplit(eq,"\n"))
equations
purrr::map_df(equations,eq2var,labels=labels)
}
eq2var=function(eq,labels=list()){
temp=unlist(strsplit(eq,"~"))
y=temp[1]
x=unlist(strsplit(temp[2],"\\+"))
y=rep(y,length(x))
df=data.frame(y=y,x=x,stringsAsFactors = FALSE)
df$Variables=changeLabelName(df$y,labels=labels)
df$Predictors=changeLabelName(df$x,labels=labels)
df$name=makeCoefLabel(name=df$x,dep=y[1],labels=labels,constant = "iy",prefix="b")
df
}
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
labels2table(labels)
labels2table(labels,moderator=moderator)
equations2var=function(eq,labels=list()){
equations=unlist(strsplit(eq,"\n"))
purrr::map_df(equations,eq2var,labels=labels)
}
eq2var=function(eq,labels=list()){
temp=unlist(strsplit(eq,"~"))
y=temp[1]
x=unlist(strsplit(temp[2],"\\+"))
y=rep(y,length(x))
df=data.frame(y=y,x=x,stringsAsFactors = FALSE)
df$Variables=changeLabelName(df$y,labels=labels)
df$Predictors=changeLabelName(df$x,labels=labels)
df$name=makeCoefLabel(name=df$x,dep=y[1],labels=labels,constant = "iy",prefix="b")
df
}
#'make data.frame with equation
#'@param eq equation
#'@param labels A list
#'@export
#'@importFrom purrr map_df
#' labels=list(X="frame",M="justify",Y="donate",W="skeptic")
#' moderator=list(name="skeptic",site=list(c("a","c")))
#' eq=multipleMediation(labels=labels,moderator=moderator,mode=1)
#' equations2var(eq)
equations2var=function(eq,labels=list()){
equations=unlist(strsplit(eq,"\n"))
purrr::map_df(equations,eq2var,labels=labels)
}
#'make data.frame with equation
#'@param eq equation
#'@param labels A list
#'@export
#'@examples
#'
eq2var=function(eq,labels=list()){
temp=unlist(strsplit(eq,"~"))
y=temp[1]
x=unlist(strsplit(temp[2],"\\+"))
y=rep(y,length(x))
df=data.frame(y=y,x=x,stringsAsFactors = FALSE)
df$Variables=changeLabelName(df$y,labels=labels)
df$Predictors=changeLabelName(df$x,labels=labels)
df$name=makeCoefLabel(name=df$x,dep=y[1],labels=labels,constant = "iy",prefix="b")
df
}
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=multipleMediation(labels=labels,moderator=moderator,mode=1)
equations2var(eq)
#'make data.frame with equation
#'@param eq equation
#'@param labels A list
#'@export
#' labels=list(X="frame",M="justify",Y="donate",W="skeptic")
#' eq2var("")
eq2var=function(eq,labels=list()){
temp=unlist(strsplit(eq,"~"))
y=temp[1]
x=unlist(strsplit(temp[2],"\\+"))
y=rep(y,length(x))
df=data.frame(y=y,x=x,stringsAsFactors = FALSE)
df$Variables=changeLabelName(df$y,labels=labels)
df$Predictors=changeLabelName(df$x,labels=labels)
df$name=makeCoefLabel(name=df$x,dep=y[1],labels=labels,constant = "iy",prefix="b")
df
}
#'@examples
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
eq=multipleMediation(labels=labels,moderator=moderator,mode=1)
moderator=list(name="skeptic",site=list(c("a","c")))
eq=multipleMediation(labels=labels,moderator=moderator,mode=1)
eq
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
eq2var("donate~justify+frame+skeptic+frame:skeptic")
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=multipleMediation(labels=labels,moderator=moderator,mode=1)
equations2var(eq)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
labels2table(labels)
labels2table(labels,moderator=moderator)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
nodelabels=NULL;whatLabel="name"
xmargin=0.01;radx=NULL;mode=2;nodemode=1
ymargin=0.02;xlim=NULL;ylim=NULL
rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
xinterval=NULL;yinterval=NULL;xspace=NULL;label.pos=list()
digits=3
interactionFirst=TRUE;totalOnly=TRUE
labels=list(X="cyl",M=c("am","wt","hp"),Y="mpg",W="vs")
moderator=list(name=c("vs"),site=list(c("a","b")))
model=multipleMediation(labels=labels,moderator=moderator,data=mtcars)
semfit=sem(model=model,data=mtcars)
drawModel(semfit,labels=labels)
if(is.null(radx)) radx=ifelse(nodemode %in% c(1,4),0.09,0.12)
if(is.null(xlim)) {
if(nodemode==4) {
xlim=c(-0.1,1.1)
} else {
xlim=c(-0.3,1.3)
}
}
if(is.null(ylim)) {
if(nodemode==4) {
ylim=c(0,1)
} else {
ylim=xlim
}
}
if(class(semfit)=="lavaan"){
res=parameterEstimates(semfit)
res=res[res$op=="~",]
res
res=res[c(1,3,4,5,8)]
} else if(class(semfit)=="list"){
res=fit2table(semfit,labels=labels,digits=digits)
res=res[c(6,5,7,1,4)]
}
colnames(res)=c("end","start","name","est","p")
res
res$start=changeLabelName(res$start,labels,add=FALSE)
res$end=changeLabelName(res$end,labels,add=FALSE)
df1=res
df1
if(totalOnly){
df1=df1[df1$end=="Y",]
df1=df1[df1$start!="M",]
}
name=unique(c(df1$start,df1$end))
nodes=data.frame(name=name,stringsAsFactors = FALSE)
nodes$no=4
nodes$no[nodes$name=="Y"]=1
nodes$no[str_detect(nodes$name,"^M[0-9]?$")]=2
nodes$no[str_detect(nodes$name,"^X[0-9]?$")]=3
count=length(nodes$no[nodes$no==4])
nodes$no[(nodes$no==4)&(str_detect(nodes$name,":"))]=6
nodes$no[(nodes$no==6)&(str_detect(nodes$name,"^X"))]=5
temp="dplyr::arrange(nodes,no,name)"
nodes<-eval(parse(text=temp))
nodes
df1
df1=labels2table(labels=labels,moderator=moderator)
df1
library(processR)
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
drawModel(labels=labels)
library(processR)
devtools::document()
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
drawModel(labels=labels)
nodelabels=NULL;whatLabel="name"
xmargin=0.01;radx=NULL;mode=2;nodemode=1
ymargin=0.02;xlim=NULL;ylim=NULL
rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
xinterval=NULL;yinterval=NULL;xspace=NULL;label.pos=list()
digits=3
interactionFirst=TRUE;totalOnly=TRUE
if(is.null(radx)) radx=ifelse(nodemode %in% c(1,4),0.09,0.12)
if(is.null(xlim)) {
if(nodemode==4) {
xlim=c(-0.1,1.1)
} else {
xlim=c(-0.3,1.3)
}
}
if(is.null(ylim)) {
if(nodemode==4) {
ylim=c(0,1)
} else {
ylim=xlim
}
}
if(is.null(semfit)){
df1=labels2table(labels=labels,moderator=moderator)
df1$end=df1$Variables
df1$start=df1$Predictors
} else if(class(semfit)=="lavaan"){
res=parameterEstimates(semfit)
res=res[res$op=="~",]
res
res=res[c(1,3,4,5,8)]
} else if(class(semfit)=="list"){
res=fit2table(semfit,labels=labels,digits=digits)
res=res[c(6,5,7,1,4)]
}
if(is.null(semfit)){
df1=labels2table(labels=labels,moderator=moderator)
df1$end=df1$Variables
df1$start=df1$Predictors
} else if(class(semfit)=="lavaan"){
res=parameterEstimates(semfit)
res=res[res$op=="~",]
res
res=res[c(1,3,4,5,8)]
} else if(class(semfit)=="list"){
res=fit2table(semfit,labels=labels,digits=digits)
res=res[c(6,5,7,1,4)]
}
# nodelabels=NULL;whatLabel="name"
# xmargin=0.01;radx=NULL;mode=2;nodemode=1
# ymargin=0.02;xlim=NULL;ylim=NULL
# rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
# xinterval=NULL;yinterval=NULL;xspace=NULL;label.pos=list()
# digits=3
interactionFirst=TRUE;totalOnly=TRUE;semfit=NULL
if(is.null(radx)) radx=ifelse(nodemode %in% c(1,4),0.09,0.12)
if(is.null(xlim)) {
if(nodemode==4) {
xlim=c(-0.1,1.1)
} else {
xlim=c(-0.3,1.3)
}
}
if(is.null(ylim)) {
if(nodemode==4) {
ylim=c(0,1)
} else {
ylim=xlim
}
}
if(is.null(semfit)){
df1=labels2table(labels=labels,moderator=moderator)
df1$end=df1$Variables
df1$start=df1$Predictors
} else if(class(semfit)=="lavaan"){
res=parameterEstimates(semfit)
res=res[res$op=="~",]
res
res=res[c(1,3,4,5,8)]
} else if(class(semfit)=="list"){
res=fit2table(semfit,labels=labels,digits=digits)
res=res[c(6,5,7,1,4)]
}
# nodelabels=NULL;whatLabel="name"
# xmargin=0.01;radx=NULL;mode=2;nodemode=1
# ymargin=0.02;xlim=NULL;ylim=NULL
# rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
# xinterval=NULL;yinterval=NULL;xspace=NULL;label.pos=list()
# digits=3
interactionFirst=TRUE;totalOnly=TRUE;semfit=NULL;moderator=list()
if(is.null(radx)) radx=ifelse(nodemode %in% c(1,4),0.09,0.12)
if(is.null(xlim)) {
if(nodemode==4) {
xlim=c(-0.1,1.1)
} else {
xlim=c(-0.3,1.3)
}
}
if(is.null(ylim)) {
if(nodemode==4) {
ylim=c(0,1)
} else {
ylim=xlim
}
}
if(is.null(semfit)){
df1=labels2table(labels=labels,moderator=moderator)
df1$end=df1$Variables
df1$start=df1$Predictors
} else if(class(semfit)=="lavaan"){
res=parameterEstimates(semfit)
res=res[res$op=="~",]
res
res=res[c(1,3,4,5,8)]
} else if(class(semfit)=="list"){
res=fit2table(semfit,labels=labels,digits=digits)
res=res[c(6,5,7,1,4)]
}
if(!is.null(semfit)){
colnames(res)=c("end","start","name","est","p")
res
res$start=changeLabelName(res$start,labels,add=FALSE)
res$end=changeLabelName(res$end,labels,add=FALSE)
df1=res
}
df1
if(totalOnly){
df1=df1[df1$end=="Y",]
df1=df1[df1$start!="M",]
}
name=unique(c(df1$start,df1$end))
nodes=data.frame(name=name,stringsAsFactors = FALSE)
nodes$no=4
nodes$no[nodes$name=="Y"]=1
nodes$no[str_detect(nodes$name,"^M[0-9]?$")]=2
nodes$no[str_detect(nodes$name,"^X[0-9]?$")]=3
count=length(nodes$no[nodes$no==4])
nodes$no[(nodes$no==4)&(str_detect(nodes$name,":"))]=6
nodes$no[(nodes$no==6)&(str_detect(nodes$name,"^X"))]=5
temp="dplyr::arrange(nodes,no,name)"
nodes<-eval(parse(text=temp))
nodes
if(interactionFirst){
nodes$no[nodes$no==5]=0
nodes$no[nodes$no==4]=5
nodes$no[nodes$no==3]=4
nodes$no[nodes$no==0]=3
}
icount=length(which(nodes$no>=5))
icount
nodes$xpos=0
nodes$xpos[nodes$name=="Y"]=ypos[1]
mcount=nrow(nodes[nodes$no==2,])
if(mcount>1) {
if(mcount==2){
mympos=seq(from=0.2,to=0.8,length.out=mcount)
} else{
mympos=seq(from=0.05,to=0.95,length.out=mcount)
}
for(i in 1:mcount){
labels[[paste0("M",i)]]=labels$M[i]
}
} else {
mympos=0.5
}
nodes$xpos[nodes$no==2]=mympos
xcount=nrow(nodes[nodes$no==3,])
if(xcount>1) {
for(i in 1:xcount){
labels[[paste0("X",i)]]=labels$X[i]
}
}
nodes
icount
if(icount>0) {
nodes$xpos[nodes$no>=5]=seq(from=0.1,to=0.9,length.out=icount)
}
if(totalOnly) {
nodes$xpos[nodes$no!=1]=0
}
nodes$ypos=1
nodes$ypos[nodes$no==1]=ypos[2]
nodes$ypos[nodes$no==2]=mpos[2]
if(mcount>2){
starty=mpos[2]-0.1
nodes$ypos[nodes$no==2]=c(starty,rep(mpos[2],mcount-2),starty)
}
temp="dplyr::arrange(nodes,no)"
nodes=eval(parse(text=temp))
select1=which(nodes$no<=2)
select=setdiff(which(nodes$no<5),select1)
select
nodes$ypos[select]=seq(to=2,by=-1,length.out = length(select))
nodes
# nodes$xpos1=adjustxpos(nodes$xpos,xmargin=xmargin,radx=radx)
nodes$ypos=adjustypos(nodes$ypos,ymargin=ymargin,rady=rady,
maxypos=maxypos,minypos=minypos,totalOnly=totalOnly)
if(("M2" %in% nodes$name)&(nrow(nodes)==4)){
nodes$xpos[nodes$name=="M1"]=0.5
nodes$ypos[nodes$name=="M2"]=0
nodes$xpos[nodes$name=="M2"]=0.5
nodes$ypos[nodes$name=="X"]=0.45
nodes$ypos[nodes$name=="Y"]=0.45
}
arrows=df1
arrows$labelpos=0.5
arrows$arrpos=0.8
arrows$no=1
arrows$lty=1
arrows$label1=arrows$name
if(whatLabel=="name") {
arrows$label=arrows$name
addprime=ifelse(totalOnly,FALSE,TRUE)
} else{
arrows$label=round(arrows$est,digits)
arrows$lty=ifelse(arrows$p<0.05,1,3)
addprime=FALSE
}
# print(nodes)
# print(arrows)
if(is.null(nodelabels)) {
nodelabels=labels
}
openplotmat(xlim=xlim,ylim=ylim)
for(i in 1:nrow(arrows)){
temppos=arrows$labelpos[i]
if(!is.null(label.pos[[arrows$name[i]]])) temppos=label.pos[[arrows$name[i]]]
if(totalOnly){
myarrow2(nodes, from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=temppos,arr.pos=NULL,lty=arrows$lty[i],addprime=addprime,
xspace=xspace,mode=2,xadj=0)
} else{
myarrow2(nodes, from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=temppos,arr.pos=NULL,lty=arrows$lty[i],addprime=addprime,
xspace=xspace,mode=2)
}
}
nodes
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx,xspace=xspace,mode=2)
mid=c(xpos,nodes$ypos[i])
label=nodes$name[i]
if(nodemode==2) {
if(!is.null(labels[[label]])) label=labels[[label]]
} else if(nodemode==3){
if(!is.null(labels[[label]])) label=paste0(labels[[label]],"(",label,")")
}
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE,box.col=box.col)
if(nodemode==1){
if(!is.null(nodelabels[[label]])) {
if(is.null(yinterval)) yinterval=rady+ymargin
if(is.null(xinterval)) xinterval=radx+xmargin
if(mid[2]<=rady+ymargin){
newmid=mid-c(0,yinterval)
adj=c(0.5,1.5)
} else if(mid[2]>=0.9){
newmid=mid+c(0,yinterval)
adj=c(0.5,-0.5)
} else if(mid[1]>0.85){
newmid=mid+c(xinterval,0)
adj=c(0,0.5)
} else{
newmid=mid-c(xinterval,0)
adj=c(1,0.5)
}
textplain(mid=newmid,lab=nodelabels[[label]],adj=adj)
}
}
}
library(processR)
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
drawModel(labels=labels)
library(processR)
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
drawModel(labels=labels)
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
model=multipleMediation(labels=labels,data=pmi,serial=TRUE)
semfit=sem(model=model,data=pmi)
drawModel(semfit,labels=labels,whatLabel="est")
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
model=multipleMediation(labels=labels,data=pmi)
semfit=sem(model=model,data=pmi)
drawModel(semfit,labels=labels,whatLabel="est")
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
drawModel(labels=labels)
devtools::document()
devtools::check()
