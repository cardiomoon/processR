cat(model)
model=tripleEquation(X="age2",M="HBP",Y="NTAV",moderator=moderator,data=radial)
cat(model)
semfit=sem(model=model,data=radial,se="boot",bootstrap=10)
semfit=sem(model=model,data=radial)
summary(semfit)
model=tripleEquation(X="age2",M="HBP",Y="NTAV",moderator=moderator,data=radial)
radial$age2=(radial$age)^2
moderator=list(name="male",site=list("c"))
model=tripleEquation(X="age2",M="HBP",Y="NTAV",moderator=moderator,data=radial)
cat(model)
semfit=sem(model=model,data=radial)
summary(semfit)
semfit=sem(model=model,data=radial,se="boot",bootstrap=10)
summary(semfit)
model=tripleEquation(X="age2",M="HBP",Y="NTAV",moderator=moderator,data=radial)
cat(model)
semfit=sem(model=model,data=radial)
summary(semfit)
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator)
cat(model)
semfit=sem(model=model,data=disaster)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
model=tripleEquation(X="estress",M="affect",Y="withdraw",covar = covar,rangemode = 2)
cat(model)
model=tripleEquation(X="estress",M="affect",Y="withdraw",covar = covar,rangemode = 1,data=disaster)
cat(model)
model=tripleEquation(X="estress",M="affect",Y="withdraw",covar = covar,rangemode = 2,data=disaster)
cat(model)
covar=list(name=c("ese","sex","tenure"),site=list(c("M","Y"),c("M","Y"),c("M","Y")))
covar
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator)
cat(model)
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,rangemode=2,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,rangemode=2,data=disaster)
cat(model)
modmedSummary(semfit,mod="skeptic")
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,rangemode=2,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster)
semfit$data
str(semfit)
str(semfit@Data)
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
modmedSummary(semfit,mod="skeptic")
warnings()
modmedSummary(semfit,mod="skeptic")
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,rangemode=2,data=disaster)
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,rangemode=2,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
fit=semfit
# boot.ci.type="bca.simple";mod="skeptic";values=NULL
# fit=semfit;mod="HBP";values=NULL;boot.ci.type="bca.simple"
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
boot.ci.type="bca.simple"
# boot.ci.type="bca.simple";mod="skeptic";values=NULL
# fit=semfit;mod="HBP";values=NULL;boot.ci.type="bca.simple"
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label!="",]
res
str_detect(res$lhs,"direct")
res$lhs
str_detect(res$lhs,"direct")
seelct=str_detect(res$lhs,"direct")
select=str_detect(res$lhs,"direct")
res$lhs[select]
select=str_detect(res$lhs,"indirect")
res$lhs[select]
res1=res[select,]
res
res1
res1=res[select,1:3]
res1
res1=res[select,c(1,3)]
res1
select=str_detect(res$lhs,"indirect")
res1=res[select,c(1,3)]
res1
temp=res1$rhs
temp
temp=str_replace_all(temp,"\\(|\\)","")
temp
select=str_detect(res$lhs,"indirect")
res1=res[select,c(1,3)]
temp=res1$rhs
temp=str_replace_all(temp,"\\(|\\)","")
temp
x=temp
result=c()
i=1
temp=x[i]
temp=str_replace_all(temp,"\\(|\\)","")
temp
str_split(temp,"\\+|\\*|-")
temp=unlist(str_split(temp,"\\+|\\*|-"))
temp
as.numeric(temp)
temp
str_view(temp,"[:alnum:]")
str_view(temp,"[:digits:]")
str_view(temp,"[:digits]")
str_view(temp,"[:digit:]")
str_view(temp,"[:digit:|\\.]")
str_view(temp,"[0-9|\\.]")
str_view(temp,"[0-9|\\.].*")
str_view(temp,"^[0-9|\\.].*")
str_detect(temp,"^[0-9|\\.].*")
select=str_detect(temp,"^[0-9|\\.].*")
select
select=which(str_detect(temp,"^[0-9|\\.].*"))
seelct
select
temp[select]
result=as.numeric(temp[select])
extractNumber=function(x){
result=c()
for(i in seq_along(x)){
temp=x[i]
temp=str_replace_all(temp,"\\(|\\)","")
temp=unlist(str_split(temp,"\\+|\\*|-"))
temp
select=which(str_detect(temp,"^[0-9|\\.].*"))
if(length(select)>0) {
result=c(result,as.numeric(temp[select]))
}
}
result
}
select=str_detect(res$lhs,"indirect")
res1=res[select,c(1,3)]
temp=res1$rhs
temp
extractNumber=function(x){
result=c()
for(i in seq_along(x)){
temp=x[i]
temp=str_replace_all(temp,"\\(|\\)","")
temp=unlist(str_split(temp,"\\+|\\*|-"))
temp
select=which(str_detect(temp,"^[0-9|\\.].*"))
if(length(select)>0) {
result=c(result,as.numeric(temp[select]))
}
}
result
}
result=extractNumber(temp)
result
devtools::document()
devtools::check()
devtools::document()
library(processR)
devtools::document()
devtools::check()
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,rangemode=2,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,rangemode=2,data=disaster)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
modmedSummary(semfit,mod="skeptic")
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,rangemode=2,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
x=modmedSummary(semfit,mod="skeptic")
modmedSummaryTable(x)
model=tripleEquation(X="cond",M="pmi",Y="reaction")
model
semfit=sem(model,data=pmi)
model=tripleEquation(X="cond",M="pmi",Y="reaction")
semfit=sem(model,data=pmi)
equations=tripleEquation(X="cond",M="pmi",Y="reaction",mode=1)
equations
fit=eq2fit(equations)
fit=eq2fit(equations,data=pmi)
modelsSummary(fit)
labels=list(X="cond",M="pmi",Y="reaction")
modelsSummary(fit,labels=labels)
summary(fit[[2]])
mean(pmi$cond)
summary(fit[[2]])
mean(pmi$pmi)
coef(fit[[2]])[1]
coef(fit[[2]])[1]+coef(fit[[2]])[2]*mean(pmi$pmi)+coef(fit[[2]])[3]*mean(pmi$cond)
model=tripleEquation(X="estress",M="affect",Y="withdraw")
model=tripleEquation(X="estress",M="affect",Y="withdraw",mode=1)
equations=tripleEquation(X="estress",M="affect",Y="withdraw",mode=1)
cat(equations)
fit=eq2fit(equations,data=pmi)
fit=eq2fit(equations,data=estress)
labels=list(X="estress",M="affect",Y="withdraw")
equations=tripleEquation(X="estress",M="affect",Y="withdraw",mode=1)
cat(equations)
fit=eq2fit(equations,data=estress)
modelsSummary(fit,labels=labels)
summary(fit[[2]])
mean(estress$affect)
mean(estress$estress)
coef(fit[[2]])[1]+coef(fit[[2]])[2]*mean(estress$affect)+coef(fit[[2]])[3]*mean(estress$estress)
mean(estress$withdraw)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
equations=tripleEquation(X="cond",M="pmi",Y="reaction",mode=1)
model=tripleEquation(X="cond",M="pmi",Y="reaction")
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
semfit=sem(model,data=pmi,se="boot",bootstrap=10)
parameterEstimates(semfit)
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
boot.ci.type="bca.simple"
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=parameterEstimates(semfit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res
estimatesTable(res)
res=parameterEstimates(semfit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res
semfit=sem(model,data=pmi,se="boot",bootstrap=10)
res=parameterEstimates(semfit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res
estimatesTable(semfit)
estimatesTable(semfit,digits=3)
fit=semfit
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res
str_view(res$label,"direct|total|prop")
str_detect(res$label,"direct|total|prop")
seelct=which(str_detect(res$label,"direct|total|prop"))
select=which(str_detect(res$label,"direct|total|prop"))
res=res[select,]
res
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
x=modmedSummary(semfit,mod="skeptic")
modmedSummaryTable(x)
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res
select=which(str_detect(res$label,"direct|total|prop"))
res=res[select,]
res
res=res[select,c(1,3,5,9,10,8)]
res
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res
select=which(str_detect(res$label,"direct|total|prop"))
res=res[select,c(1,3,5,9,10,8)]
res
names(res)[1:2]
names(res)[1:2]=c("Effect","equation")
attr(res,"boot.ci.type")=boot.ci.type
class(res)=c("medSummary","data.frame")
res
medSummary=function(fit,boot.ci.type="bca.simple"){
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res
select=which(str_detect(res$label,"direct|total|prop"))
res=res[select,c(1,3,5,9,10,8)]
names(res)[1:2]=c("Effect","equation")
attr(res,"boot.ci.type")=boot.ci.type
class(res)=c("medSummary","data.frame")
res
}
type=c("norm","basic","perc","bca.simple")
i=1
res=parameterEstimates(fit,boot.ci.type = type[i],
level = .95, ci = TRUE,
standardized = FALSE)
res
which(res$label %in% c("direct","direct"))
res$label
res$label %in% c("direct","indirect")
res=parameterEstimates(fit,boot.ci.type = type[i],
level = .95, ci = TRUE,
standardized = FALSE)
res$label
res$label %in% c("direct","indirect")
effects=c("direct","indirect")
# effects=c("direct","indirect")
type=c("norm","basic","perc","bca.simple")
i=1
res=parameterEstimates(fit,boot.ci.type = type[i],
level = .95, ci = TRUE,
standardized = FALSE)
res$label
res$label %in% effects
res[res$label %in% effects,]
res[res$label %in% effects,c(1,3,5,9,10,8)]
res=res[res$label %in% effects,c(1,3,5,9,10,8)]
res
res
res$type=type[i]
res
# effects=c("direct","indirect")
type=c("norm","basic","perc","bca.simple")
result=list()
for(i in 1:4){
res=parameterEstimates(fit,boot.ci.type = type[i],
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label %in% effects,c(1,3,5,9,10,8)]
res$type=type[i]
result[[i]]=res
}
str(result)
lapply(result,rbind)
map_df(result,rbind)
purrr::map_df(result,rbind)
df=purrr::map_df(result,rbind)
df
spread(df,type,value=c(est,ci.lower,ci.upper,pvalue))
tydyr::spread(df,type,value=c(est,ci.lower,ci.upper,pvalue))
tidyr::spread(df,type,value=c(est,ci.lower,ci.upper,pvalue))
df
#' @param fit An object of class lavaan
#' @param boot.ci.type Type of bootstrapping interval. Choices are c("norm","basic","perc",bca.simple")
#' @export
#' @return A data.frame and an object of class medSummary
medSummary=function(fit,boot.ci.type="bca.simple",effects=c("direct","indirect")){
if(boot.ci.type!="all"){
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res
select=which(str_detect(res$label,"direct|total|prop"))
res=res[select,c(1,3,5,9,10,8)]
names(res)[1:2]=c("Effect","equation")
attr(res,"boot.ci.type")=boot.ci.type
class(res)=c("medSummary","data.frame")
res
} else{
# effects=c("direct","indirect")
type=c("norm","basic","perc","bca.simple")
result=list()
for(i in 1:4){
res=parameterEstimates(fit,boot.ci.type = type[i],
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label %in% effects,c(1,3,5,9,10,8)]
res$type=type[i]
result[[i]]=res
}
df=purrr::map_df(result,rbind)
df
}
}
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
semfit=sem(model,data=pmi,se="boot",bootstrap=10)
medSummary(semfit)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
semfit=sem(model,data=pmi,se="boot",bootstrap=10)
medSummary(semfit)
x=medSummary(semfit)
x
x=medSummary(semfit,boot.ci.type="all")
x
fit=semfit
# effects=c("direct","indirect")
type=c("norm","basic","perc","bca.simple")
result=list()
df
# effects=c("direct","indirect")
type=c("norm","basic","perc","bca.simple")
result=list()
for(i in 1:4){
res=parameterEstimates(fit,boot.ci.type = type[i],
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label %in% effects,c(1,3,5,9,10,8)]
res$type=type[i]
result[[i]]=res
}
df=purrr::map_df(result,rbind)
df
fit=semfit
# effects=c("direct","indirect")
type=c("norm","basic","perc","bca.simple")
result=list()
for(i in 1:4){
res=parameterEstimates(fit,boot.ci.type = type[i],
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label %in% effects,c(1,3,5,9,10,8)]
res$type=type[i]
result[[i]]=res
}
df=purrr::map_df(result,rbind)
df
df$ci=paste0("(",df$ci.lower," to ",df$ci.upper,")")
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
semfit=sem(model,data=pmi,se="boot",bootstrap=10)
fit=semfit
# effects=c("direct","indirect")
type=c("norm","basic","perc","bca.simple")
result=list()
for(i in 1:4){
res=parameterEstimates(fit,boot.ci.type = type[i],
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label %in% effects,c(1,3,5,9,10,8)]
res$type=type[i]
result[[i]]=res
}
df=purrr::map_df(result,rbind)
df
fit
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
semfit=sem(model,data=pmi,se="boot",bootstrap=10)
summary(semfit)
fit=semfit
fit
# effects=c("direct","indirect")
type=c("norm","basic","perc","bca.simple")
result=list()
for(i in 1:4){
res=parameterEstimates(fit,boot.ci.type = type[i],
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label %in% effects,c(1,3,5,9,10,8)]
res$type=type[i]
result[[i]]=res
}
df=purrr::map_df(result,rbind)
df
effects=c("direct","indirect")
# effects=c("direct","indirect")
type=c("norm","basic","perc","bca.simple")
result=list()
for(i in 1:4){
res=parameterEstimates(fit,boot.ci.type = type[i],
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label %in% effects,c(1,3,5,9,10,8)]
res$type=type[i]
result[[i]]=res
}
df=purrr::map_df(result,rbind)
df
df$ci=paste0("(",df$ci.lower," to ",df$ci.upper,")")
df
df
df=purrr::map_df(result,rbind)
df
