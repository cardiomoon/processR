if(!is.null(digits)){
for(i in c(1,2,3,6)){
df[[i]]=myformat(df[[i]],digits)
}
df[[6]]=pformat(df[[6]])
}
if(!all.interaction){
if(interaction.only) {
select=stringr::str_detect(vars,":")
df=df[select,]
}
}
if(all.interaction){
cat("r2diff=",df$r2diff,", F(",df$df1,",",df$df2,")=",df1$F,",p=",df$p,"\n")
invisible(df)
} else{
df
}
}
fit2=lm(respappr~D1+D2+sexism+D1:sexism+D2:sexism,data=data1)
r2diff(fit2)
#' Calculate difference of R2 and adjusted R2
#' @param fit An object of class lm
#' @param interaction.only Logical
#' @param digits Integer indicating the number of decimal places
#' @importFrom stringr str_detect
#' @importFrom stats anova
#' @export
#' @examples
#' fit=lm(mpg~wt*hp,data=mtcars)
#' r2diff(fit,all.interaction=TRUE)
r2diff=function(fit,interaction.only=FALSE,all.interaction=TRUE,digits=3){
# interaction.only=TRUE; digits=3;all.interaction=TRUE
fit.r2=summary(fit)$r.squared
fit.adj.r2=summary(fit)$adj.r.squared
vars=names(fit$coef)[-1]
df=fit$model
r2=c()
adj.r2=c()
f=c()
df1=c()
df2=c()
p=c()
if(all.interaction){
temp=vars[!str_detect(vars,":")]
eq=paste0(names(df)[1],"~",paste0(temp,collapse="+"))
fit1=lm(as.formula(eq),data=df)
r2=c(r2,summary(fit1)$r.squared)
adj.r2=c(adj.r2,summary(fit1)$adj.r.squared)
result=anova(fit1,fit)
f=c(f,result$F[2])
df1=c(df1,result$Df[2])
df2=c(df2,summary(fit)$df[2])
p=c(p,result$`Pr(>F)`[2])
} else{
for(i in 1:length(vars)){
temp=vars[-i]
eq=paste0(names(df)[1],"~",paste0(temp,collapse="+"))
fit1=lm(as.formula(eq),data=df)
r2=c(r2,summary(fit1)$r.squared)
adj.r2=c(adj.r2,summary(fit1)$adj.r.squared)
result=anova(fit1,fit)
f=c(f,result$F[2])
df1=c(df1,result$Df[2])
df2=c(df2,summary(fit)$df[2])
p=c(p,result$`Pr(>F)`[2])
}
}
r2diff=fit.r2-r2
ar2diff=fit.adj.r2-adj.r2
df=data.frame(r2diff=r2diff,ar2diff=ar2diff,F=f,df1=df1,df2=df2,p=p)
df
if(!all.interaction) rownames(df)=vars
if(!is.null(digits)){
for(i in c(1,2,3,6)){
df[[i]]=myformat(df[[i]],digits)
}
df[[6]]=pformat(df[[6]])
}
if(!all.interaction){
if(interaction.only) {
select=stringr::str_detect(vars,":")
df=df[select,]
}
}
if(all.interaction){
cat("r2diff=",df$r2diff,", F(",df$df1,",",df$df2,")=",df$F,",p=",df$p,"\n")
invisible(df)
} else{
df
}
}
r2diff(fit2)
#' Calculate difference of R2 and adjusted R2
#' @param fit An object of class lm
#' @param interaction.only Logical
#' @param digits Integer indicating the number of decimal places
#' @importFrom stringr str_detect
#' @importFrom stats anova
#' @export
#' @examples
#' fit=lm(mpg~wt*hp,data=mtcars)
#' r2diff(fit,all.interaction=TRUE)
r2diff=function(fit,interaction.only=FALSE,all.interaction=TRUE,digits=3){
# interaction.only=TRUE; digits=3;all.interaction=TRUE
fit.r2=summary(fit)$r.squared
fit.adj.r2=summary(fit)$adj.r.squared
vars=names(fit$coef)[-1]
df=fit$model
r2=c()
adj.r2=c()
f=c()
df1=c()
df2=c()
p=c()
if(all.interaction){
temp=vars[!str_detect(vars,":")]
eq=paste0(names(df)[1],"~",paste0(temp,collapse="+"))
fit1=lm(as.formula(eq),data=df)
r2=c(r2,summary(fit1)$r.squared)
adj.r2=c(adj.r2,summary(fit1)$adj.r.squared)
result=anova(fit1,fit)
f=c(f,result$F[2])
df1=c(df1,result$Df[2])
df2=c(df2,summary(fit)$df[2])
p=c(p,result$`Pr(>F)`[2])
} else{
for(i in 1:length(vars)){
temp=vars[-i]
eq=paste0(names(df)[1],"~",paste0(temp,collapse="+"))
fit1=lm(as.formula(eq),data=df)
r2=c(r2,summary(fit1)$r.squared)
adj.r2=c(adj.r2,summary(fit1)$adj.r.squared)
result=anova(fit1,fit)
f=c(f,result$F[2])
df1=c(df1,result$Df[2])
df2=c(df2,summary(fit)$df[2])
p=c(p,result$`Pr(>F)`[2])
}
}
r2diff=fit.r2-r2
ar2diff=fit.adj.r2-adj.r2
df=data.frame(r2diff=r2diff,ar2diff=ar2diff,F=f,df1=df1,df2=df2,p=p)
df
if(!all.interaction) rownames(df)=vars
if(!is.null(digits)){
for(i in c(1,2,3,6)){
df[[i]]=myformat(df[[i]],digits)
}
df[[6]]=pformat(df[[6]])
}
if(!all.interaction){
if(interaction.only) {
select=stringr::str_detect(vars,":")
df=df[select,]
}
}
if(all.interaction){
temp=paste0("r2diff = ",df$r2diff,", F(",df$df1,",",df$df2,") = ",df$F,",p = ",df$p)
cat(temp,"\n")
invisible(df)
} else{
df
}
}
r2diff(fit2,all.interaction = TRUE,digits=3)
r2diff(fit2)
fit=lm(mpg~wt*hp,data=mtcars)
r2diff(fit)
devtools::document()
devtools::check()
fit=lm(mpg~wt*hp,data=mtcars)
r2diff(fit)
devtools::document()
library(processR)
fit=lm(mpg~wt*hp,data=mtcars)
r2diff(fit)
fit=lm(mpg~wt*hp,data=mtcars)
library(processR)
(fit)
r2diff(fit)
r2diff(fit,mode=2)
res=r2diff(fit)
str(res)
res=r2diff(fit,mode=2)
str(res)
r2diff(fit2)
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
data1=addCatVars(protest,"protest",mode=3)
fit1=lm(respappr~D1+D2+sexism,data=data1)
fit2=lm(respappr~D1+D2+sexism+D1:sexism+D2:sexism,data=data1)
r2diff(fit2)
devtools::check()
fit=lm(mpg~wt*hp,data=mtcars)
r2diff(fit)
r2diff(fit,mode=2)
fit=lm(mpg~wt*hp,data=mtcars)
r2diff(fit)
library(processR)
fit=lm(mpg~wt*hp,data=mtcars)
r2diff(fit)
tempvars=vars[str_detect(vars,":")]
library(processR)
fit=lm(mpg~wt*hp,data=mtcars)
r2diff(fit)
library(processR)
library(processR)
fit=lm(mpg~wt+hp,data=mtcars)
r2diff(fit)
res=r2diff(fit)
res=r2diff(fit)
res
fit=lm(mpg~wt*hp,data=mtcars)
r2diff(fit)
library(processR)
fit=lm(mpg~wt+hp,data=mtcars)
r2diff(fit)
library(processR)
library(processR)
devtools::document()
devtools::check()
result[1]=str_replace(result1,"^\\(","")
#'divide equation
#'@param equation a string
#'@export
#'@examples
#'equation=(a1+a3*W)*(b)
divideEquation=function(equation){
equation=(a1+a3*W)*(b)
divideEquation(equation)
#'divide equation
#'@param equation a string
#'@export
#'@examples
#'equation=(a1+a3*W)*(b)
#'divideEquation(equation)
divideEquation=function(equation){
result[1]=str_replace(result1,"^\\(","")
result[2]=str_replace(result1,"\\)$","")
result
}
equation=(a1+a3*W)*(b)
equation="(a1+a3*W)*(b)"
divideEquation(equation)
require(stringr)
equation="(a1+a3*W)*(b)"
divideEquation(equation)
equation="(a1+a3*W)*(b)"
result=unlist(strsplit(equation,"\\)\\*\\("))
#'divide equation
#'@param equation a string
#'@export
#'@examples
#'equation="(a1+a3*W)*(b)"
#'divideEquation(equation)
divideEquation=function(equation){
equation="(a1+a3*W)*(b)"
divideEquation(equation)
#'divide equation
#'@param equation a string
#'@export
#'@examples
#'equation="(a1+a3*W)*(b)"
#'divideEquation(equation)
divideEquation=function(equation){
result[1]=str_replace(result[1],"^\\(","")
result[2]=str_replace(result[2],"\\)$","")
result
}
equation="(a1+a3*W)*(b)"
divideEquation(equation)
library(processR)
devtools::document()
devtools::check()
require(processR)
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
moderator=list(name="sexism",site=list(c("a","c")))
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
moderator=list(name="sexism",site=list(c("a","c")))
data1=addCatVars(protest,"protest",mode=3)
model=makeCatEquation(labels=labels,moderator=moderator,data=data1,rangemode=2)
model=catMediation(labels=labels,moderator=moderator,data=data1,rangemode=2)
cat(models)
cat(model)
cat(catMediation(X="hp",M="am",Y="mpg",data=mtcars,maxylev=6))
cat(catMediation(X="cyl",M="am",Y="mpg",data=mtcars))
cat(catMediation(X="cyl",M="am",Y="mpg",data=mtcars,moderator=moderator))
labels=list(X="cyl",M="am",Y="mpg")
moderator=list(name=c("cyl","wt"),site=list(c("a","c"),c("c")))
cat(catMediation(labels=labels,data=mtcars))
cat(catMediation(X="am",Y="mpg",data=mtcars,moderator=moderator,covar=covar,maxylev=6))
covar=list(name=c("carb","disp"),label=c("carb","disp"),site=list(c("M","Y"),"Y","Y"))
cat(catMediation(labels=labels,data=mtcars))
cat(catMediation(X="am",Y="mpg",data=mtcars,moderator=moderator,covar=covar,maxylev=6))
cat(catMediation(X="am",Y="mpg",data=mtcars,moderator=moderator,covar=covar))
library(processR)
require(processR)
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
moderator=list(name="sexism",site=list(c("a","c")))
data1=addCatVars(protest,"protest",mode=3)
model=catMediation(labels=labels,moderator=moderator,data=data1,rangemode=2)
cat(model)
library(processR)
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
moderator=list(name="sexism",site=list(c("a","c")))
data1=addCatVars(protest,"protest",mode=3)
model=catMediation(labels=labels,moderator=moderator,data=data1,rangemode=2)
cat(model)
library(processR)
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
moderator=list(name="sexism",site=list(c("a","c")))
data1=addCatVars(protest,"protest",mode=3)
model=catMediation(labels=labels,moderator=moderator,data=data1,rangemode=2)
cat(model)
require(lavaan)
semfit=sem(model=model,data=data1)
mdeSummary(semfit)
medSummary(semfit)
modSUmmary(semfit)
modSummary(semfit)
library(processR)
require(processR)
require(lavaan)
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
moderator=list(name="sexism",site=list(c("a","c")))
data1=addCatVars(protest,"protest",mode=3)
model=catMediation(labels=labels,moderator=moderator,data=data1,rangemode=2)
cat(model)
semfit=sem(model=model,data=data1)
medSummary(semfit)
modSummary(semfit)
devtools::document()
devtools::check()
devools::document()
devtools::document()
devtools::check()
library(processR)
system("grep -r 'ind.mod' *")
system("grep -r 'multipleMediation' *")
library(processR)
system("grep -r 'ind.mod' *")
system("grep -r 'ind\\.mod' *")
devtools::document()
devtools::check()
library(processR)
library(processR)
library(processR)
drawCatModel(xcount=4)
require(processR)
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(xcount=4,M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
xcount=3;M=NULL;W="W";whatLabel="name";addDots=TRUE
xmargin=0.01;radx=0.12
ymargin=0.02;xlim=c(-0.2,1.2);ylim=xlim
rady=0.04;maxypos=0.6;minypos=0.2;ypos=c(1,0.5);mpos=c(0.5,0.9)
xinterval=NULL;yinterval=NULL;box.col="white";xspace=NULL;label.pos=list()
X=paste0("D",1:(xcount-1))
if(is.null(W)) X=c(X,"Dg-1")
Y="Y"
xcount=3;M=NULL;W="W";whatLabel="name";addDots=FALSE
xmargin=0.01;radx=0.12
ymargin=0.02;xlim=c(-0.2,1.2);ylim=xlim
rady=0.04;maxypos=0.6;minypos=0.2;ypos=c(1,0.5);mpos=c(0.5,0.9)
xinterval=NULL;yinterval=NULL;box.col="white";xspace=NULL;label.pos=list()
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55),addDots=TRUE)
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55),addDots=TRUE)
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(xcount=4,M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
xcount=3;M=NULL;W="W";whatLabel="name";addDots=TRUE
xmargin=0.01;radx=0.12
ymargin=0.02;xlim=c(-0.2,1.2);ylim=xlim
rady=0.04;maxypos=0.6;minypos=0.2;ypos=c(1,0.5);mpos=c(0.5,0.9)
xinterval=NULL;yinterval=NULL;box.col="white";xspace=NULL;label.pos=list()
X=paste0("D",1:(xcount-1))
if(is.null(W)) X=c(X,"Dg-1")
Y="Y"
XW=NULL
if(!is.null(W)) {
XW=paste0("D",1:(xcount-1),W)
XW=c(W,XW)
} else{
if(addDots) {
count=length(X)
X= c(X,X[count])
X[count]="dot"
count=length(X)
}
}
X
XW
df1=data.frame(label=c(X,XW),stringsAsFactors = FALSE)
df1
df1$lty=1
df1$name=paste0("c",1:nrow(df1))
if(is.null(W)) df1$name[count]=("cg-1")
df1$start=df1$label
df1$end="Y"
count=length(df1$label)
df1
if(is.null(M)) df1$name=paste0("b",1:nrow(df1))
if(is.null(W)) df1$name[count]=("cg-1")
df1$start=df1$label
df1$end="Y"
count=length(df1$label)
df1
library(processR)
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(xcount=4,M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
library(processR)
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(xcount=4,M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(xcount=4)
library(processR)
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(xcount=4)
drawCatModel(M="M",box.col="yellow")
drawCatModel(W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
drawCatModel(xcount=4,M="M",W="W",xlim=c(-0.08,1),ylim=c(0.13,0.95),ypos=c(1,0.55))
require(processR)
require(lavaan)
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
model=multipleMediation(labels=labels,data=pmi)
cat(model)
model1=makeEquation(X="cond",M=c("import","pmi"),Y="reaction")
cat(model1)
model=multipleMediation(labels=labels,data=pmi)
cat(model)
model1=makeEquation(X="cond",M=c("import","pmi"),Y="reaction")
cat(model1)
labels=list(M="cond",X=c("import","pmi"),Y="reaction")
model=multipleMediation(labels=labels,data=pmi)
cat(model)
model1=makeEquation(M="cond",X=c("import","pmi"),Y="reaction")
cat(model1)
model2=makeEquation(X="cond",M=c("import","pmi"),Y="reaction")
cat(model1)
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
model=multipleMediation(labels=labels,data=pmi)
cat(model)
model1=makeEquation(M="cond",X=c("import","pmi"),Y="reaction")
model2=makeEquation(X="cond",M=c("import","pmi"),Y="reaction")
cat(model1)
labels=list(M="cond",X=c("import","pmi"),Y="reaction")
model=multipleMediation(labels=labels,data=pmi)
cat(model)
model1=makeEquation(M="cond",X=c("import","pmi"),Y="reaction")
cat(model1)
directT=unique(directT)
equation=paste0(equation,"direct :=",paste0(directT,collapse=""))
library(processR)
library(processR)
labels=list(M="cond",X=c("import","pmi"),Y="reaction")
labels=list(X="cond",M=c("import","pmi"),Y="reaction")
model=multipleMediation(labels=labels,data=pmi)
cat(model)
model2=makeEquation(X="cond",M=c("import","pmi"),Y="reaction")
cat(model1)
model1=makeEquation(M="cond",X=c("import","pmi"),Y="reaction")
cat(model1)
model2=makeEquation(X="cond",M=c("import","pmi"),Y="reaction")
cat(model1)
model2=makeEquation(X="cond",M=c("import","pmi"),Y="reaction")
cat(model1)
model1=makeEquation(X="cond",M=c("import","pmi"),Y="reaction")
cat(model1)
model1=makeEquation(X="cond",M=c("import","pmi"),Y="reaction")
cat(model1)
labels=list(X="X",M=c("M1","M2","M3"),Y="Y")
model=multipleMediation(labels=labels,data=pmi)
cat(model)
model1=makeEquation(X="X",M=c("M1","M2","M3"),Y="Y")
cat(model1)
library(processR)
library(processR)
