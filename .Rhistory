semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
x=medSummary(semfit)
x
medSummaryTable(x)
x
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
library(processR)
x=medSummary(semfit)
x
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
x=medSummary(semfit)
x
semfit=sem(model=model,data=disaster)
summary(semfit)
semfit=sem(model=model,data=disaster)
summary(semfit)
x=medSummary(semfit)
x
semfit=sem(model=model,data=disaster)
summary(semfit)
x=medSummary(semfit)
x
str(x)
x=medSummary(semfit)
x
str(x)
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
x=medSummary(semfit)
x
library(processR)
x=medSummary(semfit)
x
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
x=medSummary(semfit,boot.ci.type = "all")
x
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
library(processR)
x=medSummary(semfit)
x
medSummaryTable(x)
x
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
x=medSummary(semfit,boot.ci.type = "all")
x
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
x=medSummary(semfit)
x
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
x=medSummary(semfit,boot.ci.type = "all")
x
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
labels=list(X="negemot",M="ideology",Y="govact")
str(labels)
labels$X
devtools::document()
devtools::check()
devtools::document()
devtools::check()
labels=linst(X="negemot",M="ideology",Y="govact")
labels=list(X="negemot",M="ideology",Y="govact")
cat(tripleEquation(labels=labels,moderator=moderator,covar=covar))
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
moderator=list(name=c("W"),site=list(c("c")))
cat(tripleEquation(X=X,Y=Y,moderator=moderator))
X="negemot";Y="govact";suffix=0
moderator=list(name=c("W"),site=list(c("c")))
cat(tripleEquation(X=X,Y=Y,moderator=moderator))
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
labels=list(X="negemot",M="ideology",Y="govact")
cat(tripleEquation(labels=labels,moderator=moderator,covar=covar))
devtools::document()
devtools::document()
devtools::check()
library(processR)
moderator=list(name=c("W"),site=list(c("c")))
covar=list(name=c("C1","C2","C3"),label=c("ese","sex","tenure"),site=list(c("M","Y"),"Y","Y"))
labels=list(X="negemot",M="ideology",Y="govact")
cat(tripleEquation(labels=labels,moderator=moderator,covar=covar))
devtools::document()
library(processR)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
medSummary(semfit)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
require(processR)
require(lavaan)
require(ztable)
require(ggplot2)
require(moonBook)
labels=list(X="frame",M="justify",Y="donate")
labels=list(X="frame",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
medSummary(semfit)
x
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
medSummary(semfit)
x
x=medSummary(semfit)
x
x
medSummaryTable(x)
medSummaryTable(semfit)
medSummaryTable(semfit,boot.ci.type = "all")
x
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
library(processR)
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,rangemode=2,data=disaster)
labels=list(X="frame",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
x
modmedSummary(semfit,mod="skeptic")
modmedSummaryTable(semfit,mod="skeptic")
x=modmedSummary(semfit,mod="skeptic")
modmedSummaryTable(x,vanilla=FALSE)
devtools::document()
library(processR)
devtools::check()
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,rangemode=2,data=disaster)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
modmedSummaryTable(semfit,mod="skeptic")
medSummaryTable(x)
medSummaryTable(semfit)
x=medSummary(semfit)
x
medSummaryTable(x)
medSummaryTable(semfit)
medSummaryTable(x)
medSummaryTable(semfit,boot.ci.type = "all")
x
medSummaryTable(x)
medSummaryTable(x,vanilla=FALSE)
devtools::document()
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
modelsSummary(list(fit1,fit2))
modelsSummaryTable(list(fit1,fit2),vanilla=FALSE)
x=modelsSummary(list(fit1,fit2,fit3))
modelsSummaryTable(x)
modelsSummary(list(fit1,fit2))
modelsSummaryTable(list(fit1,fit2),vanilla=FALSE)
library(processR)
devtools::check()
system("grep -r 'meanCentering' *")
library(processR)
newData=meanCentering(education,colnames(education)[1:3])
str(newData)
scale(education[["age"]]],center=TRUE,scale=FALSE)
res=scale(education[["age"]],center=TRUE,scale=FALSE)
str(res)
as.vector(res)
str(as.vector(res))
str(res)
res[[1]]
res[1]
res
res[,1]
str(res[,1])
#' Perform mean centering
#' @param data A data.frame
#' @param names column names to mean centering
#' @examples
#' library(processR)
#' newData=meanCentering(education,colnames(education)[1:3])
#' @export
meanCentering=function(data,names){
for(i in seq_along(names)){
data[[paste0(names[i],".c")]]=scale(data[[names[i]]],center=TRUE,scale=FALSE)[,1]
}
data
}
newData=meanCentering(education,colnames(education)[1:3])
str(newData)
library(processR)
devtools::document()
devtools::check()
library(processR)
library(processR)
devtools::document()
devtools::check()
library(processR)
labels=list(X="frame",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
require(processR)
require(lavaan)
require(ztable)
require(ggplot2)
require(moonBook)
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator,rangemode=2,data=disaster)
labels=list(X="frame",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=10)
summary(semfit)
modmedSummary(semfit,mod="skeptic")
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
library(processR)
library(processR)
labels=list(X="wt",M="hp",Y="mpg")
mediationBK(labels=labels,data=mtcars)
mediationBK(labels=labels,data=mtcars,silent=FALSE)
library(processR)
library(processR)
result=mediationBK(labels=labels,data=mtcars,silent=FALSE)
result=mediationBK(labels=labels,data=mtcars)
require(MPsychoR)
data(Paskvan)
labels=list(X="wintense",M="cogapp",Y="emotion")
mediationBK(labels=labels,data=Paskvan)
mediationBK(labels=labels,data=Paskvan,silent=FALSE)
library(processR)
require(MPsychoR)
data(Paskvan)
labels=list(X="wintense",M="cogapp",Y="emotion")
mediationBK(labels=labels,data=Paskvan,silent=FALSE)
labels=list(X="wt",M="hp",Y="mpg")
mediationBK(labels=labels,data=mtcars)
coef=list()
pvalue=list()
coef[[i]]=summary(fit[[i]])$coef[2,1]
#' @param Y name of dependent variable
#' @param labels An optional list of variable names
#' @param data A data.frame
#' @param silent Logical. Whether or not show summary of regression tests
#' @param indirect.test Logical. Whether or not show results of bda::mediation.test
#' @importFrom bda mediation.test
#' @export
#' @examples
#' labels=list(X="wt",M="hp",Y="mpg")
#' mediationBK(labels=labels,data=mtcars)
mediationBK=function(X=NULL,M=NULL,Y=NULL,labels=list(),data,silent=TRUE,indirect.test=TRUE){
if(is.null(X)) X=labels$X
if(is.null(M)) M=labels$M
if(is.null(Y)) Y=labels$Y
dataname=substitute(data)
Paths=c("Path C (Total Effect)","Path A (X on M)","Path B (M on Y, controlling for X)","Path C' (Direct Effect, X on Y, controlling for M)")
if(!silent) cat("Step 1: ",Paths[1],"\n-Estimate the relationship between X on Y\n")
temp1=paste0("lm(",Y,"~",X,",data=",dataname,")")
fit1=eval(parse(text=temp1))
if(!silent) print(summary(fit1))
if(!silent) cat("\nStep 2:",Paths[2],"\n-Estimate the relationship between X on M\n")
temp2=paste0("lm(",M,"~",X,",data=",dataname,")")
fit2=eval(parse(text=temp2))
if(!silent) print(summary(fit2))
if(!silent) cat("\nStep 3:",Paths[3],"\n-Estimate the relationship between M on Y, controlling for X\n")
temp3=paste0("lm(",Y,"~",M,"+", X,",data=",dataname,")")
fit3=eval(parse(text=temp3))
if(!silent) print(summary(fit3))
if(!silent) cat("\nStep 4:",Paths[4],"\n-Estimate the relationship between Y on X, controlling for M\n")
temp4=paste0("lm(",Y,"~",X ,"+", M,",data=",dataname,")")
fit4=eval(parse(text=temp4))
if(!silent) print(summary(fit4))
fit=list(fit1,fit2,fit3,fit4)
equations=list(temp1,temp2,temp3,temp4)
results=list()
coef=c()
pvalue=c()
for(i in 1:4){
coef=c(coef,summary(fit[[i]])$coef[2,1])
pvalue=c(pvalue,summary(fit[[i]])$coef[2,4])
}
results[[1]]=ifelse(pvalue[1]<0.05,"Acceptable","Not satisfied")
results[[2]]=ifelse(pvalue[2]<0.05,"Acceptable","Not satisfied")
results[[3]]=ifelse(pvalue[3]<0.05,"Acceptable","Not satisfied")
if(pvalue[4]>0.05) {
results[[4]]="Comlpete mediation"
} else if(coef[4]<coef[1]) {
results[[4]]="Partial mediation"
} else results[[4]]="Not satisfied"
cat("\nResults of Baron and Kenny Method\n")
for(i in 1:4){
cat("Step",i,":", Paths[i],"-", results[[i]],"\n")
}
indirect=bda::mediation.test(data[[M]],data[[X]],data[[Y]])
if(indirect.test){
cat("\nResults of bda::mediation.test\n")
print(indirect)
}
invisible(list(fit=fit,equations=equations,coef=coef,pvalue=pvalue,results=results,indirect=indirect))
}
labels=list(X="wt",M="hp",Y="mpg")
mediationBK(labels=labels,data=mtcars)
labels=list(X="cond",M="pmi",Y="reaction")
mediationBK(labels=labels,data=pmi)
mediationBK(labels=labels,data=pmi,silent=FALSE)
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
mediationBK(labels=labels,data=pmi,silent=FALSE)
labels=list(X="cond",M="pmi",Y="reaction")
mediationBK(labels=labels,data=pmi,silent=FALSE)
library(processR)
mediationBK(labels=labels,data=pmi)
library(processR)
mediationBK(labels=labels,data=pmi)
mediationBK(labels=labels,data=pmi)
labels=list(X="cond",M="pmi",Y="reaction")
mediationBK(labels=labels,data=pmi,silent=FALSE)
library(processR)
mediationBK(labels=labels,data=pmi,silent=FALSE)
mediationBK(labels=labels,data=pmi)
library(processR)
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
mediationBK(labels=labels,data=pmi,silent=FALSE)
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
mediationBK(labels=labels,data=pmi,silent=FALSE)
labels=list(X="wintense",M="cogapp",Y="emotion")
mediationBK(labels=labels,data=Paskvan,silent=FALSE)
require(MPsychoR)
data(Paskvan)
labels=list(X="wintense",M="cogapp",Y="emotion")
mediationBK(labels=labels,data=Paskvan)
statisticalDiagram(0,arrowlabels="0.583")
statisticalDiagram(0,arrowslabels="0.583")
statisticalDiagram(0,arrowslabels=c("","0.583",""))
statisticalDiagram(0,arrowslabels="0.583",whatLabel = "label"))
statisticalDiagram(0,arrowslabels="0.583",whatLabel = "label")
statisticalDiagram(0,arrowslabels=0.583)
statisticalDiagram(0,arrowslabels=0.583,whatLabel = "label")
result=mediationBK(labels=labels,data=Paskvan)
statisticalDiagram(0,arrowslabels=result$coef[1],whatLabel = "label")
statisticalDiagram(0,arrowslabels=round(result$coef[1],3),whatLabel = "label")
statisticalDiagram(4,arrowslabels=round(result$coef[2:4],3),whatLabel = "label")
labels=list(X="cond",M="pmi",Y="reaction")
result=mediationBK(labels=labels,data=pmi)
statisticalDiagram(0,arrowslabels=round(result$coef[1],3),whatLabel = "label")
statisticalDiagram(4,arrowslabels=round(result$coef[2:4],3),whatLabel = "label")
arrowslabels=paste("c =",round(result$coef[1],3))
statisticalDiagram(0,arrowslabels=arrowslabels,whatLabel = "label")
statisticalDiagram(0,arrowslabels=round(result$coef[1],3),whatLabel = "label")
statisticalDiagram(4,arrowslabels=round(result$coef[2:4],3),whatLabel = "label")
statisticalDiagram(0,labels=labels,arrowslabels=round(result$coef[1],3),whatLabel = "label")
statisticalDiagram(4,labels=labels,arrowslabels=round(result$coef[2:4],3),whatLabel = "label")
model=tripleEquation(labels=labels)
model
library(lavaan)
semfit=sem(model=model,data=pmi)
summary(semfit)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
statisticalDiagram(4,labels=labels,arrowslabels=round(result$coef[2:4],3),whatLabel = "label")
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
medSummary(semfit)
library(processR)
devtools::document()
statisticalDiagram(4,labels=labels,arrowslabels=round(result$coef[2:4],3),whatLabel = "label")
statisticalDiagram(4,labels=labels,arrowslabels=round(result$coef[2:4],3),arrowslty=c(1,1,2),whatLabel = "label")
data(Paskvan)
labels=list(X="cond",M="pmi",Y="reaction")
result=mediationBK(labels=labels,data=pmi)
statisticalDiagram(0,labels=labels,arrowslabels=round(result$coef[1],3),whatLabel = "label")
statisticalDiagram(4,labels=labels,arrowslabels=round(result$coef[2:4],3),whatLabel = "label")
result
result
result=mediationBK(labels=labels,data=pmi)
medSummary(semfit)
library(processR)
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
result=mediationBK(labels=labels,data=pmi)
result
str(result)
devtools::document()
library(processR)
require(MPsychoR)
data(Paskvan)
labels=list(X="cond",M="pmi",Y="reaction")
result=mediationBK(labels=labels,data=pmi)
str(result)
result
devtools::document()
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
result=mediationBK(labels=labels,data=pmi)
result
plot(result)
library(ggiraphExtra)
ggCor(mtcars,mode=2)
ggCor(mtcars,mode=2,label=2)
ggCor(mtcars,mode=2)
ggCor(mtcars,mode=2)
ggsave("ggCor.png",device="png",width=5,height=5)
ggplot2::ggsave("ggCor.png",device="png",width=5,height=5)
library(processR)
data(Paskvan)
labels=list(X="cond",M="pmi",Y="reaction")
result=mediationBK(labels=labels,data=pmi)
result
plot(result)
library(processR)
plot(result)
library(processR)
result
labels=list(X="cond",M="pmi",Y="reaction")
result=mediationBK(labels=labels,data=pmi)
result
plot(result)
plot(result,type=1)
plot(result,type=1,color="whote")
library(processR)
result
plot(result)
plot(result,type=1)
plot(result)
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
result=mediationBK(labels=labels,data=pmi)
result
plot(result)
plot(result,type=1)
plot(result)
plot(result,type=1)
plot(result)
result=mediationBK(labels=labels,data=pmi)
result
plot(result)
plot(result,type=1)
str(result)
plot(result)
plot(result,type=1)
result
modelsSummary(result)
modelsSummary(result$fit)
modelsSummaryTable(result$fit)
modelsSummaryTable(labels=labels,result$fit)
result
plot(result)
plot(result,type=1)
result
modelsSummaryTable(labels=labels,result$fit)
devtools::document()
devtools::check()
model=tripleEquation(labels=labels)
model
semfit=sem(model=model,data=pmi)
library(lavaan)
semfit=sem(model=model,data=pmi)
summary(semfit)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
medSummary(semfit)
result
labels=list(X="wintense",M="cogapp",Y="emotion")
result=mediationBK(labels=labels,data=Paskvan)
require(MPsychoR)
data(Paskvan)
result=mediationBK(labels=labels,data=Paskvan)
result
modelsSummaryTable(labels=labels,result$fit)
plot(result)
plot(result,type=1)
model=tripleEquation(labels=labels)
model
semfit=sem(model=model,data=Paskvan)
summary(semfit)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
medSummary(semfit)
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
result=mediationBK(labels=labels,data=pmi)
result
summary(result)
result
summary(result)
plot(result)
devtools::document()
library(processR)
result
summary(result)
library(processR)
summary(result)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
