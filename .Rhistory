#' labels=list(X="baby",M="wine",Y="tile")
#' moderator=list(name=c("milk"),site=list("a"))
#' covar=list(name=c("milk","tent","sand"),site=list(c("Y"),c("M","Y"),c("M","Y")))
#' labels2table(labels,moderator=moderator,covar=covar,serial=FALSE)
labels2table=function(labels=labels,vars=list(),moderator=list(),covar=NULL,serial=TRUE,
bmatrix=NULL,
eq=NULL){
# vars=list();eq=NULL;covar=NULL;serial=TRUE;bmatrix=NULL
# labels=list(X="X",M="M",Y="Y")
# moderator=list(name="X",site=list(c("b")))
# labels=list(X="baby",M=c("wine","tent","sand"),Y="tile")
# bmatrix=c(1,1,0,1,0,0,1,1,1,1)
# moderator=list(name=c("milk","hair"),labels=c("W","Z"),
#                matrix=list(c(1,0,0,0,0,0,0,0,0,0),c(0,0,0,0,0,0,0,1,0,0)))
# labels=list(X="baby",M="wine",Y="tile")
# vars=list()
# moderator=list(name=c("milk"),site=list("a"))
# covar=list(name=c("milk","tent","sand"),site=list(c("Y"),c("M","Y"),c("M","Y")))
# serial=FALSE
# bmatrix=NULL
# eq=NULL
if(is.null(eq)) {
eq=multipleMediation(labels=labels,vars=vars,moderator=moderator,covar=covar,mode=1,
serial=serial,bmatrix=bmatrix)
}
eq
eq=checkEquationVars(eq)
labels = appendLabels(labels,vars,moderator,covar)
eq
labels
df=equations2var(eq,labels=labels)
df
}
labels=appendLabels(labels,vars,moderator,covar)
# nodelabels=NULL;whatLabel="name";semfit=NULL;parallel=TRUE;covar=NULL;data=NULL
# equation=NULL
# labels=list(X="cond",M=c("import","pmi","age","M4"),Y="reaction")
# xmargin=0.01;radx=NULL;mode=2;nodemode=1
# ymargin=0.02;xlim=NULL;ylim=NULL
# rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
# xinterval=NULL;yinterval=NULL;xspace=NULL;arrow.pos=list()
# digits=3;serial=FALSE
labels=list(X="X",M=c("M1","M2"),Y="Y");parallel=TRUE;serial=TRUE;vars=list();moderator=list();covar=NULL
labels=appendLabels(labels,vars,moderator,covar)
labels
df1=labels2table(labels=labels,vars=vars,moderator=moderator,
covar=covar,serial=serial,bmatrix=bmatrix,
eq=equation)
# nodelabels=NULL;whatLabel="name";semfit=NULL;parallel=TRUE;covar=NULL;data=NULL
# equation=NULL
# labels=list(X="cond",M=c("import","pmi","age","M4"),Y="reaction")
# xmargin=0.01;radx=NULL;mode=2;nodemode=1
# ymargin=0.02;xlim=NULL;ylim=NULL
# rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
# xinterval=NULL;yinterval=NULL;xspace=NULL;arrow.pos=list()
# digits=3;serial=FALSE
# labels=list(X="X",M=c("M1","M2"),Y="Y");parallel=TRUE;serial=TRUE;
vars=list();moderator=list();covar=NULL;bmatrix=NULL
df1=labels2table(labels=labels,vars=vars,moderator=moderator,
covar=covar,serial=serial,bmatrix=bmatrix,
eq=equation)
df1$end=df1$Variables
df1$start=df1$Predictors
print(df1)
labels=list(X="X",M=c("M1","M2"),Y="Y")
moderator=list();serial=FALSE;eq=NULL
labels2table(labels)
eq=multipleMediation(labels=labels,vars=vars,moderator=moderator,covar=covar,mode=1,
serial=serial,bmatrix=bmatrix)
eq
eq=checkEquationVars(eq)
eq
labels = appendLabels(labels,vars,moderator,covar)
eq
labels
df=equations2var(eq,labels=labels)
df
eq=multipleMediation(labels=labels,vars=vars,moderator=moderator,covar=covar,mode=1,
serial=serial,bmatrix=bmatrix)
eq
eq=checkEquationVars(eq)
labels = appendLabels(labels,vars,moderator,covar)
eq
labels
df=equations2var(eq,labels=labels)
df
serial=TRUE
eq=multipleMediation(labels=labels,vars=vars,moderator=moderator,covar=covar,mode=1,
serial=serial,bmatrix=bmatrix)
eq
eq=checkEquationVars(eq)
labels = appendLabels(labels,vars,moderator,covar)
eq
labels
df=equations2var(eq,labels=labels)
df
eq
labels
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk")
eq="wine~baby+milk+baby:milk"
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk")
eq2var(eq,labels=labels)
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq="Y~M1+M2+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="Y~M1+M2+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M2~M1+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M2~X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M2~M1+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M2~M1+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq=str_replace_all(eq," ","")
temp=unlist(strsplit(eq,"~"))
y=temp[1]
require(strinfr)
require(stringr)
eq=str_replace_all(eq," ","")
temp=unlist(strsplit(eq,"~"))
y=temp[1]
x=unique(unlist(strsplit(temp[2],"\\+")))
y=rep(y,length(x))
df=data.frame(y=y,x=x,stringsAsFactors = FALSE)
df
df$Variables=changeLabelName(df$y,labels=labels)
df$Predictors=changeLabelName(df$x,labels=labels)
df
prefix=ifelse(df$Variables[1]=="Y","b","a")
y[1]
prefix
df$x
df
df$name=makeCoefLabel(name=df$x,dep=y[1],labels=labels,constant = "iy",prefix=prefix)
df$name=str_replace(df$name,"'","")
df
eq="Y~M1+M2+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M2~M1+X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
eq="M3~X"
labels=list(X="X",M=c("M1","M2"),Y="Y")
eq2var(eq,labels=labels)
library(processR)
labels=list(X="X",M=c("M1","M2"),Y="Y")
drawModel(labels=labels,serial=TRUE,nodemode=4)
labels=list(X="X",M=c("M1","M2","M3"),Y="Y")
drawModel(labels=labels,serial=TRUE)
equation='M1~X
M2~X+M1
M3~X+M1
Y~X+M1+M2+M3'
node.pos=list(X=c(0,0.5),M1=c(0.5,0.5),M2=c(0.75,0.9),M3=c(0.75,0.1),Y=c(1,0.5))
curved.arrow=list(a2=-0.1,a3=0.1,c=-0.15)
drawModel(equation=equation,nodemode=2,node.pos=node.pos,curved.arrow=curved.arrow)
equation='M1~X
M2~X
M3~X
M4~X+M1+M2+M3
Y~X+M1+M2+M3+M4'
node.pos=list(X=c(0,0.5),M1=c(0.35,0.9),M2=c(0.35,0.5),M3=c(0.35,0.1),M4=c(0.7,0.5),Y=c(1,0.5))
curved.arrow=list(a4=0.15,b2=0.15)
segment.arrow=list(c=0.5)
drawModel(equation=equation,nodemode=2,node.pos=node.pos,radx=0.08,curved.arrow=curved.arrow,
segment.arrow=segment.arrow)
library(processR)
library(processR)
fit=lm(govact~negemot*age,data=glbwarm)
compareMC(fit)
compareMC(fit,mode=2)
fit=lm(govact~negemot*age,data=glbwarm)
compareMCTable(fit)
library(processR)
devtools::document()
devtools::document()
devtools::check()
library(processR)
fit=lm(govact~negemot*age,data=glbwarm)
compareMCTable(fit)
fit=lm(govact~negemot*age,data=glbwarm)
res=compareMC(fit)
ft<-modelsSummary2Table(res,vanilla=vanilla)
fit=lm(govact~negemot*age,data=glbwarm)
compareMCTable(fit)
fit=lm(govact~negemot*age,data=glbwarm)
compareMC(fit)
compareMC(fit,mode=2)
fit=lm(govact~negemot*age,data=glbwarm)
compareMC(fit)
fit=lm(govact~negemot*age,data=glbwarm)
compareMCTable(fit)
devtools::document()
devtools::check()
citation("processR")
library(processR)
library(processR)
library(processR)
labels=list(X="estress",M="affect",Y="withdraw")
vars=list(name=list(c("tenure","age")),site=list(c("a","b")))
moderator=list(name=c("age","sex"),site=list(c("c"),c("b","c")),pos=c(1,2),
arr.pos=list(c(0.3),c(0.3,0.7)))
drawConcept(labels=labels,drawbox=TRUE)
drawConcept(labels=labels,drawbox=TRUE,box.col="yellow")
drawConcept(labels=labels,drawbox=TRUE,box.col=c("yellow","green","blue"))
drawConcept(labels=labels,drawbox=TRUE)
ztable::palette2colors
devtools::document()
library(processR)
labels=list(X="estress",M="affect",Y="withdraw")
vars=list(name=list(c("tenure","age")),site=list(c("a","b")))
moderator=list(name=c("age","sex"),site=list(c("c"),c("b","c")),pos=c(1,2),
arr.pos=list(c(0.3),c(0.3,0.7)))
drawConcept(labels=labels,drawbox=TRUE)
drawConcept(labels=labels,pallete="Reds")
drawConcept(labels=labels,palette="Reds")
drawConcept(labels=labels,palette="Blues")
display.brewer.all()
RColorBrewer::display.brewer.all()
drawConcept(labels=labels,palette="set3")
drawConcept(labels=labels,palette="Set3")
drawConcept(labels=labels)
labels=list(X="X",M=c("M1","M2"),Y="Y")
vars=list(name=list(c("W","Z")),matrix=list(c(0,0,1,0,0,0)),pos=6)
bmatrix=c(1,1,1,1,1,1)
drawConcept(labels=labels,bmatrix=bmatrix,vars=vars)
drawConcept(labels=labels,bmatrix=bmatrix,vars=vars,palette="Set3")
devtools::document()
equation='M1~X
M2~X
M3~X
M4~X+M1+M2+M3
Y~X+M1+M2+M3+M4'
node.pos=list(X=c(0,0.5),M1=c(0.35,0.9),M2=c(0.35,0.5),M3=c(0.35,0.1),M4=c(0.7,0.5),Y=c(1,0.5))
curved.arrow=list(a4=0.15,b2=0.15)
segment.arrow=list(c=0.5)
drawModel(equation=equation,nodemode=2,node.pos=node.pos,radx=0.08,curved.arrow=curved.arrow,
segment.arrow=segment.arrow)
library(processR)
labels=list(X="baby",M="wine",Y="tile")
moderator=list(name=c("milk"),site=list("a"))
covar=list(name=c("milk","tent","sand"),site=list(c("Y"),c("M","Y"),c("M","Y")))
drawModel(labels=labels,moderator=moderator,covar=covar)
drawModel(labels=labels,moderator=moderator,covar=covar,box.col="green")
drawModel(labels=labels,moderator=moderator,covar=covar,palette="Set3")
drawModel(labels=labels,moderator=moderator,covar=covar,palette="Reds")
library(processR)
drawModel(labels=labels,moderator=moderator,covar=covar,palette="Reds")
drawModel(labels=labels,moderator=moderator,covar=covar,palette="Set3")
devtools::document()
devtools::check()
devtools::check_win-develp()
devtools::check_win_develp()
devtools::check_win_devel()
devtools::check_rhub()
library(processR)
system("grep -r crossing *")
library(processR)
system("grep -r 'jtools' *")
system("grep -r 'jtools' *")
install.packages("lavaan")
install.packages("diagram")
install.packages("ggrepel")
install.packages("semTools")
install.packages("TH.data")
install.packages("shinyWidgets")
install.packages("predict3d")
install.packages("interactions")
install.packages("car")
library(processR)
devtools::document()
devtools::document()
devtools::check()
devtools::check_win_devel()
install.packages(c("boot", "callr", "farver", "foreign", "gh", "janitor", "MASS", "nlme", "prettyunits", "rlang", "rmarkdown", "sjlabelled", "tidyr", "vctrs"))
install.packages(c("boot", "callr", "farver", "foreign", "gh", "janitor", "MASS", "nlme", "prettyunits", "rlang", "rmarkdown", "sjlabelled", "tidyr", "vctrs"))
install.packages(c("rlang", "tidyr", "vctrs"))
install.packages(c("rlang", "tidyr", "vctrs"))
system("grep -r 'makeIndirectEquation' *")
system("grep -r 'cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))' *")
system("grep -r 'makeIndirectEquation' *")
X="negemot";M="ideology"
temp1=c("a1*negemot","a2*sex","a4*negemot*sex","a5*negemot*age","a6*sex*age")
temp2="b1*ideology"
temp3="c1*negemot"
moderatorNames=c("age","sex")
X= "hp";M= "am"
temp1= c("a1*hp","a2*wt","a3*hp:wt")
temp2= "b1*am"
temp3= c("c1*hp","c2*wt","c3*hp:wt")
moderatorNames=c("wt")
X= c("d1","d2");M="am"
temp1=c("a1*d1","a2*d2","a3*wt","a4*d1:wt","a5*d2:wt")
temp2="b1*am"
temp3=c("c1*d1","c2*d2","c3*wt","c4*d1:wt","c5*d2:wt")
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))
library(processR)
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))
X= c("d1","d2");M="am"
temp1=c("a1*d1","a2*d2","a3*wt","a4*d1:wt","a5*d2:wt")
temp2="b1*am"
temp3=c("c1*d1","c2*d2","c3*wt","c4*d1:wt","c5*d2:wt")
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))
X= c("d1","d2");M="am"
temp1=c("a1*d1","a2*d2","a3*wt","a4*d1:wt","a5*d2:wt")
temp2="b1*am"
temp3=c("c1*d1","c2*d2","c3*wt","c4*d1:wt","c5*d2:wt")
moderatorNames=c("wt")
str_detect(X,":")
require(stringr)
str_detect(X,":")
X= c("d1","d2");M="am"
temp1=c("a1*d1","a2*d2","a3*wt","a4*d1:wt","a5*d2:wt")
temp2="b1*am"
temp3=c("c1*d1","c2*d2","c3*wt","c4*d1:wt","c5*d2:wt")
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))
str_detect_all(X,":")
X
strGrouping(temp1,X)
X= "hp";M= "am"
temp1= c("a1*hp","a2*wt","a3*hp:wt")
temp2= "b1*am"
temp3= c("c1*hp","c2*wt","c3*hp:wt")
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames))
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames,range=TRUE))
X="wt";M=NULL;temp1=NULL;temp2=NULL;temp3=c("c1*wt","c2*hp","c3*wt:hp");
moderatorNames="hp";range=TRUE;rangemode=1;probs=c(0.16,0.5,0.84)
cat(makeIndirectEquation(X,M,temp1,temp2,temp3,moderatorNames,range=TRUE))
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::check_rhub()
devtools::check()
devtools::release()
devtools::release()
devtools::document()
devtools::check()
devtools::check_rhub()
car::vif
tidyr::crossing
system("grep -r 'ggCor' *")
system("grep -r 'mycor' *")
mycor::mycor
system("grep -r 'powerpoint_presentation' *")
system("grep -r 'render' *")
system("grep -r 'medsummary' *")
system("grep -r 'medSummary' *")
system("grep -r 'jnPlot' *")
fit=lm(mpg~hp*wt,data=mtcars)
jnPlot(fit)
library(processR)
fit=lm(mpg~hp*wt,data=mtcars)
jnPlot(fit)
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_rhub()
system("grep -r 'vif' *")
library(processR)
devtools::document()
install.packages("devtools")
devtools::document()
library(processR)
library(processR)
labels = list(X="cond", M="pmi", Y="reaction")
covariates = list(name=c("gender","age"),  site=list(c("M","Y"),c("M","Y")))
drawConcept(labels= labels, covar=covariates, nodemode=2)
model = tripleEquation(labels=labels, covar=covariates)
semfit = sem(model=model, data=pmi)
summary(semfit)
requier(lavaan)
require(lavaan)
labels = list(X="cond", M="pmi", Y="reaction")
covariates = list(name=c("gender","age"),  site=list(c("M","Y"),c("M","Y")))
drawConcept(labels= labels, covar=covariates, nodemode=2)
model = tripleEquation(labels=labels, covar=covariates)
semfit = sem(model=model, data=pmi)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est")
drawModel(semfit,labels=labels,nodemode=2,whatLabel="estSE")
drawModel(semfit,labels=labels,nodemode=2,whatLabel="estSE",drawCovar=FALSE)
devtools::document()
devtools::check()
devtools::document()
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est")
require(lavaan)
require(processR)
labels = list(X="cond", M="pmi", Y="reaction")
covariates = list(name=c("gender","age"),  site=list(c("M","Y"),c("M","Y")))
drawConcept(labels= labels, covar=covariates, nodemode=2)
model = tripleEquation(labels=labels, covar=covariates)
model = tripleEquation(labels=labels, covar=covariates)
semfit = sem(model=model, data=pmi)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est")
drawModel(semfit,labels=labels,nodemode=2,drawCovar=FALSE)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est",drawCovar=FALSE)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="estSE",drawCovar=FALSE)
require(lavaan)
require(processR)
labels = list(X="cond", M="pmi", Y="reaction")
covariates = list(name=c("gender","age"),  site=list(c("M","Y"),c("M","Y")))
model = tripleEquation(labels=labels, covar=covariates)
semfit = sem(model=model, data=pmi)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est")
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est",drawCovar=FALSE)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est")
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est",drawCovar=FALSE)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="estSE",drawCovar=FALSE)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est")
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est",drawCovar=FALSE)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="estSE",drawCovar=FALSE)
require(officer)
require(rtable)
require(rrtable)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est")
drawModel(semfit,labels=labels,nodemode=2)
plot2docx("drawModel(semfit,labels=labels,nodemode=2)")
plot2docx("drawModel(semfit,labels=labels,nodemode=2)")
labels
q
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk")
changeLabelName(x,labels)
x=c("baby","milk","baby:milk")
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk")
changeLabelName(x,labels)
labels=list(X="frame:test",Mi="empathy",Y="intervention",W="frame",Z="test")
x=c("skeptic","test","empathy","skeptic:frame:test","D1:frame","frame:test")
changeLabelName(x,labels)
changeLabelName(x,labels,add=TRUE)
x=c("baby","milk","baby:milk")
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk")
changeLabelName(x,labels)
x=c("baby","milk","baby:milk")
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk")
library(processR)
x=c("baby","milk","baby:milk")
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk")
changeLabelName(x,labels)
drawModel(semfit,labels=labels,nodemode=2)
labels = list(X="cond", M="pmi", Y="reaction")
covariates = list(name=c("gender","age"),  site=list(c("M","Y"),c("M","Y")))
model = tripleEquation(labels=labels, covar=covariates)
semfit = sem(model=model, data=pmi)
drawModel(semfit,labels=labels,nodemode=2)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est",drawCovar=FALSE)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="estSE",drawCovar=FALSE)
drawModel(semfit,labels=labels,nodemode=2)
plot2docx("drawModel(semfit,labels=labels,nodemode=2)")
plot2docx("require(processR);drawModel(semfit,labels=labels,nodemode=2)")
plot2docx("drawModel(semfit,labels=labels,nodemode=2)")
x=c("baby","milk","baby:milk")
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk")
changeLabelName(x,labels)
library(processR)
drawModel(semfit,labels=labels,nodemode=2)
labels = list(X="cond", M="pmi", Y="reaction")
covariates = list(name=c("gender","age"),  site=list(c("M","Y"),c("M","Y")))
model = tripleEquation(labels=labels, covar=covariates)
semfit = sem(model=model, data=pmi)
drawModel(semfit,labels=labels,nodemode=2)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est",drawCovar=FALSE)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="estSE",drawCovar=FALSE)
plot2docx("drawModel(semfit,labels=labels,nodemode=2)")
anyplot = dml(code = barplot(1:5, col = 2:6), bg = "wheat")
library(rvg)
doc <- read_pptx()
doc <- add_slide(doc, "Title and Content", "Office Theme")
doc <- ph_with(doc, anyplot, location = ph_location_fullsize())
anyplot = dml(code = barplot(1:5, col = 2:6), bg = "wheat")
doc <- ph_with(doc, anyplot, location = ph_location_fullsize())
fileout <- "vg.pptx"
print(doc, target = fileout)
drawModel(semfit,labels=labels,nodemode=2)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est",drawCovar=FALSE)
anyplot = dml(code = drawModel(semfit,labels=labels,nodemode=2))
library(rvg)
library(officer)
doc <- read_pptx()
doc <- add_slide(doc, "Title and Content", "Office Theme")
doc <- ph_with(doc, anyplot, location = ph_location_fullsize())
fileout <- tempfile(fileext = ".pptx")
fileout <- "vg.pptx"
print(doc, target = fileout)
library(rvg)
plot2pptx("drawModel(semfit,labels=labels,nodemode=2)")
library(processR)
drawModel(semfit,labels=labels,nodemode=2,whatLabel="est",drawCovar=FALSE)
anyplot = dml(code = drawModel(semfit,labels=labels,nodemode=2,whatLabel="est",drawCovar=FALSE))
doc <- read_pptx()
doc <- add_slide(doc, "Title and Content", "Office Theme")
doc <- ph_with(doc, anyplot, location = ph_location_fullsize())
fileout <- tempfile(fileext = ".pptx")
fileout <- "vg.pptx"
print(doc, target = fileout)
