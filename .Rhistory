formatters = list(A ~ stringr::str_extract(",label[i],",'[^0-9yYmM]*'),
a~ stringr::str_extract(",label[i],",'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE)))),
part='body')
compose(ft,j=2,
value=as_paragraph(
as_chunk('label1',pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(",label[i],",'[^0-9yYmM]*'),
a~ stringr::str_extract(",label[i],",'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE)))),
part='body')
ft
compose(ft,j=2,
value=as_paragraph(
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(",label1,",'[^0-9yYmM]*'),
a~ stringr::str_extract(",label1,",'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE)))),
part='body')
compose(ft,j=2,
value=as_paragraph(
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,[^0-9yYmM]*),
a~ stringr::str_extract(label1,[0-9yYmM].*)),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE)))),
part='body')
compose(ft,j=2,
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,[^0-9yYmM]*),
a~ stringr::str_extract(label1,[0-9yYmM].*)),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
ft
compose(ft,j=2,
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,[^0-9yYmM]*),
a~ stringr::str_extract(label1,[0-9yYmM].*)),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
ft
compose(ft,j=2,
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,'[^0-9yYmM]*'),
a~ stringr::str_extract(label1,'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
myft <- flextable( head(iris, n = 10 ))
myft
myft <- compose( myft, j = 1,
value = as_paragraph(
minibar(value = Sepal.Length, max = max(Sepal.Length)),
" ",
as_chunk( Sepal.Length, formater = formatC,
props = fp_text(color = "orange") ),
" blah blah"
),
part = "body")
autofit(myft)
myft <- flextable( head(iris, n = 10 ))
myft
myft <- compose( myft, j = 1,
value = as_paragraph(
minibar(value = Sepal.Length, max = max(Sepal.Length)),
" ",
as_chunk( Sepal.Length, formater = formatC,
props = fp_text(color = "orange") ),
" blah blah"
),
part = "body")
autofit(myft)
ft
x
str(x)
ft
compose(ft,j=2,
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,'[^0-9yYmM]*'),
a~ stringr::str_extract(label1,'[0-9yYmM].*')),
fprops = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
ft
compose(ft,j=2,
as_chunk(label1,pattern = '{{A}}{{a}}',
formatters = list(A ~ stringr::str_extract(label1,'[^0-9yYmM]*'),
a~ stringr::str_extract(label1,'[0-9yYmM].*')),
props = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
ft
compose(ft,j=2,
as_chunk(label1,
formatters = list(pattern = '{{A}}{{a}}',
A ~ stringr::str_extract(label1,'[^0-9yYmM]*'),
a~ stringr::str_extract(label1,'[0-9yYmM].*')),
props = list(A=fp_text(italic=TRUE),a=fp_text(vertical.align='subscript',italic=TRUE))),
part='body')
ft <- compose(ft, i = 1, j = "dummy", part = "header",
value = as_paragraph(
as_sub("Sepal.Length"),
" anything "
) )
autofit(ft)
ft <- flextable( head(iris), col_keys = c("dummy") )
ft <- compose(ft, i = 1, j = "dummy", part = "header",
value = as_paragraph(
as_sub("Sepal.Length"),
" anything "
) )
autofit(ft)
ft <- flextable( head(iris), col_keys = c("dummy") )
ft
ft <- flextable( head(iris), col_keys = c("dummy") )
ft
ft <- compose(ft, i = 1, j = "dummy", part = "header",
value = as_paragraph(
as_sub("Sepal.Length"),
" anything "
) )
autofit(ft)
ft
fit1=lm(mpg~wt,data=mtcars)
x=modelsSummary(fit1,labels=labels)
ft=modelsSummaryTable(x)
ft
ft <- flextable( head(iris),
col_keys = c("Species", "Sepal", "Petal") )
ft <- set_header_labels(ft, Sepal="Sepal", Petal="Petal")
ft <- compose(ft, j = "Sepal",
value = as_paragraph( as_bracket(Sepal.Length, Sepal.Width) ) )
ft <- compose(ft, j = "Petal",
value = as_paragraph( as_bracket(Petal.Length, Petal.Width) ) )
autofit(ft)
fit1=lm(mpg~wt,data=mtcars)
x=modelsSummary(fit1,labels=labels)
ft=modelsSummaryTable(x)
ft
ft
compose(ft,j=2,
value=as_paragraph(
as_i(stringr::str_extract(label1,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label1,'[0-9yYmM].*')))),
part='body')
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
x=modelsSummary(list(fit1,fit2),labels=labels)
ft=modelsSummaryTable(x)
ft
compose(ft,j=2,
value=as_paragraph(
as_i(stringr::str_extract(label1,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label1,'[0-9yYmM].*')))),
part='body')
compose(ft,j=8,
value=as_paragraph(
as_i(stringr::str_extract(label2,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label2,'[0-9yYmM].*')))),
part='body')
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
ft=modelsSummaryTable(x)
ft
compose(ft,j=2,
value=as_paragraph(
as_i(stringr::str_extract(label1,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label1,'[0-9yYmM].*')))),
part='body')
compose(ft,j=8,
value=as_paragraph(
as_i(stringr::str_extract(label2,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label2,'[0-9yYmM].*')))),
part='body')
compose(ft,j=14,
value=as_paragraph(
as_i(stringr::str_extract(label3,'[^0-9yYmM]*')),
as_i(as_sub(stringr::str_extract(label3,'[0-9yYmM].*')))),
part='body')
devtools::docuemnt()
devtools::document()
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp*am,data=mtcars)
fit=list(fit1,fit2)
labels=list(Y="mpg",X="wt",W="hp",Z="am")
modelsSummary(fit,labels=labels)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
devtools::document()
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
library(processR)
modelsSummaryTable(x)
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
library(processR)
modelsSummaryTable(x,vanilla=FALSE)
modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(list(fit1,fit2),labels=labels,vanilla=FALSE)
modelsSummaryTable(list(fit1,fit2),labels=labels)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
devtools::document()
devtools::check()
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
devtools::document()
devtools::check()
system("grep -r 'as_sub' *")
system("grep -r 'break_column_bofore' *")
system("grep -r 'break_column_before' *")
system("grep -r 'break_column' *")
require(processR)
require(lavaan)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator)
cat(model)
labels=list(X="hp",Y="mpg",W="wt")
model=tripleEquation(labels=labels)
cat(model)
pmacroModel(1,labels=labels)
statisticalDiagram(1,labels=labels)
model=tripleEquation(labels=labels)
cat(model)
fit=lm(mpg~wt*hp,data=mtcars)
modSummary2Table(fit)
condPlot(fit)
condPlot(fit,mode=2)
ggPredict(fit)
require(predict3d)
condPlot(fit,mode=2)
ggPredict(fit)
condPlot(fit,mode=2)
condPlot(fit)
condPlot(fit,mode=2)
ggPredict(fit)
ggPredict(fit)
ggPredict(fit,mode=2)
condPlot(fit,mode=2)
condPlot(fit,rangemode=2)
X="X";Y="Y"
moderator=list(name=c("Z"),site=list(c("a","c")))
cat(modmedEquation(X=X,Y=Y,moderator=moderator,range=TRUE))
X="X";Y="Y"
moderator=list(name=c("Z"),site=list(c("c")))
cat(modmedEquation(X=X,Y=Y,moderator=moderator,range=TRUE))
X="X";Y="Y"
moderator=list(name=c("Z"),site=list(c("a","c")))
cat(modmedEquation(X=X,Y=Y,moderator=moderator,range=TRUE))
X="X";Y="Y"
moderator=list(name=c("Z"),site=list(c("c")))
cat(modmedEquation(X=X,Y=Y,moderator=moderator,range=TRUE))
X="X";M="M"
moderator=list(name=c("W"),site=list(c("a")))
cat(modmedEquation(X=X,Y=Y,moderator=moderator,range=TRUE))
M="M";Y="Y"
moderator=list(name=c("W"),site=list(c("b")))
cat(modmedEquation(X=X,Y=Y,moderator=moderator,range=TRUE))
system("grep -r 'strGrouping' *")
X="X";Y="Y"
moderator=list(name=c("Z"),site=list(c("a","c")))
cat(modmedEquation(X=X,Y=Y,moderator=moderator,range=TRUE))
cat(modmedEquation(X=X,Y=Y,moderator=moderator)
)
(XM=moderator$name[str_detect2(moderator$site,"a")])
(MY=moderator$name[str_detect2(moderator$site,"b")])
(XY=moderator$name[str_detect2(moderator$site,"c")])
# Regression of Moderator
XM=c(X,XM)
XMstr=interactStr(XM,prefix="a")
XMstr
if(!is.null(M)) {
equation=paste(M,"~",stringr::str_flatten(XMstr,"+"))
} else{
equation=""
}
if(length(covar$name)>0){
j=1
for(i in 1:length(covar$name)){
if("Mi" %in% covar$site[[i]]){
equation=paste0(equation," + ","f",j,"*",covar$name[i])
j=j+1
}
}
}
equation=paste0(equation,"\n")
M=NULL; labels=NULL;range=FALSE
labels=NULL;range=FALSE;covar=list()
(XM=moderator$name[str_detect2(moderator$site,"a")])
(MY=moderator$name[str_detect2(moderator$site,"b")])
(XY=moderator$name[str_detect2(moderator$site,"c")])
# Regression of Moderator
XM=c(X,XM)
XMstr=interactStr(XM,prefix="a")
XMstr
XM
if(!is.null(M)) {
equation=paste(M,"~",stringr::str_flatten(XMstr,"+"))
} else{
equation=""
}
if(length(covar$name)>0){
j=1
for(i in 1:length(covar$name)){
if("Mi" %in% covar$site[[i]]){
equation=paste0(equation," + ","f",j,"*",covar$name[i])
j=j+1
}
}
}
equation=paste0(equation,"\n")
MY=c(M,MY)
XY=c(X,XY)
skip=ifelse(X %in% MY,TRUE,FALSE)
MYstr=interactStr(MY,prefix="b",skip=skip)
MYstr
skip=FALSE
if(!is.null(M)) skip=ifelse(M %in% XY,TRUE,FALSE)
XYstr=interactStr(XY,prefix="c",skip=skip)
XYstr
if(!is.null(M)){
temp=paste(Y,"~",stringr::str_flatten(XYstr,"+"),"+",
stringr::str_flatten(MYstr,"+"))
} else{
temp=paste(Y,"~",stringr::str_flatten(XYstr,"+"))
}
if(length(covar$name)>0){
j=1
for(i in 1:length(covar$name)){
if("Y" %in% covar$site[[i]]){
temp=paste0(temp," + ","g",j,"*",covar$name[i])
j=j+1
}
}
}
temp=paste0(temp,"\n")
equation=paste0(equation,temp)
equation
require(lavaan)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator)
cat(model)
require(proessR)
require(processR)
require(lavaan)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator)
cat(model)
semfit=sem(model,data=disaster,se="boot",bootstrap=100)
modmedSummary(semfit)
require(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(X="wt",W="hp",Y="mpg",Z="am")
x=modelsSummary(fit1,labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2),labels=labels)
modelsSummaryTable(x)
modelsSummaryTable(x,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2,fit3),labels=labels)
system("grep -r 'display' *")
system("grep -r 'compose' *")
fit=lm(govact~negemot*age,data=glbwarm)
compareMC(fit)
compareMC(fit,mode=2)
compareMCTable(fit,mode=2)
compareMCTable(fit)
compareMCTable(fit)
compareMCTable(fit,vanilla=TRUE)
devtools::check()
require(lavaan)
require(processR)
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name='skeptic',site=list(c("a")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=200)
modSummary(semfit)
modSummaryTable(semfit)
labels=list(X="dysfunc",M="negtone",Y="perform",W="negexp")
moderator=list(name="negexp",site=list("b"))
model=tripleEquation(labels=labels,moderator=moderator,data=teams,rangemode=2)
cat(model)
semfit=sem(model,data=teams,se="boot",bootstrap=100)
modmedSummary(semfit)
modSummaryTable(semfit)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=100)
modSummary(semfit)
modSummaryTable(semfit)
labels=list(X="dysfunc",M="negtone",Y="perform",W="negexp")
moderator=list(name="negexp",site=list("b"))
model=tripleEquation(labels=labels,moderator=moderator,data=teams,rangemode=2)
cat(model)
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name='skeptic',site=list(c("a")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2)
cat(model)
semfit=sem(model=model,data=disaster,se="boot",bootstrap=100)
modSummary(semfit)
modSummaryTable(semfit)
labels=list(X="dysfunc",M="negtone",Y="perform",W="negexp")
moderator=list(name="negexp",site=list("b"))
model=tripleEquation(labels=labels,moderator=moderator,data=teams,rangemode=2)
cat(model)
semfit=sem(model,data=teams,se="boot",bootstrap=100)
modmedSummary(semfit)
modSummaryTable(semfit)
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_rhub()
system("grep -r 'web-r.space' *")
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_rhub()
devtools::check()
devtools::check_win_release()
devtools::check_win_devel()
devtools::check_rhub()
devtools::check()
system("grep -r 'ggPredict' *")
system("grep -r 'dontrun' *")
system("grep -r 'ggPredict' *")
system("grep -r 'condPlot2' *")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
system("grep -r 'dontrun' *")
devtools::document()
devtools::check()
devtools::check_win_devel()
devtools::check_win_release()
devtools::check_rhub()
system("grep -r 'cardiomoon.shinyapps.io' *")
devtools::document()
devtools::check()
devtools::release()
