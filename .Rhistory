modelsSummaryTable(x)
count=ncol(x)/4
count
modelNames=attr(x,"modelNames")
selected=c()
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
if(i<count) selected=c(selected,ncol(x))
}
x1 <- x %>% select(selected)
class(x1)="data.frame"
z=ztable(x1,include.colnames=FALSE,align="c")
newnames=c()
newModelNames=c()
ncgroup=c()
for(i in 1:count){
newnames=c(newnames,c("Coef","SE","t","p"))
newModelNames=c(newModelNames,modelNames[i])
ncgroup=c(ncgroup,4)
if(i<count) {
newnames=c(newnames,"")
newModelNames=c(newModelNames,"")
ncgroup=c(ncgroup,1)
}
}
str(z)
z %>% addcgroup(cgroup=newModelNames,n.cgroup=ncgroup) %>%
addcgroup(cgroup=newnames,n.cgroup=rep(1,ncol(z$x)))
z
for(i in 1:count){
for(j in 1:5){
z=spanCol(z,row=nrow(x1)+1-(j-1),from=2+(i-1)*5,to=5+(i-1)*5)
}
}
z
str(z)
z
equations=regEquation(X="cond",M="pmi",Y="reaction")
cat(equations)
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
summary(fit[[1]])
summary(fit[[1]])
x=modelsSummary(fit,labels=labels)
str(x)
x
require(processR)
equations=regEquation(X="cond",M="pmi",Y="reaction")
cat(equations)
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
summary(fit[[1]])
x=modelsSummary(fit,labels=labels)
str(x)
x
cat(equations)
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
summary(fit[[1]])
x=modelsSummary(fit,labels=labels)
labels=list(X="cond",M="pmi",Y="reaction")
equations=regEquation(X="cond",M="pmi",Y="reaction")
cat(equations)
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
summary(fit[[1]])
x=modelsSummary(fit,labels=labels)
str(x)
x
modelsSummaryTable(x)
count=ncol(x)/4
count
modelNames=attr(x,"modelNames")
selected=c()
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
if(i<count) selected=c(selected,ncol(x))
}
x1 <- x %>% select(selected)
class(x1)="data.frame"
z=ztable(x1,align="c")
z
require(ztable)
require(magrittr)
require(dplyr)
z=ztable(x1,align="c")
count=ncol(x)/4
count
modelNames=attr(x,"modelNames")
selected=c()
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
if(i<count) selected=c(selected,ncol(x))
}
x1 <- x %>% select(selected)
class(x1)="data.frame"
z=ztable(x1,align="c")
z
str(z)
newnames=c()
newModelNames=c()
ncgroup=c()
for(i in 1:count){
newnames=c(newnames,c("Coef","SE","t","p"))
newModelNames=c(newModelNames,modelNames[i])
ncgroup=c(ncgroup,4)
if(i<count) {
newnames=c(newnames,"")
newModelNames=c(newModelNames,"")
ncgroup=c(ncgroup,1)
}
}
str(z)
z
colnames(z$x)=newnames
str(z)
z
z %>% addcgroup(cgroup=newModelNames,n.cgroup=ncgroup)
z
str(z)
z
for(i in 1:count){
for(j in 1:5){
z=spanCol(z,row=nrow(x1)+1-(j-1),from=2+(i-1)*5,to=5+(i-1)*5)
}
}
z
z %>% addcgroup(cgroup=newModelNames,n.cgroup=ncgroup)
require(processR)
require(ztable)
require(magrittr)
require(dplyr)
labels=list(X="cond",M="pmi",Y="reaction")
equations=regEquation(X="cond",M="pmi",Y="reaction")
cat(equations)
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
summary(fit[[1]])
x=modelsSummary(fit,labels=labels)
str(x)
x
count=ncol(x)/4
count
modelNames=attr(x,"modelNames")
selected=c()
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
if(i<count) selected=c(selected,ncol(x))
}
x1 <- x %>% select(selected)
class(x1)="data.frame"
z=ztable(x1,align="c")
z
newnames=c()
newModelNames=c()
ncgroup=c()
for(i in 1:count){
newnames=c(newnames,c("Coef","SE","t","p"))
newModelNames=c(newModelNames,modelNames[i])
ncgroup=c(ncgroup,4)
if(i<count) {
newnames=c(newnames,"")
newModelNames=c(newModelNames,"")
ncgroup=c(ncgroup,1)
}
}
z %>% addcgroup(cgroup=newModelNames,n.cgroup=ncgroup)
str(z)
addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
colnames(z$x)=newnames
z
str(z)
class(z)
addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
z=ztable(x1)
z
newnames=c()
newModelNames=c()
ncgroup=c()
for(i in 1:count){
newnames=c(newnames,c("Coef","SE","t","p"))
newModelNames=c(newModelNames,modelNames[i])
ncgroup=c(ncgroup,4)
if(i<count) {
newnames=c(newnames,"")
newModelNames=c(newModelNames,"")
ncgroup=c(ncgroup,1)
}
}
class(z)
colnames(z$x)=newnames
z
addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
z=addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
for(i in 1:count){
for(j in 1:5){
z=spanCol(z,row=nrow(x1)+1-(j-1),from=2+(i-1)*5,to=5+(i-1)*5)
}
}
z
#' S3 method for class 'modelSummary'
#'@importFrom dplyr select
#'@export
ztable.modelSummary=function(x,...){
count=ncol(x)/4
count
modelNames=attr(x,"modelNames")
selected=c()
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
if(i<count) selected=c(selected,ncol(x))
}
x1 <- x %>% select(selected)
class(x1)="data.frame"
z=ztable(x1)
z
newnames=c()
newModelNames=c()
ncgroup=c()
for(i in 1:count){
newnames=c(newnames,c("Coef","SE","t","p"))
newModelNames=c(newModelNames,modelNames[i])
ncgroup=c(ncgroup,4)
if(i<count) {
newnames=c(newnames,"")
newModelNames=c(newModelNames,"")
ncgroup=c(ncgroup,1)
}
}
z=addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
class(z)
colnames(z$x)=newnames
z
for(i in 1:count){
for(j in 1:5){
z=spanCol(z,row=nrow(x1)+1-(j-1),from=2+(i-1)*5,to=5+(i-1)*5)
}
}
z
}
x
x=modelsSummary(fit,labels=labels)
str(x)
x
modelsSummaryTable(x)
x
ztable(x)
modelsSummaryTable(x)
ztable(x)
modelsSummaryTable(x)
ztable(x)
modelsSummaryTable(x)
ztable(x)
count=ncol(x)/4
count
modelsSummaryTable(x)
x
count=ncol(x)/4
count
modelNames=attr(x,"modelNames")
selected=c()
align=c("r")
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
align=c(align,c("c","c","c","r"))
if(i<count) {
selected=c(selected,ncol(x))
align=c(align,"c")
}
}
x1 <- x %>% select(selected)
class(x1)="data.frame"
align
align
align=c("r")
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
align=c(align,c("c","c","c","r"))
if(i<count) {
selected=c(selected,ncol(x))
align=c(align,"c")
}
}
print(align)
z=ztable(x1)
z
align=paste0(align,collapse = "")
z=ztable(x1,align=align)
z
newnames=c()
newModelNames=c()
ncgroup=c()
for(i in 1:count){
newnames=c(newnames,c("Coef","SE","t","p"))
newModelNames=c(newModelNames,modelNames[i])
ncgroup=c(ncgroup,4)
if(i<count) {
newnames=c(newnames,"")
newModelNames=c(newModelNames,"")
ncgroup=c(ncgroup,1)
}
}
z=addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
colnames(z$x)=newnames
z
for(i in 1:count){
for(j in 1:5){
z=spanCol(z,row=nrow(x1)+1-(j-1),from=2+(i-1)*5,to=5+(i-1)*5)
}
}
z
#' S3 method for class 'modelSummary'
#'@importFrom dplyr select
#'@export
ztable.modelSummary=function(x,...){
count=ncol(x)/4
count
modelNames=attr(x,"modelNames")
selected=c()
align=c("r")
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
align=c(align,c("c","r","r","r"))
if(i<count) {
selected=c(selected,ncol(x))
align=c(align,"c")
}
}
x1 <- x %>% select(selected)
class(x1)="data.frame"
align=paste0(align,collapse = "")
z=ztable(x1,align=align)
newnames=c()
newModelNames=c()
ncgroup=c()
for(i in 1:count){
newnames=c(newnames,c("Coef","SE","t","p"))
newModelNames=c(newModelNames,modelNames[i])
ncgroup=c(ncgroup,4)
if(i<count) {
newnames=c(newnames,"")
newModelNames=c(newModelNames,"")
ncgroup=c(ncgroup,1)
}
}
z=addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
colnames(z$x)=newnames
z
for(i in 1:count){
for(j in 1:5){
z=spanCol(z,row=nrow(x1)+1-(j-1),from=2+(i-1)*5,to=5+(i-1)*5)
}
}
z
}
ztable(x)
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(processR)
require(processR)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
model
cat(model)
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
library(processR)
model=tripleEquation(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
library(processR)
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
cat(model)
equations=regEquation(X="cond",M="pmi",Y="reaction")
pmacroModel(4,labels=labels)
require(lavaan)
semfit=sem(model=model,data=pmi)
pmacroModel(4,labels=labels)
equations=regEquation(X="cond",M="pmi",Y="reaction")
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est",digits=3)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est",digits=3)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
semfit=sem(model=model,data=pmi,se="boot")
summary(fit)
summary(semfit)
estimatesTable(semfit)
estimatesTable2(semfit)
estimatesTable(semfit)
pmacroModel(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
equations=regEquation(X="cond",M="pmi",Y="reaction")
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=disaster)
})
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
x=modelsSummary(fit)
x
x=modelsSummary(fit,labels=labels)
x
modelsSummaryTable(x)
ztable(x)
ztable::ztable(x)
z=ztable::ztable(x)
str(z)
modelsSummaryTable(x)
z
modelsSummaryTable(x)
z
library(processR)
z=ztable(x)
z
require(processR)
require(lavaan)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
semfit=sem(model=model,data=pmi,se="boot")
summary(semfit)
estimatesTable(semfit)
pmacroModel(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
equations=regEquation(X="cond",M="pmi",Y="reaction")
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
x=modelsSummary(fit,labels=labels)
modelsSummaryTable(x)
z=ztable(x)
z
require(ztable)
z=ztable(x)
z
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
equations=regEquation(X="cond",M="pmi",Y="reaction")
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
x=modelsSummary(fit,labels=labels)
modelsSummaryTable(x)
z=ztable(x)
z
devtools::document()
devtools::document()
devtools::check()
modelsSummaryTable(x)
z=ztable(x)
devtools::document()
library(processR)
require(processR)
require(lavaan)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
semfit=sem(model=model,data=pmi,se="boot")
summary(semfit)
estimatesTable(semfit)
pmacroModel(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
equations=regEquation(X="cond",M="pmi",Y="reaction")
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
x=modelsSummary(fit,labels=labels)
modelsSummaryTable(x)
ztable(x)
ztable::ztable(x)
z
z=ztable::ztable(x)
z
str(z)
