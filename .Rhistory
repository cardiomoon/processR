test=function(df,groupvar,...) {
groupvar=enquo(groupvar)
vars=enquos(...)
count=length(vars)
str(quos(vars))
df %>% group_by(!!groupvar) %>% select(!!!vars) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),format,1) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
protest %>% test(protest,respappr,liking)
test=function(df,groupvar,...) {
groupvar=enquo(groupvar)
vars=enquos(...)
count=length(vars)
df %>% group_by(!!groupvar) %>% select(!!!vars) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
# mutate_at(c(2:(count*2+1)),format,1) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
protest %>% test(protest,respappr,liking)
test=function(df,groupvar,...) {
groupvar=enquo(groupvar)
vars=enquos(...)
count=length(vars)
df %>% group_by(!!groupvar) %>% select(!!!vars) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
protest %>% test(protest,respappr,liking)
acs %>% test(sex,age,height,weight)
test=function(df,groupvar,...) {
str(groupvar)
groupvar=enquo(groupvar)
vars=enquos(...)
count=length(vars)
df %>% group_by(!!groupvar) %>% select(!!!vars) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
acs %>% test(sex,age,height,weight)
test=function(df,groupvar,...) {
substitute(groupvar)
groupvar=enquo(groupvar)
vars=enquos(...)
count=length(vars)
df %>% group_by(!!groupvar) %>% select(!!!vars) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
acs %>% test(sex,age,height,weight)
test=function(df,groupvar,...) {
cat(substitute(groupvar))
groupvar=enquo(groupvar)
vars=enquos(...)
count=length(vars)
df %>% group_by(!!groupvar) %>% select(!!!vars) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
acs %>% test(sex,age,height,weight)
test=function(df,groupvar,...) {
cat(substitute(groupvar))
groupvar=enquo(groupvar)
vars=enquos(...)
count=length(vars)
cat(substitute(...))
df %>% group_by(!!groupvar) %>% select(!!!vars) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
acs %>% test(sex,age,height,weight)
test=function(df,groupvar,...) {
groupvar=enquo(groupvar)
vars=enquos(...)
count=length(vars)
df %>% group_by(!!groupvar) %>% select(!!!vars) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
acs %>% test(sex,age,height,weight)
df<-protest %>% group_by(protest) %>%
summarise(meanM=mean(respappr),sdM=sd(respappr),meanY=mean(liking),sdY=sd(liking)) %>%
mutate_at(c(2:5),format,1) %>%
mutate_at(c(2:5),function(x){sprintf("%0.3f",as.numeric(x))})
df
test=function(df,groupvar,...) {
groupvar=enquo(groupvar)
vars=enquos(...)
count=length(vars)
df %>% group_by(!!groupvar) %>% select(!!!vars) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
acs %>% test(sex,age,height,weight)
test=function(df,groupvar,...) {
groupvar=enquo(groupvar)
vars=enquos(...)
count=length(vars)
df %>% group_by(!!groupvar) %>% select(...) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
acs %>% test(sex,age,height,weight)
test=function(df,groupvar,...) {
groupvar=enquo(groupvar)
substitute(...)
vars=enquos(...)
count=length(vars)
df %>% group_by(!!groupvar) %>% select(...) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
acs %>% test(sex,age,height,weight)
test=function(df,groupvar,...) {
groupvar=enquo(groupvar)
str(substitute(...))
vars=enquos(...)
count=length(vars)
df %>% group_by(!!groupvar) %>% select(...) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
acs %>% test(sex,age,height,weight)
test=function(df,groupvar,...) {
groupvar=enquo(groupvar)
vars=enquos(...)
count=length(vars)
df %>% group_by(!!groupvar) %>% select(...) %>%
summarize_all(list(mean,sd),na.rm=TRUE) %>%
mutate_at(c(2:(count*2+1)),function(x){sprintf("%0.3f",as.numeric(x))})
}
acs %>% test(sex,age,height,weight)
fit=fit3
str(fit)
#' Get predicted value from object of class "lm"
#' @param fit Object of class "lm"
#' @param group names of dummy variables in  formula
#' @param name names of categorical variable
#' @param mode numeric
#' @export
getYhat=function(fit,group="d",mode=1){
count=length(fit$coeff)
pattern=paste0("^",group,"[1-9]")
dummy=which(str_detect(names(fit$coef),pattern))
dummy
vars=setdiff(1:count,c(1,dummy))
vars
df=fit$model
varsSum=sum(sapply(vars,function(i){
fit$coef[i]*mean(df[[names(fit$coef)[i]]])
}))
constant=fit$coef[1]+varsSum
count=length(dummy)
if((mode==2)&(count==2)){
ratio=matrix(c(-2/3,0,1/3,-1/2,1/3,1/2),byrow=TRUE,ncol=2)
ratio
} else {
ratio=matrix(rep(0,length(dummy)^2),byrow=TRUE,ncol=2)
for(i in 1:count){
ratio[i,i]=1
}
ratio=rbind(rep(0,count),ratio)
ratio
}
res=c()
for(i in 1:(count+1)){
temp=0
for(j in 1:count){
temp=temp+ratio[i,j]*fit$coef[dummy][j]
}
res=c(res,temp)
}
result=res+constant
names(result)=paste0(0:count)
result
}
getYhat(fit=fit3,mode=2)
#' Get predicted value from object of class "lm"
#' @param fit Object of class "lm"
#' @param group names of dummy variables in  formula
#' @param name names of categorical variable
#' @param mode numeric
#' @export
getYhat=function(fit,group="d",name=NULL,mode=1){
count=length(fit$coeff)
pattern=paste0("^",group,"[1-9]")
dummy=which(str_detect(names(fit$coef),pattern))
dummy
vars=setdiff(1:count,c(1,dummy))
vars
df=fit$model
varsSum=sum(sapply(vars,function(i){
fit$coef[i]*mean(df[[names(fit$coef)[i]]])
}))
constant=fit$coef[1]+varsSum
count=length(dummy)
if((mode==2)&(count==2)){
ratio=matrix(c(-2/3,0,1/3,-1/2,1/3,1/2),byrow=TRUE,ncol=2)
ratio
} else {
ratio=matrix(rep(0,length(dummy)^2),byrow=TRUE,ncol=2)
for(i in 1:count){
ratio[i,i]=1
}
ratio=rbind(rep(0,count),ratio)
ratio
}
res=c()
for(i in 1:(count+1)){
temp=0
for(j in 1:count){
temp=temp+ratio[i,j]*fit$coef[dummy][j]
}
res=c(res,temp)
}
result=res+constant
if(is.null(name)){
names(result)=paste0(0:count)
} else{
names(result)=paste0(name,"=",0:count)
}
result
}
getYhat(fit=fit3,mode=2)
getYhat(fit=fit3,mode=2,name="protest")
makeCatEquation(X="wt",Y="mpg",data=mtcars)
makeCatEquation(X="wt",Y="mpg",W="cyl",data=mtcars)
makeCatEquation(X="wt",Y="mpg",W=c("cyl","hp"),data=mtcars)
grouplabels=list(carb="f")
makeCatEquation(X="carb",Y="mpg",W=c("cyl","hp"),data=mtcars,maxylev=6)
makeCatEquation(X="carb",Y="mpg",W=c("cyl","hp"),data=mtcars)
cat(makeCatEquation(X="wt",Y="carb",W=c("am","hp"),data=mtcars,maxylev=6,grouplabels=grouplabels))
library(processR)
moderator=list(name=c("cyl","wt"),site=list(c("c"),c("c")))
covar=list(name=c("carb","disp"),label=c("carb","disp"),site=list(c("M","Y"),"Y","Y"))
cat(catMediation(X="cyl",M="am",Y="mpg",data=mtcars))
cat(catMediation(X="am",Y="mpg",data=mtcars,moderator=moderator,covar=covar,maxylev=6))
cat(catMediation(X="am",Y="mpg",data=mtcars,moderator=moderator,covar=covar))
cat(catMediation(X="cyl",M="am",Y="mpg",data=mtcars))
cat(catMediation(X="cyl",M="am",Y="mpg",data=mtcars,moderator=moderator))
cat(catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator,maxylev=6))
cat(catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator,maxylev=6))
#' Get predicted value from object of class "lm"
#' @param fit Object of class "lm"
#' @param group names of dummy variables in  formula
#' @param name names of categorical variable
#' @param mode numeric
#' @export
getYhat=function(fit,group="d",name=NULL,mode=1){
count=length(fit$coeff)
pattern=paste0("^",group,"[1-9]")
dummy=which(str_detect(names(fit$coef),pattern))
dummy
vars=setdiff(1:count,c(1,dummy))
vars
df=fit$model
varsSum=sum(sapply(vars,function(i){
fit$coef[i]*mean(df[[names(fit$coef)[i]]])
}))
constant=fit$coef[1]+varsSum
count=length(dummy)
if((mode==2)&(count==2)){
ratio=matrix(c(-2/3,0,1/3,-1/2,1/3,1/2),byrow=TRUE,ncol=2)
ratio
} else {
ratio=matrix(rep(0,length(dummy)^2),byrow=TRUE,ncol=2)
for(i in 1:count){
ratio[i,i]=1
}
ratio=rbind(rep(0,count),ratio)
ratio
}
res=c()
for(i in 1:(count+1)){
temp=0
for(j in 1:count){
temp=temp+ratio[i,j]*fit$coef[dummy][j]
}
res=c(res,temp)
}
result=res+constant
if(is.null(name)){
names(result)=paste0("\u0175",0:count)
} else{
names(result)=paste0(name,"=",0:count)
}
result
}
getYhat(fit=fit3,mode=2)
#' Get predicted value from object of class "lm"
#' @param fit Object of class "lm"
#' @param group names of dummy variables in  formula
#' @param name names of categorical variable
#' @param mode numeric
#' @export
getYhat=function(fit,group="d",name=NULL,mode=1){
count=length(fit$coeff)
pattern=paste0("^",group,"[1-9]")
dummy=which(str_detect(names(fit$coef),pattern))
dummy
vars=setdiff(1:count,c(1,dummy))
vars
df=fit$model
varsSum=sum(sapply(vars,function(i){
fit$coef[i]*mean(df[[names(fit$coef)[i]]])
}))
constant=fit$coef[1]+varsSum
count=length(dummy)
if((mode==2)&(count==2)){
ratio=matrix(c(-2/3,0,1/3,-1/2,1/3,1/2),byrow=TRUE,ncol=2)
ratio
} else {
ratio=matrix(rep(0,length(dummy)^2),byrow=TRUE,ncol=2)
for(i in 1:count){
ratio[i,i]=1
}
ratio=rbind(rep(0,count),ratio)
ratio
}
res=c()
for(i in 1:(count+1)){
temp=0
for(j in 1:count){
temp=temp+ratio[i,j]*fit$coef[dummy][j]
}
res=c(res,temp)
}
result=res+constant
if(is.null(name)){
names(result)=paste0("\u0176",0:count)
} else{
names(result)=paste0(name,"=",0:count)
}
result
}
getYhat(fit=fit3,mode=2)
getYhat(fit=fit3,mode=2)
library(processR)
moderator=list(name=c("cyl","wt"),site=list(c("c"),c("c")))
covar=list(name=c("carb","disp"),label=c("carb","disp"),site=list(c("M","Y"),"Y","Y"))
cat(catMediation(X="cyl",M="am",Y="mpg",data=mtcars))
cat(catMediation(X="am",Y="mpg",data=mtcars,moderator=moderator,covar=covar,maxylev=6))
shiny::runApp('~/ownCloud/Documents/processRApp')
moderator=list(name=c("cyl","wt"),site=list(c("c"),c("c")))
cat(catMediation(X="am",Y="mpg",data=mtcars,moderator=moderator,maxylev=6))
cat(catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator,maxylev=6))
library(lavaan)
model=catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator,maxylev=6)
fit=sem(model=model,data=mtcars)
moderator=list(name=c("wt"),site=list(c("c"),c("c")))
model=catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator)
cat(model)
fit=sem(model=model,data=mtcars)
moderator=list(name=c("wt"),site=list(c("c")))
model=catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator)
cat(model)
fit=sem(model=model,data=mtcars)
summary(fit)
fit
parameterEstimates(fit)
moderator=list(name=c("wt"),site=list(c("c")))
model=catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator)
cat(model)
library(processR)
fit=sem(model=model,data=mtcars)
summary(fit)
fit
parameterEstimates(fit)
library(processR)
library(processR)
moderator=list(name=c("wt"),site=list(c("c")))
model=catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator)
cat(model)
library(lavaan)
fit=sem(model=model,data=mtcars)
summary(fit)
fit
parameterEstimates(fit)
library(processR)
moderator=list(name=c("wt"),site=list(c("c")))
model=catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator)
cat(model)
library(processR)
moderator=list(name=c("wt"),site=list(c("c")))
model=catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator)
cat(model)
library(mediate)
library(mediation)
library(bda)
library(mediation)
model=catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator)
cat(model)
install.packages("bda")
model=catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator)
cat(model)
fit=sem(model=model,data=mtcars)
library(processR)
model=catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator)
cat(model)
library(lavaan)
fit=sem(model=model,data=mtcars)
summary(fit)
fit
parameterEstimates(fit)
mediation.test(mtcars$cyl,mtcars$am,mtcars$mpg)
bda::mediation.test(mtcars$cyl,mtcars$am,mtcars$mpg)
fitM=lm(cyl~am,data=mtcars)
fitM=lm(cyl~am,data=mtcars)
fitY=lm(mpg~am,data=mtcars)
gvlma(fitM)
library(gvlma)
gvlma(fitM)
gvlma(fitY)
fitMed=mediate(fitM,fitY,treat="am",mediator="cyl")
fitM=lm(cyl~am,data=mtcars)
fitY=lm(mpg~am,data=mtcars)
summary(fitM)
summary(fitY)
gvlma(fitM)
gvlma(fitY)
fitMed=mediate(fitM,fitY,treat="am",mediator="cyl")
fitMed=mediation::mediate(fitM,fitY,treat="am",mediator="cyl")
fitMed=mediation::mediate(fitM,fitY,treat=am,mediator=cyl)
fitM=lm(cyl~am,data=mtcars)
summary(fitM)
fitY=lm(mpg~am+cyl,data=mtcars)
summary(fitY)
gvlma(fitM)
gvlma(fitY)
fitMed=mediation::mediate(fitM,fitY,treat=am,mediator=cyl)
fitMed=mediation::mediate(fitM,fitY,treat="am",mediator="cyl")
summary(fitMed)
fitMedBoot=mediation::mediate(fitM,fitY,treat="am",mediator="cyl",boot=TRUE,sims=999)
summary(fitMedBoot)
plot(fitMedBoot)
plot(fitMed)
model=catMediation(X="am",M="cyl",Y="mpg",data=mtcars,moderator=moderator)
cat(model)
library(lavaan)
fit=sem(model=model,data=mtcars)
fit=sem(model=model,data=mtcars,se="bootstrap",bootstrap=10)
summary(fit)
summary(fit,rsquare=TRUE)
summary(fit,fit.measures=FALSE,rsquare=TRUE)
summary(fit,fit.measures=FALSE,standardize=TRUE,rsquare=TRUE)
parameterEstimates(fit,boot.ci.type="bca.simple",level=.95,ci=TRUE,standardized=FALSE)
runApp('~/ownCloud/Documents/processRApp')
library(processR)
runApp('~/ownCloud/Documents/processRApp')
devtools::document()
devtools::check()
fit=sem(model=model,data=disaster)
library(lavaan)
library(processR)
fit=sem(model=model,data=disaster)
fit=sem(model=model,data=disaster)
model="justify ~ a1*frame+a2*skeptic+a3*frame:skeptic
donate ~ b1*justify+c1*frame+c2*skeptic+c3*frame:skeptic
skeptic ~ skeptic.mean*1
skeptic ~~ skeptic.var*skeptic
indirect :=(a1+a3*skeptic.mean)*(b1)
direct :=c1+c3*skeptic.mean
total := direct + indirect
indirect.below :=(a1+a3*(skeptic.mean-sqrt(skeptic.var)))*(b1)
indirect.above :=(a1+a3*(skeptic.mean+sqrt(skeptic.var)))*(b1)
direct.below:=c1+c3*(skeptic.mean-sqrt(skeptic.var))
direct.above:=c1+c3*(skeptic.mean+sqrt(skeptic.var))
total.below := direct.below + indirect.below
total.above := direct.above + indirect.above
prop.mediated.below := indirect.below / total.below
prop.mediated.above := indirect.above / total.above"
library(processR)
fit=sem(model=model,data=disaster)
fit=sem(model=model,data=disaster,se="bootstrap",bootstrap=10)
parameterEstimates(Mod.Med.SEM,
boot.ci.type = "bca.simple",
level = .95, ci = TRUE,
standardized = FALSE)[c(19:27),c(4:10)]
parameterEstimates(fit,
boot.ci.type = "bca.simple",
level = .95, ci = TRUE,
standardized = FALSE)
res=parameterEstimates(fit,
boot.ci.type = "bca.simple",
level = .95, ci = TRUE,
standardized = FALSE)
str(result)
str(res)
res=parameterEstimates(fit,
boot.ci.type = "bca.simple",
level = .95, ci = TRUE,
standardized = FALSE)
res
str_view(res$label,"dir|tot|prop")
select=str_view(res$label,"dir|tot|prop")
select=str_detect(res$label,"dir|tot|prop")
res[select]
res=parameterEstimates(fit,
boot.ci.type = "bca.simple",
level = .95, ci = TRUE,
standardized = FALSE)
select=str_detect(res$label,"dir|tot|prop")
res[select]
res=parameterEstimates(fit,
boot.ci.type = "bca.simple",
level = .95, ci = TRUE,
standardized = FALSE)
select=str_detect(res$label,"dir|tot|prop")
select
res[select,]
res
