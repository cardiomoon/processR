long=res
} else{
colnames(res)[ncol(res)]="tooltip"
long=res
long
}
newdata2=merge(newdata,long,by=c(colorname,facetname))
}
if(!is.null(facetname)) newdata2$tooltip=paste0("for ",facetname,"=",newdata2[[facetname]],"\n",newdata2$tooltip)
if(!is.null(colorname)) {
newdata2$tooltip=paste0("for ",colorname,"=",newdata2[[colorname]],"\n",newdata2$tooltip)
if(is.numeric(newdata2[[colorname]])) newdata2[[colorname]]=round(newdata2[[colorname]],digits)
}
newdata2$data_id=rownames(newdata2)
newdata2
if(colorAsFactor) newdata2[[colorname]]=factor(newdata2[[colorname]])
if(is.null(colorname)) {
p<-ggplot(data=newdata2,aes_string(y=yname,x=xname,group=1))
} else{
p<-ggplot(data=newdata2,aes_string(y=yname,x=xname,color=colorname,fill=colorname,group=colorname))
}
if(se) p<-p+geom_ribbon(aes_string(ymin="ymin",ymax="ymax",colour=NULL),alpha=0.2)
p
if(point|jitter) {
if(!is.null(colorname)) {
if(colorAsFactor) data[[colorname]]=factor(data[[colorname]])
}
data$data_id=rownames(data)
data$tooltip=paste0(data$data_id,"\n",xname,"=",data[[xname]],"\n",yname,"=",data[[yname]])
if(jitter) p<-p+geom_jitter(data=data,width=0,height=0.05)
else p<-p+geom_point(data=data)
}
p<-p+ geom_line()
if(!is.null(facetname)) p<-p+facet_wrap(as.formula(paste0("~",facetname)),labeller=label_both)
p
getEquation2
fit=lm(Sepal.Length~Species*Sepal.Width*Petal.Length,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Species*Petal.Length,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Species*Petal.Length,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Petal.Length*Species,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Species*Petal.Width,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Species*Petal.Width,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Species*Petal.Width,data=iris)
ggPredict(fit)
library(ggiraphExtra)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Species*Petal.Width,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
ggPredict(fit)
fit=lm(Sepal.Length~Sepal.Width*Species*Petal.Width,data=iris)
ggPredict(fit)
require(tidyverse)
lapply(iris,typical)
lapply(iris,modelr::typical)
lapply(iris,modelr::typical) %>% reduce(crossing)
newdf3<-lapply(iris,modelr::typical) %>% reduce(crossing)
newdf3
require(moonBook)
lapply(acs,typical)
lapply(acs,modelr::typical)
if(nrow(newdf3)>1) newdf3<-newdf3[1,]
newdf3<-lapply(df2,modelr::typical) %>% reduce(crossing)
df2<-acs
newdf3<-lapply(df2,modelr::typical) %>% reduce(crossing)
newdf3=data.frame(newdf3,stringsAsFactors = FALSE)
if(nrow(newdf3)>1) newdf3<-newdf3[1,]
colnames(newdf3)=names(df2)
newdf3<-lapply(df2,modelr::typical) %>% reduce(crossing)
newdf3=data.frame(newdf3,stringsAsFactors = FALSE)
if(nrow(newdf3)>1) newdf3<-newdf3[1,]
colnames(newdf3)=names(df2)
df3
newdf3
paste(names(newdf3),newdf3[1,],sep="=",collapse=",")
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
ggPredict2(fit)
source('~/ownCloud/Documents/processR/R/ggPredict2.R', echo=TRUE)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
ggPredict2(fit)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species+Petal.Length,data=iris)
mod2=NULL;modx.values=NULL;mod2.values=NULL
mode=1;colorn=3;maxylev=6;show.point=TRUE;se=FALSE;alpha=0.1
show.text=TRUE; add.modx.values=TRUE
labels=NULL;xpos=0.7;vjust=-0.5;digits=3
predictors=c("hp","wt")
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
summary(fit)
str(fit)
fit$terms
names(fit$coef)
mod2c="Species"
modxc="Petal.Width"
mod2c="Species"
modxc="Petal.Width"
mod2c="Species"
moderators=c("Petal.Width","Species")
setdiff(names(fit$coef),moderators)
moderators=c("Petal.Width","Species")
str_view(names(fit$coef),moderators)
str_view(names(fit$coef),"Species")
temp=names(fit$coef)
i=1
str_detect(names(fit$coef),moderators[i])
!str_detect(names(fit$coef),moderators[i])
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
predictors=c("Sepal.Width","Petal.Width","Species")
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
predictors=c("Sepal.Width","Petal.Width","Species")
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
predictors=c("Sepal.Width","Petal.Width","Species")
temp=names(fit$coef)
for( i in seq_along(predictors)){
temp=temp[!str_detect(names(fit$coef),predictors[i])]
}
temp
temp=names(fit$coef)[-1]
for( i in seq_along(predictors)){
temp=temp[!str_detect(names(fit$coef),predictors[i])]
}
temp
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
predictors=c("Sepal.Width","Petal.Width","Species")
temp=names(fit$coef)[-1]
temp
for( i in seq_along(predictors)){
temp=temp[!str_detect(names(fit$coef),predictors[i])]
}
temp
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
predictors=c("Sepal.Width","Petal.Width","Species")
temp=names(fit$coef)[-1]
temp
for( i in seq_along(predictors)){
temp=temp[which(!str_detect(names(fit$coef),predictors[i]))]
}
temp
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species,data=iris)
predictors=c("Petal.Width","Species")
temp=names(fit$coef)[-1]
temp
i=1
select=which(!str_detect(names(fit$coef),predictors[i]))
select
select=which(!str_detect(names(fit$coef),predictors[i]))
select
temp=temp[select]
temp
temp=names(fit$coef)[-1]
temp
temp=names(fit$coef)[-1]
temp
i=1
for( i in seq_along(predictors)){
select=which(!str_detect(temp,predictors[i]))
select
temp=temp[select]
}
temp
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species+Petal.Length,data=iris)
predictors=c("Petal.Width","Species")
temp=names(fit$coef)[-1]
temp
for( i in seq_along(predictors)){
select=which(!str_detect(temp,predictors[i]))
select
temp=temp[select]
}
temp
temp
paste(temp,collapse="+")
result=paste0(names(fit$model)[1],"~",paste(temp,collapse="+"))
result
#'Make new formula
#'@param fit An object of class lm or glm
#'@param predictors Names of variables to exclude
getNewFormula=function(fit,predictors){
temp=names(fit$coef)[-1]
temp
for( i in seq_along(predictors)){
select=which(!str_detect(temp,predictors[i]))
select
temp=temp[select]
}
result=paste0(names(fit$model)[1],"~",paste(temp,collapse="+"))
result
}
source('~/ownCloud/Documents/processR/R/ggPredict2.R', echo=TRUE)
source('~/ownCloud/Documents/processR/R/ggPredict2.R', echo=TRUE)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species+Petal.Length,data=iris)
ggPredict2(fit,pred=Sepal.Width,modx=Petal.Length,mod2=Species,digits=3)
library(processR)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species+Petal.Length,data=iris)
ggPredict2(fit,pred=Sepal.Width,modx=Petal.Length,mod2=Species,digits=3)
ggPredict2(fit,pred=Sepal.Width,modx=Species,digits=3)
source('~/ownCloud/Documents/processR/R/ggPredict2.R', echo=TRUE)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species+Petal.Length,data=iris)
ggPredict2(fit,pred=Sepal.Width,modx=Species,digits=3)
#'ggPredict2(fit,modx=wt,mode=3,colorn=10,show.text=FALSE)
#'ggPredict2(fit,modx=wt,modx.values=c(2,3,4,5))
#'ggPredict2(fit,pred=hp,modx=wt,family="Times",fontface="bold.italic",vjust=1.5)
#'ggPredict2(fit,modx=wt)
#'ggPredict2(fit)
#'mtcars$cyl1=factor(mtcars$cyl)
#'fit=lm(mpg~hp*wt*cyl1,data=mtcars)
#'ggPredict2(fit,modx=wt)
#'fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species+Petal.Length,data=iris)
#'ggPredict2(fit,pred=Sepal.Width,modx=Species,digits=3)
ggPredict2=function(fit,pred=NULL,modx=NULL,mod2=NULL,modx.values=NULL,mod2.values=NULL,
mode=1,colorn=3,maxylev=6,show.point=TRUE,se=FALSE,alpha=0.1,
show.text=TRUE, add.modx.values=TRUE,
labels=NULL,xpos=0.7,vjust=-0.5,digits=3,...) {
# mod2=NULL;modx.values=NULL;mod2.values=NULL
# mode=1;colorn=3;maxylev=6;show.point=TRUE;se=FALSE;alpha=0.1
# show.text=TRUE; add.modx.values=TRUE
# labels=NULL;xpos=0.7;vjust=-0.5;digits=3
# predictors=c("hp","wt")
predc <- quo_name(enexpr(pred))
if(predc=="NULL"){
pred<-NULL
predc=names(fit$model)[2]
} else{
pred=enquo(pred)
}
modxc <- quo_name(enexpr(modx))
modx<-enquo(modx)
if(modxc=="NULL"){
modx<-NULL
modxc<-NULL
}
mod2c <- quo_name(enexpr(mod2))
mod2<-enquo(mod2)
if(mod2c=="NULL"){
mod2<-NULL
mod2c<-NULL
}
predictors=c(predc,modxc,mod2c)
str(predictors)
yvar=names(fit$model)[1]
newdata=fit2newdata(fit,predictors,mode=mode,modx.values=modx.values,
mod2.values=mod2.values,colorn=colorn,maxylev=maxylev)
fitted=newdata
if(!is.null(modx) & !is.null(mod2)) {
fitted<-fitted %>% group_by(!! modx, !! mod2)
} else if(!is.null(mod2)) {
fitted<-fitted %>% group_by(!! mod2)
} else if(!is.null(modx)) {
fitted<-fitted %>% group_by(!! modx)
}
str(fitted)
predictors=c(modxc,mod2c)
if(length(predictors)>0){
formulaString=getNewFormula(fit,predictors)
newFormula=as.formula(formulaString)
} else{
newFormula=fit$terms
}
fitted<-fitted %>% do(coef=lm(newFormula,data=.)$coef[1:2])
coef=unlist(fitted$coef)
fitted$intercept=coef[seq(1,by=2,length.out=nrow(fitted))]
fitted$slope=coef[seq(2,by=2,length.out=nrow(fitted))]
print(fitted)
if(is.null(modx)){
p<-ggplot(data=newdata,aes_string(x=predc,y=yvar))
} else{
p<-ggplot(data=newdata,aes_string(x=predc,y=yvar,color=modxc,fill=modxc,group=modxc))
}
p<-p+  geom_line()
if(show.point==TRUE) p<-p+ geom_point(data=fit$model)
if(se==TRUE) p<-p+ geom_ribbon(aes(ymax=ymax,ymin=ymin,color=NULL),alpha=alpha)
if(!is.null(mod2c)) p<-p+eval(parse(text=paste0("facet_grid(~",mod2c,")")))
facetno<-NULL
if(!is.null(mod2c)) facetno=length(unique(fit$model[[mod2c]]))
fitted<-slope2angle(fitted,predc,p,xpos=xpos,digits=digits,
facetno=facetno,add.modx.values=add.modx.values)
if(!is.null(labels)){
if(length(labels)==nrow(fitted)) fitted$label=labels
}
# str(fitted)
if(show.text) p <- p+ geom_text(data=fitted,aes(x=x,y=y,angle=angle,label=label),vjust=vjust,...)
p<-p+ coord_fixed(ratio=attr(fitted,"ratio"))+theme_bw()
if(!is.null(attr(newdata,"caption"))) {
p<-p+labs(caption=paste0("Analysis assuming ",attr(newdata,"caption")))
}
p
}
#'Make angle data with slope data
#'@param df A data.frame
#'@param predc Name of predictor variable
#'@param p An object of class ggplot
#'@param xpos The relative x-axis position of labels. Should be within 0 to 1
#'@param digits integer indicating the number of decimal places
#'@param facetno Tne number of factes
#'@param add.modx.values Whether add name of moderator variable
slope2angle=function(df,predc,p,xpos=0.7,digits=3,facetno=NULL,add.modx.values=TRUE){
# digits=3;xpos=0.7
info=getAspectRatio(p)
ratio=info$ratio
if(!is.null(facetno)) ratio=ratio*facetno
df$slope2=df$slope*ratio
df$radian=atan(df$slope2)
df$angle=df$radian*180/pi
df$label=paste0(round(df$slope,digits),predc,
ifelse(df$intercept>=0," + "," - "),
round(df$intercept,digits))
str(df)
print(df[[1]])
if(add.modx.values) df$label=paste0(df$label," | ",colnames(df)[1]," = ",
ifelse(is.numeric(df[[1]]),round(df[[1]],digits),
ifelse(is.factor(df[[1]]),labels(df[[1]])[df[[1]]],df[[1]])))
count=nrow(df)
x=info$xmin+(info$xmax-info$xmin)*xpos
if(length(xpos)==1){
x=rep(x,count)
}
y=c()
for(i in seq_along(df$slope)){
y=c(y,df$slope[i]*x[i]+df$intercept[i])
}
y
df$x=x
df$y=y
attr(df,"ratio")=ratio
df
}
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species+Petal.Length,data=iris)
ggPredict2(fit,pred=Sepal.Width,modx=Species,digits=3)
df=iris[c(1,52,101),]
df
df[[5]]
levels(df[[5]])[df[[5]]]
levels(df[[5]])[df[[5]]]
source('~/ownCloud/Documents/processR/R/ggPredict2.R', echo=TRUE)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species+Petal.Length,data=iris)
ggPredict2(fit,pred=Sepal.Width,modx=Species,digits=3)
df=iris[c(1,52,101),]
levels(df[[5]])[df[[5]]]
df[[5]]
levels(df[[5]])[df[[5]]]
df
df$label=paste0("label",1:3)
df
df$label=paste0(df$label," | ",colnames(df)[1]," = ",
ifelse(is.numeric(df[[5]]),round(df[[5]],digits),
ifelse(is.factor(df[[5]]),levels(df[[5]])[df[[5]]],df[[5]])))
df
levels(df[[5]])[df[[5]]]
df$label=paste0("label",1:3)
df$label=paste0(df$label,colnames(df),"=",df[[5]])))
df$label=paste0(df$label,colnames(df),"=",df[[5]])
df$label=paste0(df$label,colnames(df)[1],"=",df[[5]])
df$label
is.factor(df[[5]])
df$label=paste0(df$label," | ",colnames(df)[1]," = ",
ifelse(is.numeric(df[[5]]),round(df[[5]],digits),df[[5]]))
df$label
df
if(is.numeric(df[[5]])){
df$labels2=round(df[[5]],digits)
} else if(is.factor(df[[5]])){
df$labels2=levels(df[[5]])[df[[5]]]
} else{
df$labels2=df[[5]]
}
df
source('~/ownCloud/Documents/processR/R/ggPredict2.R', echo=TRUE)
library(processR)
devtools::document()
library(processR)
fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
require(TH.data)
fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
ggPredict2(fit)
devtools::document()
devtools::document()
library(processR)
require(TH.data)
fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
ggPredict2(fit)
fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
#'Make new formula
#'@param fit An object of class lm or glm
#'@param predictors Names of variables to exclude
#'@examples
#'fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
#'
getNewFormula=function(fit,predictors=NULL){
temp=names(fit$coef)[-1]
temp
for( i in seq_along(predictors)){
select=which(!str_detect(temp,predictors[i]))
select
temp=temp[select]
}
result=paste0(names(fit$model)[1],"~",paste(temp,collapse="+"))
result
}
fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
getNewFormula(fit)
class(fit)
result=paste0(class(fit)[1],"(",names(fit$model)[1],"~",paste(temp,collapse="+"))
temp=names(fit$coef)[-1]
temp
for( i in seq_along(predictors)){
select=which(!str_detect(temp,predictors[i]))
select
temp=temp[select]
}
class(fit)
result=paste0(class(fit)[1],"(",names(fit$model)[1],"~",paste(temp,collapse="+"))
predictors<-NULL
# predictors<-NULL
temp=names(fit$coef)[-1]
temp
for( i in seq_along(predictors)){
select=which(!str_detect(temp,predictors[i]))
select
temp=temp[select]
}
class(fit)
result=paste0(class(fit)[1],"(",names(fit$model)[1],"~",paste(temp,collapse="+"))
result
str(fit)
fot$formula
fit$formula
devtools::document()
library(processR)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
library(processR)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
library(processR)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
library(processR)
library(processR)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
ggPredict2(fit,modx=wt,labels=paste0("label",1:3),xpos=c(0.5,0.7,0.5),vjust=c(-0.5,-0.5,1.5))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
system("grep -r 'findName' *")
devtools::check()
devtools::document()
library(processR)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
library(rlang)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
library(processR)
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::use_vignette("introduction")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(processR)
pmacro$no[-1]
knitr::opts_chunk$set(echo = TRUE,comment=NA,message=FALSE,
warning=FALSE,
fig.with=6,fig.asp=0.618,
out.width="70%",fig.align="center")
df=data.frame(Rcode="Y ~ X")
df2=data.frame(Equation= " Y ~ b * X")
require(processR)
require(predict3d)
statisticalDiagram(0)
conceptDiagram(0)
require(processR)
require(predict3d)
conceptDiagram(0)
pmacroModel(0)
statisticalDiagram(0)
knitr::knit("./vignettes/processR.Rmd", "README.md")
library(processR)
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
# fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(Y="mpg",X="wt",W="hp",Z="am")
# modelsSummary(list(fit1),labels=labels)
modelsSummary(list(fit1,fit2),labels=labels)
devtools::release()
