labels=list(X="protest",W="sexism",M="respappr",Y="liking")
catlabels=c("No protest","Individual protest","Collective protest")
condPlotCat(labels=labels,yvar="M",data=protest,mode=3)
condPlotCat(labels=labels,yvar="M",data=protest,mode=3,ceno=2)
condPlotCat(labels=labels,yvar="M",data=protest,mode=3,ceno=c(1,2))
catlabels2=c("No protest","Individual protest","Collective protest","Any protest")
catlabels2=c("No protest","Individual protest","Collective protest","Any protest")
condPlotCat(labels=labels,yvar="M",data=protest,mode=3,catlabels=catlabels2,ceno=c(1,2))
devtools::document()
devtools::check()
condPlotCat(labels=labels,data=protest,catlabels=catlabels,add.slopelabel=TRUE,xpos=c(0.3,0.7,0.7),add.point=FALSE,add.vlines=FALSE,add.anova=FALSE,add.arrow=FALSE)
condPlotCat(labels=labels,data=protest,catlabels=catlabels,add.slopelabel=TRUE,xpos=c(0.3,0.7,0.7),add.point=FALSE,add.vlines=FALSE,add.anova=FALSE,add.arrow=FALSE)
condPlotCat(labels=labels,data=protest,catlabels=catlabels,add.anova=FALSE,add.arrow=FALSE)
devtools::document()
devtools::check()
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
moderator=list(name="sexism",site=list(c("a","c")))
data1=addCatVars(protest,"protest",mode=3)
eq=catMediation(X="protest",M="respappr",Y="liking",moderator=moderator,data=protest,maxylev=6,mode=1)
fit=eq2fit(eq,data=data1)
modelsSummary2(fit,labels=labels)
drawCatModel(fit,labels=labels,whatLabel="name")
drawCatModel(fit,labels=labels)
drawCatModel(fit,labels=labels,whatLabel="name")
drawCatModel(fit,labels=labels)
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
fit=makeCatModel(labels=labels,data=protest)
drawCatModel(fit,labels=labels,maxypos=0.6,minypos=0.2)
drawCatModel(fit,labels=labels,whatLabel="name",maxypos=0.6,minypos=0.2)
labels=list(X="protest",W="sexism",Y="liking")
fit=makeCatModel(labels=labels,data=protest)
drawCatModel(fit,labels=labels,maxypos=0.6,minypos=0.2)
drawCatModel(fit,labels=labels,whatLabel="name",maxypos=0.6,minypos=0.2)
model=catMediation(X="protest",M="respappr",Y="liking",moderator=moderator,data=protest,maxylev=6)
cat(model)
library(processR)
library(lavaan)
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
moderator=list(name="sexism",site=list(c("a","c")))
data1=addCatVars(protest,"protest",mode=3)
eq=catMediation(X="protest",M="respappr",Y="liking",moderator=moderator,data=protest,maxylev=6,mode=1)
model=catMediation(X="protest",M="respappr",Y="liking",moderator=moderator,data=protest,maxylev=6)
cat(model)
library(processR)
model=catMediation(X="protest",M="respappr",Y="liking",moderator=moderator,data=protest,maxylev=6,range=FALSE)
cat(model)
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
moderator=list(name="sexism",site=list(c("a","c")))
data1=addCatVars(protest,"protest",mode=3)
model=catMediation(X="protest",M="respappr",Y="liking",moderator=moderator,data=protest,maxylev=6,range=FALSE)
cat(model)
semfit=sem(model=model,data=data1)
estimatesTable(semfit)
parameterEstimates(semfit)
df=parameterEstimates(semfit)
df=parameterEstimates(semfit)
df
modmedSummary(semfit)
semfit=sem(model=model,data=data1,se="bootstrap",boot=10)
semfit=sem(model=model,data=data1,se="bootstrap",bootstrap=10)
modmedSummary(semfit)
semfit=sem(model=model,data=data1)
df=parameterEstimates(semfit)
df=df[df$label!="",]
df
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
moderator=list(name="sexism",site=list(c("a","b","c")))
data1=addCatVars(protest,"protest",mode=3)
eq=catMediation(X="protest",M="respappr",Y="liking",moderator=moderator,data=protest,maxylev=6,mode=1)
model=catMediation(X="protest",M="respappr",Y="liking",moderator=moderator,data=protest,maxylev=6,range=FALSE)
cat(model)
semfit=sem(model=model,data=data1)
df=parameterEstimates(semfit)
df=df[df$label!="",]
df
df=df[str_detect(df$label,"direct"),]
df
df=df[str_detect(df$label,"direct"),c(3,4)]
df
str_replace_all(df$rhs,"sexism.mean","W")
df$rhs=str_replace_all(df$rhs,"sexism.mean","W")
df
df$eq=df$rhs
system("grep -r 'strGrouping' *")
system("grep -r 'strGrouping=' *")
#' Remove parentheses
#' @param string A character vector
#' @export
removeParentheses=function(string){
res=c()
for(i in seq_along(string)){
x=string[i]
x=str_replace(x,fixed(")"),"")
x=unlist(str_split(x,fixed("*(")))
x=unlist(str_split(x,fixed("+")))
x
for(i in seq_along(x)){
if(i==1){
if(length(x)==1) {
temp=x[1]
} else{
temp=NULL
}
} else {
temp=paste0(x[1],"*",x[i])
}
res=c(res,temp)
}
}
res
}
df
removeParentheses(df$eq[1])
string="(a1+a4*W)*(b1+b3*W)"
string
string=df$eq[1]
df$eq[1]
strsplit(string,")*(")
strsplit(string,fixed(")*("))
strsplit(string,"\\)\\*\\(")
unlist(strsplit(string,"\\)\\*\\("))
require(tidyverse)
string %>% strsplit(string,"\\)\\*\\(") %>% unlist()
string %>% strsplit("\\)\\*\\(") %>% unlist()
string %>% strsplit("\\)\\*\\(") %>% unlist() %>% str_replace_all("\\(","")
string %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")
string %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")
eq<- string %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")
eq
eq %>% strsplit("\\+")
eq %>% strsplit("\\+") %>% unlist()
eq %>% strsplit("\\+")
eq<- string %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")  %>%
strsplit("\\+")
eq
temp=c()
for(i in 1:length(eq[[1]])){
for(j in 1:length(eq[[2]])){
temp=c(temp,paste(eq[[1]][i],eq[[2]][j],sep="*"))
}
}
temp
str_detect_all(temp,"W")
require(stringr)
str_detect_all(temp,"W")
str_count(temp,"W")
temp[str_count(temp,"W")==0]
intercept=temp[str_count(temp,"W")==0]
intercept=paste0(temp[str_count(temp,"W")==0],collapse="+")
slope=paste0(temp[str_count(temp,"W")==1],collapse="+")
slope
slope=str_replace_all(slope,"\\*W","")
slope
quadratic=paste0(temp[str_count(temp,"W")==2],collapse="+")
quadratic
quadratic=str_replace_all(quadratic,"\\*W","")
quadratic
string=df$eq[1]
unfold=function(string,var="W"){
eq<- string %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")  %>%
strsplit("\\+")
temp=c()
for(i in 1:length(eq[[1]])){
for(j in 1:length(eq[[2]])){
temp=c(temp,paste(eq[[1]][i],eq[[2]][j],sep="*"))
}
}
intercept=paste0(temp[str_count(temp,var)==0],collapse="+")
slope=paste0(temp[str_count(temp,var)==1],collapse="+")
slope=str_replace_all(slope,paste0("\\*","W"),"")
quadratic=paste0(temp[str_count(temp,var)==2],collapse="+")
quadratic=str_replace_all(quadratic,paste0("\\*","W"),"")
list(temp,intercept,slope,quadratic)
}
unfold=function(string,var="W"){
eq<- string %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")  %>%
strsplit("\\+")
temp=c()
for(i in 1:length(eq[[1]])){
for(j in 1:length(eq[[2]])){
temp=c(temp,paste(eq[[1]][i],eq[[2]][j],sep="*"))
}
}
intercept=paste0(temp[str_count(temp,var)==0],collapse="+")
slope=paste0(temp[str_count(temp,var)==1],collapse="+")
slope=str_replace_all(slope,paste0("\\*",var),"")
quadratic=paste0(temp[str_count(temp,var)==2],collapse="+")
quadratic=str_replace_all(quadratic,paste0("\\*",var),"")
list(temp,intercept,slope,quadratic)
}
string=df$eq[1]
unfold(string)
res=list(intercept,slope,quadratic)
res=lapply(list,function(x){
ifelse(str_detect(x,"\\+"),paste0("(",x,")"),x)
})
res
res=list(intercept,slope,quadratic)
res
res=lapply(res,function(x){
ifelse(str_detect(x,"\\+"),paste0("(",x,")"),x)
})
res
res=list(intercept,slope,quadratic)
res
res1=lapply(res,function(x){
ifelse(str_detect(x,"\\+"),paste0("(",x,")"),x)
})
res1
equation=paste0(res1[[1]],paste0(res1[[2]],"*",var),paste0(res1[[3]],"*",var,"^2"),collapse="+")
equation=paste(res1[[1]],paste0(res1[[2]],"*",var),paste0(res1[[3]],"*",var,"^2"),collapse="+")
res1
equation=paste(c(res1[[1]],paste0(res1[[2]],"*",var),paste0(res1[[3]],"*",var,"^2")),collapse="+")
res1[[1]]
paste0(res1[[2]],"*",var)
res1
var
var="W"
paste0(res1[[2]],"*",var)
equation=paste(res1[[1]],paste0(res1[[2]],"*",var),paste0(res1[[3]],"*",var,"^2")),collapse="+")
equation=paste(c(res1[[1]],paste0(res1[[2]],"*",var),paste0(res1[[3]],"*",var,"^2")),collapse="+")
equation
df
string=df$eq[1]
string=df$eq[2]
eq<- string %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")  %>%
strsplit("\\+")
eq
temp=c()
temp=c()
if(length(eq)==1){
temp=eq[[1]]
} else if(length(eq)==2){
for(i in 1:length(eq[[1]])){
for(j in 1:length(eq[[2]])){
temp=c(temp,paste(eq[[1]][i],eq[[2]][j],sep="*"))
}
}
}
intercept=paste0(temp[str_count(temp,var)==0],collapse="+")
slope=paste0(temp[str_count(temp,var)==1],collapse="+")
slope=str_replace_all(slope,paste0("\\*",var),"")
quadratic=paste0(temp[str_count(temp,var)==2],collapse="+")
quadratic=str_replace_all(quadratic,paste0("\\*",var),"")
res=list(intercept,slope,quadratic)
res
res1=lapply(res,function(x){
ifelse(str_detect(x,"\\+"),paste0("(",x,")"),x)
})
equation=paste(c(res1[[1]],paste0(res1[[2]],"*",var),paste0(res1[[3]],"*",var,"^2")),collapse="+")
res$equation=equation
res
equation=paste(equation,collapse="+")
equation
res=list(intercept,slope,quadratic)
res
res1=lapply(res,function(x){
ifelse(str_detect(x,"\\+"),paste0("(",x,")"),x)
})
equation=c()
if(res1[[1]]!="") equation=c(equation,res1[[1]])
if(res1[[2]]!="") equation=c(equation,paste0(res1[[2]],"*",var))
if(res1[[3]]!="") equation=c(equation,paste0(res1[[3]],"*",var,"^2"))
equation=paste(equation,collapse="+")
equation
unfold=function(string,var="W"){
eq<- string %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")  %>%
strsplit("\\+")
temp=c()
if(length(eq)==1){
temp=eq[[1]]
} else if(length(eq)==2){
for(i in 1:length(eq[[1]])){
for(j in 1:length(eq[[2]])){
temp=c(temp,paste(eq[[1]][i],eq[[2]][j],sep="*"))
}
}
}
intercept=paste0(temp[str_count(temp,var)==0],collapse="+")
slope=paste0(temp[str_count(temp,var)==1],collapse="+")
slope=str_replace_all(slope,paste0("\\*",var),"")
quadratic=paste0(temp[str_count(temp,var)==2],collapse="+")
quadratic=str_replace_all(quadratic,paste0("\\*",var),"")
res=list(intercept,slope,quadratic)
res
res1=lapply(res,function(x){
ifelse(str_detect(x,"\\+"),paste0("(",x,")"),x)
})
equation=c()
if(res1[[1]]!="") equation=c(equation,res1[[1]])
if(res1[[2]]!="") equation=c(equation,paste0(res1[[2]],"*",var))
if(res1[[3]]!="") equation=c(equation,paste0(res1[[3]],"*",var,"^2"))
equation=paste(equation,collapse="+")
equation
}
unfold=function(string,var="W"){
result=c()
for(i in seq_along(string)){
eq<- string %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")  %>%
strsplit("\\+")
temp=c()
if(length(eq)==1){
temp=eq[[1]]
} else if(length(eq)==2){
for(i in 1:length(eq[[1]])){
for(j in 1:length(eq[[2]])){
temp=c(temp,paste(eq[[1]][i],eq[[2]][j],sep="*"))
}
}
}
intercept=paste0(temp[str_count(temp,var)==0],collapse="+")
slope=paste0(temp[str_count(temp,var)==1],collapse="+")
slope=str_replace_all(slope,paste0("\\*",var),"")
quadratic=paste0(temp[str_count(temp,var)==2],collapse="+")
quadratic=str_replace_all(quadratic,paste0("\\*",var),"")
res=list(intercept,slope,quadratic)
res
res1=lapply(res,function(x){
ifelse(str_detect(x,"\\+"),paste0("(",x,")"),x)
})
equation=c()
if(res1[[1]]!="") equation=c(equation,res1[[1]])
if(res1[[2]]!="") equation=c(equation,paste0(res1[[2]],"*",var))
if(res1[[3]]!="") equation=c(equation,paste0(res1[[3]],"*",var,"^2"))
equation=paste(equation,collapse="+")
result=c(result,equation)
}
result
}
df
unfold=function(string,var="W"){
result=c()
for(i in seq_along(string)){
eq<- string %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")  %>%
strsplit("\\+")
temp=c()
if(length(eq)==1){
temp=eq[[1]]
} else if(length(eq)==2){
for(i in 1:length(eq[[1]])){
for(j in 1:length(eq[[2]])){
temp=c(temp,paste(eq[[1]][i],eq[[2]][j],sep="*"))
}
}
}
intercept=paste0(temp[str_count(temp,var)==0],collapse="+")
slope=paste0(temp[str_count(temp,var)==1],collapse="+")
slope=str_replace_all(slope,paste0("\\*",var),"")
quadratic=paste0(temp[str_count(temp,var)==2],collapse="+")
quadratic=str_replace_all(quadratic,paste0("\\*",var),"")
res=list(intercept,slope,quadratic)
res
res1=lapply(res,function(x){
ifelse(str_detect(x,"\\+"),paste0("(",x,")"),x)
})
equation=c()
if(res1[[1]]!="") equation=c(equation,res1[[1]])
if(res1[[2]]!="") equation=c(equation,paste0(res1[[2]],"*",var))
if(res1[[3]]!="") equation=c(equation,paste0(res1[[3]],"*",var,"^2"))
equation=paste(equation,collapse="+")
result=c(result,equation)
}
result
}
unfold(df$eq)
df$eq
unfold=function(string,var="W"){
result=c()
for(i in seq_along(string)){
eq<- string[i] %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")  %>%
strsplit("\\+")
temp=c()
if(length(eq)==1){
temp=eq[[1]]
} else if(length(eq)==2){
for(i in 1:length(eq[[1]])){
for(j in 1:length(eq[[2]])){
temp=c(temp,paste(eq[[1]][i],eq[[2]][j],sep="*"))
}
}
}
intercept=paste0(temp[str_count(temp,var)==0],collapse="+")
slope=paste0(temp[str_count(temp,var)==1],collapse="+")
slope=str_replace_all(slope,paste0("\\*",var),"")
quadratic=paste0(temp[str_count(temp,var)==2],collapse="+")
quadratic=str_replace_all(quadratic,paste0("\\*",var),"")
res=list(intercept,slope,quadratic)
res
res1=lapply(res,function(x){
ifelse(str_detect(x,"\\+"),paste0("(",x,")"),x)
})
equation=c()
if(res1[[1]]!="") equation=c(equation,res1[[1]])
if(res1[[2]]!="") equation=c(equation,paste0(res1[[2]],"*",var))
if(res1[[3]]!="") equation=c(equation,paste0(res1[[3]],"*",var,"^2"))
equation=paste(equation,collapse="+")
result=c(result,equation)
}
result
}
unfold(df$eq)
unfold=function(string,var="W"){
result=c()
for(i in seq_along(string)){
eq<- string[i] %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")  %>%
strsplit("\\+")
temp=c()
if(length(eq)==1){
temp=eq[[1]]
} else if(length(eq)==2){
for(i in 1:length(eq[[1]])){
for(j in 1:length(eq[[2]])){
temp=c(temp,paste(eq[[1]][i],eq[[2]][j],sep="*"))
}
}
}
intercept=paste0(temp[str_count(temp,var)==0],collapse="+")
slope=paste0(temp[str_count(temp,var)==1],collapse="+")
slope=str_replace_all(slope,paste0("\\*",var),"")
quadratic=paste0(temp[str_count(temp,var)==2],collapse="+")
quadratic=str_replace_all(quadratic,paste0("\\*",var),"")
res=list(intercept,slope,quadratic)
res
res1=lapply(res,function(x){
ifelse(str_detect(x,"\\+"),paste0("(",x,")"),x)
})
equation=c()
if(res1[[1]]!="") equation=c(equation,res1[[1]])
if(res1[[2]]!="") equation=c(equation,paste0(res1[[2]],"*",var))
if(res1[[3]]!="") equation=c(equation,paste0(res1[[3]],"*",var,"^2"))
equation=paste(equation,collapse="+")
result=c(result,equation)
}
result
}
#' Unfold equations
#' @param string Character vectors with equation
#' @param var name of variable
#' @importFrom stringr str_count
unfold=function(string,var="W"){
result=c()
for(i in seq_along(string)){
eq<- string[i] %>% strsplit("\\)\\*\\(") %>%
unlist() %>%
str_replace_all("\\(","") %>%
str_replace_all("\\)","")  %>%
strsplit("\\+")
temp=c()
if(length(eq)==1){
temp=eq[[1]]
} else if(length(eq)==2){
for(i in 1:length(eq[[1]])){
for(j in 1:length(eq[[2]])){
temp=c(temp,paste(eq[[1]][i],eq[[2]][j],sep="*"))
}
}
}
intercept=paste0(temp[str_count(temp,var)==0],collapse="+")
slope=paste0(temp[str_count(temp,var)==1],collapse="+")
slope=str_replace_all(slope,paste0("\\*",var),"")
quadratic=paste0(temp[str_count(temp,var)==2],collapse="+")
quadratic=str_replace_all(quadratic,paste0("\\*",var),"")
res=list(intercept,slope,quadratic)
res
res1=lapply(res,function(x){
ifelse(str_detect(x,"\\+"),paste0("(",x,")"),x)
})
equation=c()
if(res1[[1]]!="") equation=c(equation,res1[[1]])
if(res1[[2]]!="") equation=c(equation,paste0(res1[[2]],"*",var))
if(res1[[3]]!="") equation=c(equation,paste0(res1[[3]],"*",var,"^2"))
equation=paste(equation,collapse="+")
result=c(result,equation)
}
result
}
