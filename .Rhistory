colnames(z$x)=newnames
z
str(z)
class(z)
addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
z=ztable(x1)
z
newnames=c()
newModelNames=c()
ncgroup=c()
for(i in 1:count){
newnames=c(newnames,c("Coef","SE","t","p"))
newModelNames=c(newModelNames,modelNames[i])
ncgroup=c(ncgroup,4)
if(i<count) {
newnames=c(newnames,"")
newModelNames=c(newModelNames,"")
ncgroup=c(ncgroup,1)
}
}
class(z)
colnames(z$x)=newnames
z
addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
z=addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
for(i in 1:count){
for(j in 1:5){
z=spanCol(z,row=nrow(x1)+1-(j-1),from=2+(i-1)*5,to=5+(i-1)*5)
}
}
z
#' S3 method for class 'modelSummary'
#'@importFrom dplyr select
#'@export
ztable.modelSummary=function(x,...){
count=ncol(x)/4
count
modelNames=attr(x,"modelNames")
selected=c()
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
if(i<count) selected=c(selected,ncol(x))
}
x1 <- x %>% select(selected)
class(x1)="data.frame"
z=ztable(x1)
z
newnames=c()
newModelNames=c()
ncgroup=c()
for(i in 1:count){
newnames=c(newnames,c("Coef","SE","t","p"))
newModelNames=c(newModelNames,modelNames[i])
ncgroup=c(ncgroup,4)
if(i<count) {
newnames=c(newnames,"")
newModelNames=c(newModelNames,"")
ncgroup=c(ncgroup,1)
}
}
z=addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
class(z)
colnames(z$x)=newnames
z
for(i in 1:count){
for(j in 1:5){
z=spanCol(z,row=nrow(x1)+1-(j-1),from=2+(i-1)*5,to=5+(i-1)*5)
}
}
z
}
x
x=modelsSummary(fit,labels=labels)
str(x)
x
modelsSummaryTable(x)
x
ztable(x)
modelsSummaryTable(x)
ztable(x)
modelsSummaryTable(x)
ztable(x)
modelsSummaryTable(x)
ztable(x)
count=ncol(x)/4
count
modelsSummaryTable(x)
x
count=ncol(x)/4
count
modelNames=attr(x,"modelNames")
selected=c()
align=c("r")
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
align=c(align,c("c","c","c","r"))
if(i<count) {
selected=c(selected,ncol(x))
align=c(align,"c")
}
}
x1 <- x %>% select(selected)
class(x1)="data.frame"
align
align
align=c("r")
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
align=c(align,c("c","c","c","r"))
if(i<count) {
selected=c(selected,ncol(x))
align=c(align,"c")
}
}
print(align)
z=ztable(x1)
z
align=paste0(align,collapse = "")
z=ztable(x1,align=align)
z
newnames=c()
newModelNames=c()
ncgroup=c()
for(i in 1:count){
newnames=c(newnames,c("Coef","SE","t","p"))
newModelNames=c(newModelNames,modelNames[i])
ncgroup=c(ncgroup,4)
if(i<count) {
newnames=c(newnames,"")
newModelNames=c(newModelNames,"")
ncgroup=c(ncgroup,1)
}
}
z=addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
colnames(z$x)=newnames
z
for(i in 1:count){
for(j in 1:5){
z=spanCol(z,row=nrow(x1)+1-(j-1),from=2+(i-1)*5,to=5+(i-1)*5)
}
}
z
#' S3 method for class 'modelSummary'
#'@importFrom dplyr select
#'@export
ztable.modelSummary=function(x,...){
count=ncol(x)/4
count
modelNames=attr(x,"modelNames")
selected=c()
align=c("r")
for(i in 1:count){
if(i<count) x[[paste0("space",i)]]=""
start=(i-1)*4+1
selected=c(selected,start:(start+3))
align=c(align,c("c","r","r","r"))
if(i<count) {
selected=c(selected,ncol(x))
align=c(align,"c")
}
}
x1 <- x %>% select(selected)
class(x1)="data.frame"
align=paste0(align,collapse = "")
z=ztable(x1,align=align)
newnames=c()
newModelNames=c()
ncgroup=c()
for(i in 1:count){
newnames=c(newnames,c("Coef","SE","t","p"))
newModelNames=c(newModelNames,modelNames[i])
ncgroup=c(ncgroup,4)
if(i<count) {
newnames=c(newnames,"")
newModelNames=c(newModelNames,"")
ncgroup=c(ncgroup,1)
}
}
z=addcgroup(z,cgroup=newModelNames,n.cgroup=ncgroup)
colnames(z$x)=newnames
z
for(i in 1:count){
for(j in 1:5){
z=spanCol(z,row=nrow(x1)+1-(j-1),from=2+(i-1)*5,to=5+(i-1)*5)
}
}
z
}
ztable(x)
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(processR)
require(processR)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
model
cat(model)
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
library(processR)
model=tripleEquation(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
library(processR)
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
cat(model)
equations=regEquation(X="cond",M="pmi",Y="reaction")
pmacroModel(4,labels=labels)
require(lavaan)
semfit=sem(model=model,data=pmi)
pmacroModel(4,labels=labels)
equations=regEquation(X="cond",M="pmi",Y="reaction")
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est",digits=3)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est",digits=3)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
semfit=sem(model=model,data=pmi,se="boot")
summary(fit)
summary(semfit)
estimatesTable(semfit)
estimatesTable2(semfit)
estimatesTable(semfit)
pmacroModel(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
equations=regEquation(X="cond",M="pmi",Y="reaction")
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=disaster)
})
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
x=modelsSummary(fit)
x
x=modelsSummary(fit,labels=labels)
x
modelsSummaryTable(x)
ztable(x)
ztable::ztable(x)
z=ztable::ztable(x)
str(z)
modelsSummaryTable(x)
z
modelsSummaryTable(x)
z
library(processR)
z=ztable(x)
z
require(processR)
require(lavaan)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
semfit=sem(model=model,data=pmi,se="boot")
summary(semfit)
estimatesTable(semfit)
pmacroModel(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
equations=regEquation(X="cond",M="pmi",Y="reaction")
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
x=modelsSummary(fit,labels=labels)
modelsSummaryTable(x)
z=ztable(x)
z
require(ztable)
z=ztable(x)
z
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
equations=regEquation(X="cond",M="pmi",Y="reaction")
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
x=modelsSummary(fit,labels=labels)
modelsSummaryTable(x)
z=ztable(x)
z
devtools::document()
devtools::document()
devtools::check()
modelsSummaryTable(x)
z=ztable(x)
devtools::document()
library(processR)
require(processR)
require(lavaan)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
semfit=sem(model=model,data=pmi,se="boot")
summary(semfit)
estimatesTable(semfit)
pmacroModel(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
equations=regEquation(X="cond",M="pmi",Y="reaction")
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
x=modelsSummary(fit,labels=labels)
modelsSummaryTable(x)
ztable(x)
ztable::ztable(x)
z
z=ztable::ztable(x)
z
str(z)
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
x=modelsSummary(list(fit1))
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
fit3=lm(mpg~wt*hp*am,data=mtcars)
x=modelsSummary(list(fit1))
x
x=modelsSummary(list(fit1,fit2))
modelsSummaryTable(x,vanilla=FALSE)
x=modelsSummary(list(fit1,fit2,fit3))
modelsSummaryTable(x)
ztable(x)
require(ztable)
ztable(x)
modelsSummaryTable(x)
library(processR)
modelsSummaryTable(x)
ztable(x)
library(processR)
ztable(x)
modelsSummaryTable(x)
ztable(x)
ztable(x)
modelsSummaryTable(x)
ztable(x)
modelsSummaryTable(x)
ztable(x)
library(processR)
ztable(x)
modelsSummaryTable(x)
ztable(x)
library(processR)
library(processR)
modelsSummaryTable(x)
ztable(x)
library(processR)
ztable(x)
ztable(x)
library(processR)
library(processR)
library(processR)
require(processR)
require(lavaan)
require(ztable)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
semfit=sem(model=model,data=pmi,se="boot")
summary(semfit)
estimatesTable(semfit)
estimatesTable(semfit)
estimatesTable(semfit,digits=3)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
pmacroModel(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
equations=regEquation(X="cond",M="pmi",Y="reaction")
eq=unlist(strsplit(equations,"\n"))
fit=lapply(1:2,function(i) {
lm(as.formula(eq[i]),data=pmi)
})
x=modelsSummary(fit,labels=labels)
modelsSummaryTable(x)
z=ztable::ztable(x)
z
modelsSummaryTable(x)
z=ztable::ztable(x,family="serif")
z
ztable::ztable(x,family="serif")
modelsSummaryTable(x)
print(z,size=5)
print(z,size=4)
modelsSummaryTable(x)
iris1=addCatVars(iris,c("Species"))
iris3=addCatVars(iris,c("Species"),mode=3)
fit1=lm(Sepal.Length~Sepal.Width+D1+D2,data=iris1)
getYhat(fit1)
fit1=lm(Sepal.Length~D2*Sepal.Width+Sepal.Width*D1+Petal.Width,data=iris1)
getYhat(fit1)
fit3=lm(Sepal.Length~D2*Sepal.Width+Sepal.Width*D1+Petal.Width*D1+Petal.Width*D2,data=iris3)
getYhat(fit3,mode=3)
pmacroModel(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
statisticalDiagram(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
system("grep -r 'myarrow' *")
statisticalDiagram(4,labels=labels)
library(processR)
library(processR)
statisticalDiagram(4,labels=labels)
library(processR)
statisticalDiagram(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
library(processR)
statisticalDiagram(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
statisticalDiagram(4,labels=labels)
library(processR)
statisticalDiagram(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
library(processR)
statisticalDiagram(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
showModels()
library(processR)
library(processR)
showModels()
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
statisticalDiagram(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
statisticalDiagram(4,labels=labels)
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
statisticalDiagram(4,labels=labels)
pmi$reaction[pmi$cond==1,]
pmi$reaction[pmi$cond==1]
mean(pmi$reaction[pmi$cond==1])
equations=regEquation(X="cond",M="pmi",Y="reaction")
eq=unlist(strsplit(equations,"\n"))
eq
eq[2]
fit[[2]]
getYhat(fit[[2]])
getYhat(fit[[2]],group="cond")
statisticalDiagram(4,labels=labels,fit=semfit,whatLabel = "est")
cat(model)
semfit=sem(model=model,data=pmi,se="boot")
summary(semfit)
semfit=sem(model=model,data=pmi)
semfit=sem(model=model,data=pmi)
summary(semfit)
out<-bootstrapLavaan(semfit,R=10,FUN=function(x){
standardizedSolution(x)$est},verbose=TRUE)
out
semfit=sem(model=model,data=pmi)
summary(semfit)
standardizedSolution(semfit)
standardizedSolution(semfit)$est
str(standardizedSolution(semfit)$est)
standardizedSolution(semfit)
standardizedSolution(semfit)$est
estimatesTable(semfit,digits=3)
out<-bootstrapLavaan(semfit,R=10)
out
cat(model)
model=tripleEquation(X="cond",M="pmi",Y="reaction")
cat(model)
out<-bootstrapLavaan(semfit,R=10)
out
out<-bootstrapLavaan(semfit)
out
str(out)
out<-bootstrapLavaan(semfit,R=10,FUN="coef[1:3]")
out<-bootstrapLavaan(semfit,R=10,FUN="coef")
str(out)
out<-bootstrapLavaan(semfit,R=1000,FUN="coef")
str(out)
str(out)
names(out)
out
out$a1
str(out)
out[,2]
out<-bootstrapLavaan(semfit,R=1000,FUN="coef")
str(out)
str(out)
hist(out[,2])
df=as.data.frame(out)
df
cat(model)
df$indirect=df$a1*df$b1
df
require(ggplot)
require(ggplot2)
ggplot(df,aes(x=indirect))+geom_histogram()
ggplot(df,aes(x=indirect))+geom_histogram()
ggplot(df,aes(x=indirect))+geom_histogram(col="cornsilk")
ggplot(df,aes(x=indirect))+geom_histogram(fill="cornsilk")
ggplot(df,aes(x=indirect))+geom_histogram(fill="cornsilk",color="gray")
quantile(df$indirect,probs=c(0.0025,0.9725))
semfit=sem(model=model,data=pmi,se="boot")
quantile(df$indirect,probs=c(0.0025,0.9725))
