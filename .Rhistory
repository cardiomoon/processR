yvar=names(fit$model)[1]
newdata=fit2newdata(fit,predictors,mode=mode,modx.values=modx.values,
mod2.values=mod2.values,colorn=colorn,maxylev=maxylev)
fitted=newdata
if(!is.null(modx) & !is.null(mod2)) {
fitted<-fitted %>% group_by(!! modx, !! mod2)
} else if(!is.null(mod2)) {
fitted<-fitted %>% group_by(!! mod2)
} else if(!is.null(modx)) {
fitted<-fitted %>% group_by(!! modx)
}
str(fitted)
predictors=c(modxc,mod2c)
if(length(predictors)>0){
formulaString=getNewFormula(fit,predictors)
newFormula=as.formula(formulaString)
} else{
newFormula=fit$terms
}
fitted<-fitted %>% do(coef=lm(newFormula,data=.)$coef[1:2])
coef=unlist(fitted$coef)
fitted$intercept=coef[seq(1,by=2,length.out=nrow(fitted))]
fitted$slope=coef[seq(2,by=2,length.out=nrow(fitted))]
print(fitted)
if(is.null(modx)){
p<-ggplot(data=newdata,aes_string(x=predc,y=yvar))
} else{
p<-ggplot(data=newdata,aes_string(x=predc,y=yvar,color=modxc,fill=modxc,group=modxc))
}
p<-p+  geom_line()
if(show.point==TRUE) p<-p+ geom_point(data=fit$model)
if(se==TRUE) p<-p+ geom_ribbon(aes(ymax=ymax,ymin=ymin,color=NULL),alpha=alpha)
if(!is.null(mod2c)) p<-p+eval(parse(text=paste0("facet_grid(~",mod2c,")")))
facetno<-NULL
if(!is.null(mod2c)) facetno=length(unique(fit$model[[mod2c]]))
fitted<-slope2angle(fitted,predc,p,xpos=xpos,digits=digits,
facetno=facetno,add.modx.values=add.modx.values)
if(!is.null(labels)){
if(length(labels)==nrow(fitted)) fitted$label=labels
}
# str(fitted)
if(show.text) p <- p+ geom_text(data=fitted,aes(x=x,y=y,angle=angle,label=label),vjust=vjust,...)
p<-p+ coord_fixed(ratio=attr(fitted,"ratio"))+theme_bw()
if(!is.null(attr(newdata,"caption"))) {
p<-p+labs(caption=paste0("Analysis assuming ",attr(newdata,"caption")))
}
p
}
#'Make angle data with slope data
#'@param df A data.frame
#'@param predc Name of predictor variable
#'@param p An object of class ggplot
#'@param xpos The relative x-axis position of labels. Should be within 0 to 1
#'@param digits integer indicating the number of decimal places
#'@param facetno Tne number of factes
#'@param add.modx.values Whether add name of moderator variable
slope2angle=function(df,predc,p,xpos=0.7,digits=3,facetno=NULL,add.modx.values=TRUE){
# digits=3;xpos=0.7
info=getAspectRatio(p)
ratio=info$ratio
if(!is.null(facetno)) ratio=ratio*facetno
df$slope2=df$slope*ratio
df$radian=atan(df$slope2)
df$angle=df$radian*180/pi
df$label=paste0(round(df$slope,digits),predc,
ifelse(df$intercept>=0," + "," - "),
round(df$intercept,digits))
str(df)
print(df[[1]])
if(add.modx.values) df$label=paste0(df$label," | ",colnames(df)[1]," = ",
ifelse(is.numeric(df[[1]]),round(df[[1]],digits),
ifelse(is.factor(df[[1]]),labels(df[[1]])[df[[1]]],df[[1]])))
count=nrow(df)
x=info$xmin+(info$xmax-info$xmin)*xpos
if(length(xpos)==1){
x=rep(x,count)
}
y=c()
for(i in seq_along(df$slope)){
y=c(y,df$slope[i]*x[i]+df$intercept[i])
}
y
df$x=x
df$y=y
attr(df,"ratio")=ratio
df
}
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species+Petal.Length,data=iris)
ggPredict2(fit,pred=Sepal.Width,modx=Species,digits=3)
df=iris[c(1,52,101),]
df
df[[5]]
levels(df[[5]])[df[[5]]]
levels(df[[5]])[df[[5]]]
source('~/ownCloud/Documents/processR/R/ggPredict2.R', echo=TRUE)
fit=lm(Sepal.Length~Sepal.Width*Petal.Width*Species+Petal.Length,data=iris)
ggPredict2(fit,pred=Sepal.Width,modx=Species,digits=3)
df=iris[c(1,52,101),]
levels(df[[5]])[df[[5]]]
df[[5]]
levels(df[[5]])[df[[5]]]
df
df$label=paste0("label",1:3)
df
df$label=paste0(df$label," | ",colnames(df)[1]," = ",
ifelse(is.numeric(df[[5]]),round(df[[5]],digits),
ifelse(is.factor(df[[5]]),levels(df[[5]])[df[[5]]],df[[5]])))
df
levels(df[[5]])[df[[5]]]
df$label=paste0("label",1:3)
df$label=paste0(df$label,colnames(df),"=",df[[5]])))
df$label=paste0(df$label,colnames(df),"=",df[[5]])
df$label=paste0(df$label,colnames(df)[1],"=",df[[5]])
df$label
is.factor(df[[5]])
df$label=paste0(df$label," | ",colnames(df)[1]," = ",
ifelse(is.numeric(df[[5]]),round(df[[5]],digits),df[[5]]))
df$label
df
if(is.numeric(df[[5]])){
df$labels2=round(df[[5]],digits)
} else if(is.factor(df[[5]])){
df$labels2=levels(df[[5]])[df[[5]]]
} else{
df$labels2=df[[5]]
}
df
source('~/ownCloud/Documents/processR/R/ggPredict2.R', echo=TRUE)
library(processR)
devtools::document()
library(processR)
fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
require(TH.data)
fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
ggPredict2(fit)
devtools::document()
devtools::document()
library(processR)
require(TH.data)
fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
ggPredict2(fit)
fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
#'Make new formula
#'@param fit An object of class lm or glm
#'@param predictors Names of variables to exclude
#'@examples
#'fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
#'
getNewFormula=function(fit,predictors=NULL){
temp=names(fit$coef)[-1]
temp
for( i in seq_along(predictors)){
select=which(!str_detect(temp,predictors[i]))
select
temp=temp[select]
}
result=paste0(names(fit$model)[1],"~",paste(temp,collapse="+"))
result
}
fit=glm(cens~pnodes*horTh,data=GBSG2,family=binomial)
getNewFormula(fit)
class(fit)
result=paste0(class(fit)[1],"(",names(fit$model)[1],"~",paste(temp,collapse="+"))
temp=names(fit$coef)[-1]
temp
for( i in seq_along(predictors)){
select=which(!str_detect(temp,predictors[i]))
select
temp=temp[select]
}
class(fit)
result=paste0(class(fit)[1],"(",names(fit$model)[1],"~",paste(temp,collapse="+"))
predictors<-NULL
# predictors<-NULL
temp=names(fit$coef)[-1]
temp
for( i in seq_along(predictors)){
select=which(!str_detect(temp,predictors[i]))
select
temp=temp[select]
}
class(fit)
result=paste0(class(fit)[1],"(",names(fit$model)[1],"~",paste(temp,collapse="+"))
result
str(fit)
fot$formula
fit$formula
devtools::document()
library(processR)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
library(processR)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
library(processR)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
library(processR)
library(processR)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
ggPredict2(fit,modx=wt,labels=paste0("label",1:3),xpos=c(0.5,0.7,0.5),vjust=c(-0.5,-0.5,1.5))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
system("grep -r 'findName' *")
devtools::check()
devtools::document()
library(processR)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
library(rlang)
fit=lm(mpg~hp*wt*cyl+carb+am,data=mtcars)
ggPredict2(fit,pred=hp,modx=wt,mod2=cyl,xpos=0.7)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
library(processR)
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::use_vignette("introduction")
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(processR)
pmacro$no[-1]
knitr::opts_chunk$set(echo = TRUE,comment=NA,message=FALSE,
warning=FALSE,
fig.with=6,fig.asp=0.618,
out.width="70%",fig.align="center")
df=data.frame(Rcode="Y ~ X")
df2=data.frame(Equation= " Y ~ b * X")
require(processR)
require(predict3d)
statisticalDiagram(0)
conceptDiagram(0)
require(processR)
require(predict3d)
conceptDiagram(0)
pmacroModel(0)
statisticalDiagram(0)
knitr::knit("./vignettes/processR.Rmd", "README.md")
library(processR)
library(processR)
fit1=lm(mpg~wt,data=mtcars)
fit2=lm(mpg~wt*hp,data=mtcars)
# fit3=lm(mpg~wt*hp*am,data=mtcars)
labels=list(Y="mpg",X="wt",W="hp",Z="am")
# modelsSummary(list(fit1),labels=labels)
modelsSummary(list(fit1,fit2),labels=labels)
devtools::release()
system("grep -r '#\'#' *")
system("grep -r '#\\'#' *")
system('grep -r "#\'#' *)
devtools::document()
devtools::check()
devtools::build_win()
devtools::release()
devtools::check_rhub()
devtools::release()
library(processR)
moderator=list(name="skeptic","motivation"  site=list(c("a")))
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator)
cat(model)
moderator=list(name=c("skeptic","motivation"),site=list(c("a")))
model=tripleEquation(X="frame",M="justify",Y="donate",moderator=moderator)
cat(model)
shiny::runApp('inst/showModels')
vars=c("negemot","sex","age")
tripleInteraction(vars)
vars=list(name=c("skeptic","motivation"),site=list(c("a")))
vars=list(name=c("skeptic","motivation"),site=list(c("a")))
model=tripleEquation(X="frame",M="justify",Y="donate",vars=vars)
cat(model)
labels=list(X="frame",M="justify",Y="donate",W="skeptic",Z="motivation")
pmacroModel(11,labels=labels)
pmacroModel(1)
library(processR)
pmacroModel(1)
pmacroModel(0,radx=0.1,rady=0.1)
statisticalDiagram(0,radx=0.1,rady=0.1)
pmacroModel(0,radx=0.1,rady=0.1)
statisticalDiagram(0,radx=0.1,rady=0.1)
showModels()
pmacro
pmacro
str(pmacro)
no=25:27
X=rep("X",3)
M=rep("Mi",3)
Y=rep("Y",3)
pmacroModel(11)
no=25:27
X=rep("X",3)
M=rep("Mi",3)
Y=rep("Y",3)
modName=c("W:V","W:V",:"W:V")
modSite=c("a:b","a,c:b","a,c:b")
pos=c("1,2","1,2","1,2")
pmacro2=data.frame(no,X,M,Y,modName,modSite,pos)
modName=c("W:V","W:V",:"W:V")
modSite=c("a:b","a,c:b","a,c:b")
pos=c("1,2","1,2","1,2")
pmacro2=data.frame(no,X,M,Y,modName,modSite,pos)
no=25:27
X=rep("X",3)
M=rep("Mi",3)
Y=rep("Y",3)
modName=c("W:V","W:V","W:V")
modSite=c("a:b","a,c:b","a,c:b")
pos=c("1,2","1,2","1,2")
pmacro2=data.frame(no,X,M,Y,modName,modSite,pos)
pmacro=rbind(pmacro,pmacro2)
pmacro
pmacroModel(25)
library(processR)
pmacroModel(25)
pmacroModel(26)
pmacroModel(27)
parrows
nodes
no=25:27
no1=11:13
no=c(25:27,32:34)
no1=(11:13,25:27)
no1=c(11:13,25:27)
no=c(25:27,32:34)
no1=c(11:13,25:27)
moreModels=data.frame(no,no1)
nodes
nodes[ndes$no==11,]
nodes[nodes$no==11,]
no=c(25:27)
name=rep("V",3)
xpos=c(1,1,1)
ypos=rep(0.62,3)
nodes2=data.frame(no,name,xpos,ypos,stringsAsFactors=FALSE)
nodes
nodes=rbind(nodes,nodes2)
no=c(32:34)
name=rep("V",3)
xpos=rep(1,3)
ypos=rep(0.62,3)
nodes2=data.frame(no,name,xpos,ypos,stringsAsFactors=FALSE)
nodes=rbind(nodes,nodes2)
tail(nodes)
parrows[parrows$no=11,]
parrows[parrows$no==11,]
statisticalModel(12)
statisticalDiagram(12)
statisticalDiagram(13)
statisticalDiagram(12)
statisticalDiagram(11)
statisticalDiagram(12)
statisticalDiagram(13)
statisticalDiagram(11)
nodes[nodes$no==11,]
devtools::use_data(pmacro,overwrite = TRUE)
pmacro
load("~/Documents/ownCloud/Documents/processR/data/pmacro.rda")
pmacro
nodes[nodes$no==11,]
no=rep(c(25:27),each=2)
no
name=rep(c("V","MiV"),3)
name
xpos=rep(c(0.9,1),3)
statisticalDiagram(11)
ypos=rep(0.14,6)
no=rep(c(25:27),each=2)
name=rep(c("V","MiV"),3)
xpos=rep(c(0.9,1),3)
ypos=rep(0.14,6)
nodes2=data.frame(no,name,xpos,ypos,stringsAsFactors=FALSE)
nodes2
nodes=rbind(nodes,nodes2)
tail(nodes)
statisticalDiagram(25)
parrows[parrows$no==11,]
no=rep(c(25:27),each=2)
name=rep(c("b2","b3i"),3)
start=rep(c("V","MiV"),3)
end=rep("Y",6)
labelpos=rep(0.5,6)
arrpos=rep(0.8,6)
parrows2=data.frame(no,name,start,end,labelpos,arrpos,stringsAsFactors = FALSE)
parrows=rbind(parrows,parrows2)
tail(parrows)
devtools::use_data(parrows,overwrite = TRUE)
devtools::use_data(nodes,overwrite = TRUE)
moreModels=data.frame(no,no1)
no=c(25:27,32:34)
no1=c(11:13,25:27)
moreModels=data.frame(no,no1)
devtools::use_data(moreModels,overwrite = TRUE)
result=no
moreModels$no1[moreModels$no==no,]
no=25
result=no
moreModels$no1[moreModels$no==no,]
modeModels
no=c(25:27,32:34)
no1=c(11:13,25:27)
moreModels=data.frame(no,no1)
moreModels
devtools::use_data(moreModels,overwrite = TRUE)
moreModels
no=25
result=no
modeModels
moreModels
modeModels
moreModels
moreModels$no1[moreModels$no==no,]
moreModels$no1[moreModels$no==no]
no=25
result=no
moreModels$no1[moreModels$no==no]
res=moreModels$no1[moreModels$no==no]
no
res=moreModels$no1[moreModels$no==no]
no
no=25
no
res=c(no,moreModels$no1[moreModels$no==no])
res
no=37
no=32
no
res=c(no,moreModels$no1[moreModels$no==no])
res
res=no
res=c(no,moreModels$no1[moreModels$no %in% no])
res
res=no
res=no
for( i in 1:4) {
res=c(res,moreModels$no1[moreModels$no %in% res])
}
res
no=32
res=no
for( i in 1:4) {
res=c(res,moreModels$no1[moreModels$no %in% res])
}
res
res=no
res=no
no=32
res=no
for( i in 1:4) {
res=c(res,moreModels$no1[moreModels$no %in% res])
res=unique(res)
}
res
library(processR)
devtools::document()
library(processR)
tail(nodes)
tail(arrows)
tail(parrows)
statisticalDiagram(25)
statisticalDiagram(26)
statisticalDiagram(27)
showModels()
nodes[nodes$no==11,]
nodes[nodes$no==11,]
nodes=editData(nodes)
nodes=editData::editdata(nodes)
nodes=editData::editData(nodes)
statisticalDiagram(11)
nodes=editData::editData(nodes)
statisticalDiagram(11)
nodes=editData::editData(nodes)
statisticalDiagram(11)
statisticalDiagram(12)
statisticalDiagram(13)
statisticalDiagram(11)
statisticalDiagram(12)
statisticalDiagram(13)
statisticalDiagram(11)
statisticalDiagram(12)
statisticalDiagram(13)
statisticalDiagram(25)
statisticalDiagram(26)
statisticalDiagram(27)
statisticalDiagram(11)
statisticalDiagram(12)
statisticalDiagram(13)
statisticalDiagram(25)
statisticalDiagram(26)
devtools::use_data(nodes,overwrite = TRUE)
showModels()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
runApp('inst/showModels')
