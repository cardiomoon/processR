#    temp=c(temp,names(labels)[str_detect(labels,estimateTable$Variables[i])])
# }
# temp
# estimateTable$start=temp
# estimateTable
arrows2
if(includeLatentVars){
arrows3<-full_join(arrows2,estimateTable,by=c("Predictors","Variables"))
arrows3
arrows3$no=  arrows3$no[1]
arrows3$name[is.na(arrows3$name)]=""
arrows3$start[is.na(arrows3$start)]=arrows3$Predictors[is.na(arrows3$start)]
arrows3$end[is.na(arrows3$end)]=arrows3$Variables[is.na(arrows3$end)]
arrows3$labelpos=0.5
arrows3$arrpos=0.84
arrows3$end=changeLabelName(arrows3$end,labels)
} else{
arrows3<-left_join(arrows2,estimateTable,by=c("Predictors","Variables"))
}
if(is.null(arrowslty)) {
arrows3$lty=ifelse(arrows3$p<0.05,1,3)
} else{
arrows3$lty=arrowslty
}
# print(arrows3)
}  else{
arrows2$lty=1
arrows3<-arrows2
if(!is.null(arrowslty)) arrows3$lty=arrowslty
}
if(arrowlabel){
if(whatLabel=="name") {
arrows3$label=arrows3$name
} else if(whatLabel=="est"){
arrows3$label=arrows3$B
} else if(whatLabel=="label"){
if((!is.null(arrowslabels))&(length(arrowslabels)==nrow(arrows3))){
arrows3$label=arrowslabels
} else{
arrows3$label=""
}
} else{
arrows3$label=arrows3[,ncol(arrows3)-1]
}
} else {
arrows3$label=""
}
if((!is.null(fit))&(includeLatentVars)){
nodes=addLatentNodes(nodes,fit,labels)
nodes=adjustPosNodes(nodes)
}
arrows3
nodes
drawStatDiagram(no=no,arrows=arrows3,nodes=nodes,labels=labels,nodeslabels=nodeslabels,
xmargin=xmargin,radx=radx,rady=rady,fit,addprime=addprime)
# print(nodes)
# print(arrows)
openplotmat()
drawArrows(arrows,nodes,xmargin=xmargin,rady=rady,radx=radx,addprime=addprime)
arrows=arrows3
# print(nodes)
# print(arrows)
openplotmat()
drawArrows(arrows,nodes,xmargin=xmargin,rady=rady,radx=radx,addprime=addprime)
LVnames=c()
if(!is.null(fit)) LVnames=extractLatentVarName(fit)
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx)
mid=c(xpos,nodes$ypos[i])
# label=ifelse(is.null(labels[[nodes$name[i]]]),nodes$name[i],labels[[nodes$name[i]]])
label=ifelse(no==1.1,nodes$name[i],findName(labels,nodeslabels=nodeslabels,name=nodes$name[i]))
# label=eval(parse(text=paste0("expression(italic(",label,"))")))
drawtext(mid,radx=radx,rady=rady,lab=label,latent=ifelse(label %in% LVnames,TRUE,FALSE))
if(no==1.1){
if(i<=nrow(nodes)){
label=findName(labels,nodeslabels=nodeslabels,name=nodes$name[i])
if(label!=nodes$name[i]) textplain(mid+c(0,-0.07),radx=radx,rady=rady,lab=label,latent=FALSE)
}
}
}
nodes
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
labels=list(X="wt",M="am",Y="mpg");name="MiX"
findName(labels=labels,nodeslabels=nodeslabels,name="MiX")
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
labels=list(X="wt",M="am",Y="mpg")
nodeslabels=list()
name="Mi"
exact=FALSE
result=NULL
if(length(labels)==0) {
result=name
} else if(length(nodeslabels)>0){
if(!is.null(nodeslabels[[name]])) {
result=nodeslabels[[name]]
}
} else if(!is.null(labels[[name]])) {
if(is.null(result)) result=labels[[name]]
}
if(is.null(result)){
if(!exact){
temp=c()
for(i in seq_along(nodeslabels)){
grep(names(nodeslabels)[i],name)
if(length(grep(names(nodeslabels)[i],name))>0)
temp=c(temp,nodeslabels[[names(nodeslabels[i])]])
temp
}
if(length(temp)==0){
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0)
temp=c(temp,labels[[names(labels[i])]])
temp
}
}
temp
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
} else{
result=name
}
}
result
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
# labels=list(X="wt",M="am",Y="mpg")
nodeslabels=list()
name="Mi"
exact=FALSE
result=NULL
if(length(labels)==0) {
result=name
} else if(length(nodeslabels)>0){
if(!is.null(nodeslabels[[name]])) {
result=nodeslabels[[name]]
}
} else if(!is.null(labels[[name]])) {
if(is.null(result)) result=labels[[name]]
}
if(is.null(result)){
if(!exact){
temp=c()
for(i in seq_along(nodeslabels)){
grep(names(nodeslabels)[i],name)
if(length(grep(names(nodeslabels)[i],name))>0)
temp=c(temp,nodeslabels[[names(nodeslabels[i])]])
temp
}
if(length(temp)==0){
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0)
temp=c(temp,labels[[names(labels[i])]])
temp
}
}
temp
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
} else{
result=name
}
}
result=NULL
if(length(labels)==0) {
result=name
} else if(length(nodeslabels)>0){
if(!is.null(nodeslabels[[name]])) {
result=nodeslabels[[name]]
}
} else if(!is.null(labels[[name]])) {
if(is.null(result)) result=labels[[name]]
}
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
# labels=list(X="wt",M="am",Y="mpg")
nodeslabels=list()
name="Mi"
exact=FALSE
result=NULL
if(length(labels)==0) {
result=name
} else if(length(nodeslabels)>0){
if(!is.null(nodeslabels[[name]])) {
result=nodeslabels[[name]]
}
} else if(!is.null(labels[[name]])) {
if(is.null(result)) result=labels[[name]]
}
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
# labels=list(X="wt",M="am",Y="mpg")
# nodeslabels=list()
name="Mi"
# exact=FALSE
labels[[name]]
# exact=FALSE
is.null(labels[[name]] )
# exact=FALSE
names(labels)
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
# labels=list(X="wt",M="am",Y="mpg")
# nodeslabels=list()
name="Mi"
result=NULL
if(length(labels)==0) {
result=name
} else if(length(nodeslabels)>0){
if(!is.null(nodeslabels[[name]])) {
result=nodeslabels[[name]]
}
} else if(name %in% names(labels)) {
if(is.null(result)) result=labels[[name]]
}
result
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
library(processR)
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
library(processR)
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
labels$M
labels
str(labels)
labels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
labels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
library(processR)
nodeslabels=list(X="Work\nIntensification",M="Cognitive\nAppraisal",Y="Emotional\nExhaustion")
statisticalDiagram(4,labels=nodeslabels)
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
statisticalDiagram(4,labels=labels)
labels=c(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
statisticalDiagram(4,labels=labels)
labels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
library(processR)
labels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
statisticalDiagram(4,labels=labels)
devtools::document()
devtools::check()
labels=list(X="GDPpp",M="Illit",Y="LifeEx")
nodeslabels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
#'@export
#'@examples
#'labels=list(X="wt",M="am",Y="mpg");name="MiX"
#'nodeslabels=list(X="weight",M="automatic",Y="milepergallon")
#'findName(labels=labels,nodeslabels=nodeslabels,name="MiX")
#'findName(labels=labels,name="MiX")
#'findName(labels=labels,nodeslabels=nodeslabels,name="M")
#'labels=list(X="GDPpp",M="Illit",Y="LifeEx")
#'nodeslabels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
#'findName(labels=labels,name="Mi")
findName=function(labels,nodeslabels=list(),name="MiX",exact=FALSE){
# labels=list(X="wt",M="am",Y="mpg")
# nodeslabels=list()
# name="Mi"
# exact=FALSE
result=NULL
if(length(labels)==0) {
result=name
} else if(length(nodeslabels)>0){
if(!is.null(nodeslabels[[name]])) {
result=nodeslabels[[name]]
}
} else if(name %in% names(labels)) {
if(is.null(result)) result=labels[[name]]
}
if((name=="Mi") &(is.null(result))){
if("M" %in% names(labels)) result=labels$M
}
if(is.null(result)){
if(!exact){
temp=c()
for(i in seq_along(nodeslabels)){
grep(names(nodeslabels)[i],name)
if(length(grep(names(nodeslabels)[i],name))>0)
temp=c(temp,nodeslabels[[names(nodeslabels[i])]])
temp
}
if(length(temp)==0){
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0)
temp=c(temp,labels[[names(labels[i])]])
temp
}
}
temp
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
} else{
result=name
}
}
result
}
labels=list(X="GDPpp",M="Illit",Y="LifeEx")
nodeslabels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
findName(labels=labels,nodeslabels=nodeslabels,name="Mi")
labels=list(X="GDPpp",M="Illit",Y="LifeEx")
nodeslabels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
# labels=list(X="wt",M="am",Y="mpg")
# nodeslabels=list()
name="Mi"
exact=FALSE
result=NULL
if(length(labels)==0) {
result=name
} else if(length(nodeslabels)>0){
if(!is.null(nodeslabels[[name]])) {
result=nodeslabels[[name]]
}
} else if(name %in% names(labels)) {
if(is.null(result)) result=labels[[name]]
}
result
result=NULL
if(length(labels)==0) {
result=name
} else if(length(nodeslabels)>0){
if(!is.null(nodeslabels[[name]])) {
result=nodeslabels[[name]]
}
} else if(name %in% names(labels)) {
if(is.null(result)) result=labels[[name]]
}
result
nodeslabels[["Mi"]]
#'@examples
#'labels=list(X="wt",M="am",Y="mpg");name="MiX"
#'nodeslabels=list(X="weight",M="automatic",Y="milepergallon")
#'findName(labels=labels,nodeslabels=nodeslabels,name="MiX")
#'findName(labels=labels,name="MiX")
#'findName(labels=labels,nodeslabels=nodeslabels,name="M")
#'labels=list(X="GDPpp",M="Illit",Y="LifeEx")
#'nodeslabels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
#'findName(labels=labels,name="Mi")
#'findName(labels=labels,nodeslabels=nodeslabels,name="Mi")
findName=function(labels,nodeslabels=list(),name="MiX",exact=FALSE){
# labels=list(X="wt",M="am",Y="mpg")
# nodeslabels=list()
# name="Mi"
# exact=FALSE
#
result=NULL
if(length(labels)==0) {
result=name
} else if(length(nodeslabels)>0){
if(!is.null(nodeslabels[[name]])) {
result=nodeslabels[[name]]
}
if((name=="Mi") &(is.null(result))){
result=nodeslabels[["M"]]
}
} else if(name %in% names(labels)) {
if(is.null(result)) result=labels[[name]]
}
if((name=="Mi") &(is.null(result))){
if("M" %in% names(labels)) result=labels$M
}
if(is.null(result)){
if(!exact){
temp=c()
for(i in seq_along(nodeslabels)){
grep(names(nodeslabels)[i],name)
if(length(grep(names(nodeslabels)[i],name))>0)
temp=c(temp,nodeslabels[[names(nodeslabels[i])]])
temp
}
if(length(temp)==0){
for(i in 1:length(labels)){
grep(names(labels)[i],name)
if(length(grep(names(labels)[i],name))>0)
temp=c(temp,labels[[names(labels[i])]])
temp
}
}
temp
if(length(temp)<1) {
result=name
} else{
result=paste0(temp,collapse=":")
}
} else{
result=name
}
}
result
}
labels=list(X="GDPpp",M="Illit",Y="LifeEx")
nodeslabels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
findName(labels=labels,nodeslabels=nodeslabels,name="Mi")
library(processR)
labels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
statisticalDiagram(4,labels=labels)
devtools::document()
devtools::check()
#' @param Y name of dependent variable
#' @param labels An optional list of variable names
#' @param data A data.frame
#' @param silent Logical. Whether or not show summary of regression tests
#' @param indirect.test Logical. Whether or not show results of bda::mediation.test
#' @importFrom bda mediation.test
#' @export
#' @examples
#' labels=list(X="cond",M="pmi",Y="reaction")
#' mediationBK(labels=labels,data=pmi,silent=FALSE)
mediationBK=function(X=NULL,M=NULL,Y=NULL,labels=list(),data,silent=TRUE,indirect.test=TRUE){
if(is.null(X)) X=labels$X
if(is.null(M)) M=labels$M
if(is.null(Y)) Y=labels$Y
dataname=substitute(data)
Paths=c("Path C (Total Effect)","Path A (X on M)","Path B (M on Y, controlling for X)","Path C' (Direct Effect, X on Y, controlling for M)")
if(!silent) cat("Step 1: ",Paths[1],"\n-Estimate the relationship between X on Y\n")
temp1=paste0("lm(",Y,"~",X,",data=",dataname,")")
fit1=eval(parse(text=temp1))
if(!silent) print(summary(fit1))
if(!silent) cat("\nStep 2:",Paths[2],"\n-Estimate the relationship between X on M\n")
temp2=paste0("lm(",M,"~",X,",data=",dataname,")")
fit2=eval(parse(text=temp2))
if(!silent) print(summary(fit2))
if(!silent) cat("\nStep 3:",Paths[3],"\n-Estimate the relationship between M on Y, controlling for X\n")
temp3=paste0("lm(",Y,"~",M,"+", X,",data=",dataname,")")
fit3=eval(parse(text=temp3))
if(!silent) print(summary(fit3))
if(!silent) cat("\nStep 4:",Paths[4],"\n-Estimate the relationship between Y on X, controlling for M\n")
fit=list(fit1,fit2,fit3)
equations=list(temp1,temp2,temp3)
results=list()
coef=c()
pvalue=c()
for(i in 1:3){
coef=c(coef,summary(fit[[i]])$coef[2,1])
pvalue=c(pvalue,summary(fit[[i]])$coef[2,4])
}
coef=c(coef,summary(fit[[i]])$coef[3,1])
pvalue=c(pvalue,summary(fit[[i]])$coef[3,4])
results[[1]]=ifelse(pvalue[1]<0.05,"Acceptable","Not satisfied")
results[[2]]=ifelse(pvalue[2]<0.05,"Acceptable","Not satisfied")
results[[3]]=ifelse(pvalue[3]<0.05,"Acceptable","Not satisfied")
if(pvalue[4]>0.05) {
results[[4]]="Complete mediation"
} else if(coef[4]<coef[1]) {
results[[4]]="Partial mediation"
} else results[[4]]="Not satisfied"
# cat("\nResults of Baron and Kenny Method\n")
# name=c("c","a","b","c'")
# for(i in 1:4){
#     temp=pvalue[i]
#     if(temp<0.001) temp="< 0.001"
#     else temp=paste0("= ",sprintf("%0.3f",temp))
#     cat("Step",i,":", Paths[i],":",name[i],"=",sprintf("%0.3f",coef[i]),"( p",temp,")\n")
# }
# cat("Result :",results[[4]],"\n")
indirect=bda::mediation.test(data[[M]],data[[X]],data[[Y]])
# if(indirect.test){
#     cat("\nResults of bda::mediation.test\n\n")
#     print(indirect)
# }
result=list(labels=labels,fit=fit,equations=equations,coef=coef,pvalue=pvalue,results=results,indirect=indirect)
class(result)="mediationBK"
invisible(result)
}
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
mediationBK(labels=labels,data=pmi,silent=FALSE)
result=mediationBK(labels=labels,data=pmi,silent=FALSE)
result
result=mediationBK(labels=labels,data=pmi,silent=FALSE)
result
summary(result)
plot(result)
plot(result,type=1)
result
library(processR)
labels=list(X="cond",M="pmi",Y="reaction")
result=mediationBK(labels=labels,data=pmi)
plot(result,type=1)
plot(result)
plot(result,type=1,whatLabel="label",arrowslabels="c",addprime=FALSE)
plot(result,whatLabel="label",arrowslabels=c("a","b","c"))
summary(result)
modelsSummaryTable(result)
modelsSummaryTable(result$fit)
modelsSummaryTable(labels=labels,result$fit)
devtools::document()
devtools::check()
