library(processR)
string="(a1+a3*age.mean)*(b1+b3*age.mean)"
extractIMM(string)
string="(a1+a3*skeptic.mean)*(b1+b2*skeptic.mean+b4*Z.mean)"
extractIMM(string)
string="(a1+a3*age.mean)*(b)"
extractIMM(string)
string="(a1+a3*4.12)*(b)"
extractIMM(string)
string="(a)*(b)"
extractIMM(string)
require(processR)
labels=list(X="wintense",Mi="cogapp",Y="emotion")
nodeslabels=list(X="Work\nIntensity",Mi="Cognitive\nAppraisal",Y="Emotional\nExhaustion")
statisticalDiagram(4,labels=labels)
statisticalDiagram(4,labels=nodeslabels)
statisticalDiagram(4,labels=labels,nodeslabels=nodeslabels)
library(processR)
library(lavaan)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
covar=NULL
model=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2)
semfit=sem(model,data=disaster)
table=estimatesTable(semfit)
table
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2,mode=1)
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2,mode=1)
cat(eq)
fit=eq2fit(eq,data=disaster)
fit
modelsSummary(fit)
modelsSummary(fit,labels=labels)
res=modelsSummary(fit,labels=labels)
res
str(res)
res=modelsSummary2(fit,labels=labels)
str(res)
res
res=modelsSummary(fit,labels=labels)
res
str(res)
rwonames(res)
rownames(res)
res=modelsSummary2(fit,labels=labels)
str(res)
rownames(res)
res=modelsSummary2(fit,labels=labels)
str(res)
table=estimatesTable(semfit)
table
res=modelsSummary2(fit,labels=labels)
str(res)
res=modelsSummary2(fit,labels=labels)
res
str(res)
res$name1
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2,mode=1)
cat(eq)
fit=eq2fit(eq,data=disaster)
res=modelsSummary2(fit,labels=labels)
res
count=length(fit)
count
fit
i=1
fit[[i]]
str(fit[[i]])
fit[[i]]$terms
fit[[i]]$model
names(fit[[i]]$model)
count=length(fit)
count
Y=c()
fit
for(i in 1:count){
Y=c(Y,names(fit[[i]]$model)[1])
}
Y
res=modelsSummary2(fit,labels=labels)
str(res)
res$name1
res=modelsSummary2(fit,labels=labels)
res=res[res$names1!="Constant",]
res
str(res)
res=modelsSummary2(fit,labels=labels)
str(res)
class(res)="data.frame"
res
res=res[res$names1!="Constant",]
res
res=modelsSummary2(fit,labels=labels)
class(res)="data.frame"
res
res=res[res$name1!="Constant",]
res
res=modelsSummary2(fit,labels=labels)
class(res)="data.frame"
res
res$name1=="Constant"
which(res$name1=="Constant")
which(res$name1=="Constant")[2]
which(res$name1=="Constant")[2]-2
nrow1=which(res$name1=="Constant")[2]-2
nrow2=nrow(res)-2-nrow1
Y
table
Variables=rep(Y[1],nrow1),rep(Y[2],nrow2)
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2,mode=1)
cat(eq)
fit=eq2fit(eq,data=disaster)
count=length(fit)
Y=c()
for(i in 1:count){
Y=c(Y,names(fit[[i]]$model)[1])
}
Y
res=modelsSummary2(fit,labels=labels)
class(res)="data.frame"
if(count==1){
nrow1=nrow(res)-1
Variables=rep(Y[1],nrow1)
} else if(count==2) {
nrow1=which(res$name1=="Constant")[2]-2
nrow2=nrow(res)-2-nrow1
Variables=c(rep(Y[1],nrow1),rep(Y[2],nrow2))
}
res=res[res$name1!="Constant",]
res$Variables=Variables
res
res$Predictors=rownames(res)
table
res
res$label=res$name
res$label=str_replace(res$label,"'","")
res$B=res$coef
res
res$label=str_replace(res$label,"'","")
res$B=res$coef
res
str_view(res$label,"'")
require(stringr)
str_view(res$label,"'")
res$label=str_replace(res$label,"'","")
res
fit2table=function(fit,labels=labels){
count=length(fit)
Y=c()
for(i in 1:count){
Y=c(Y,names(fit[[i]]$model)[1])
}
Y
res=modelsSummary2(fit,labels=labels)
class(res)="data.frame"
if(count==1){
nrow1=nrow(res)-1
Variables=rep(Y[1],nrow1)
} else if(count==2) {
nrow1=which(res$name1=="Constant")[2]-2
nrow2=nrow(res)-2-nrow1
Variables=c(rep(Y[1],nrow1),rep(Y[2],nrow2))
}
res=res[res$name1!="Constant",]
res$Variables=Variables
res$Predictors=rownames(res)
res$label=res$name
res$label=str_replace(res$label,"'","")
res$B=res$coef
res
}
fit=eq2fit(eq,data=disaster)
fit
fit2table(fit)
fit=eq2fit(eq,data=disaster)
fit
fit2table=function(fit,labels=labels){
count=length(fit)
Y=c()
for(i in 1:count){
Y=c(Y,names(fit[[i]]$model)[1])
}
Y
res=modelsSummary2(fit,labels=labels)
class(res)="data.frame"
if(count==1){
nrow1=nrow(res)-1
Variables=rep(Y[1],nrow1)
} else if(count==2) {
nrow1=which(res$name1=="Constant")[2]-2
nrow2=nrow(res)-2-nrow1
Variables=c(rep(Y[1],nrow1),rep(Y[2],nrow2))
}
res=res[res$name1!="Constant",]
res$Variables=Variables
res$Predictors=rownames(res)
res$label=res$name
res$label=str_replace(res$label,"'","")
res$B=res$coef
res
}
fit2table(fit=fit,labels=labels)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
fit=eq2fit(eq,data=disaster)
fit2table(fit=fit,labels=labels)
res=fit2table(fit,labels=labels)
str(res)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
fit=eq2fit(eq,data=disaster)
fit
modelsSummary2(fit)
modelsSummary2(fit,digits=2)
modelsSummary2(fit,digits=3)
fit
fit[[1]]$coef
summary(fit[[1]])$coef
str(summary(fit[[1]])$coef)
fit
count=length(fit)
Y=c()
df=list()
for(i in 1:count){
Y=c(Y,names(fit[[i]]$model)[1])
df[[i]]=summary(fit[[i]])$coef
}
Y
df
lapply(df,rbind)
unlist(df)
df[[i]]=as.data.frame(summary(fit[[i]])$coef)
count=length(fit)
Y=c()
df=list()
for(i in 1:count){
Y=c(Y,names(fit[[i]]$model)[1])
df[[i]]=as.data.frame(summary(fit[[i]])$coef)
}
Y
df
lapply(df,rbind)
df
unlist(df)
count=length(fit)
Y=c()
for(i in 1:count){
Y=c(Y,names(fit[[i]]$model)[1])
if(i==1) {
df=as.data.frame(summary(fit[[i]])$coef)
} else{
df=rbind(df,as.data.frame(summary(fit[[i]])$coef))
}
}
Y
df
df$name=rownames(df)
count=length(fit)
Y=c()
for(i in 1:count){
Y=c(Y,names(fit[[i]]$model)[1])
if(i==1) {
df=as.data.frame(summary(fit[[i]])$coef[-1,])
} else{
df=rbind(df,as.data.frame(summary(fit[[i]])$coef[-1,]))
}
}
Y
df
df$Predictors=rownames(df)
count=length(fit)
Y=c()
for(i in 1:count){
Y=c(Y,names(fit[[i]]$model)[1])
if(i==1) {
df=as.data.frame(summary(fit[[i]])$coef[-1,])
df$Predictors=rownames(df)
} else{
temp=as.data.frame(summary(fit[[i]])$coef[-1,])
temp$Predictors=rownames(temp)
df=rbind(df,temp)
}
}
Y
df
res=modelsSummary2(fit,labels=labels)
class(res)="data.frame"
if(count==1){
nrow1=nrow(res)-1
Variables=rep(Y[1],nrow1)
} else if(count==2) {
nrow1=which(res$name1=="Constant")[2]-2
nrow2=nrow(res)-2-nrow1
Variables=c(rep(Y[1],nrow1),rep(Y[2],nrow2))
}
res=res[res$name1!="Constant",]
df$Variables=Variables
res=res[res$name1!="Constant",]
res=res[res$name1!="Constant",]
res$Variables=Variables
res$Predictors=rownames(res)
res$label=res$name
res$label=str_replace(res$label,"'","")
res$B=res$coef
res
df
df$label=res$label
colnames(df)[1:4]=c("B","SE","t","p")
df
df
myround(df,3)
system("grep -r 'estimatesTable' *")
#' Make estimateTable with a list of lm object
#' @param fit A list of lm object
#' @param labels A list
#' @export
#' @examples
#' labels=list(X="frame",M="justify",Y="donate",W="skeptic")
#' moderator=list(name="skeptic",site=list(c("a","c")))
#' eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
#' fit=eq2fit(eq,data=disaster)
#' fit2table(fit=fit,labels=labels)
fit2table=function(fit,labels=labels,digits=3){
count=length(fit)
Y=c()
for(i in 1:count){
Y=c(Y,names(fit[[i]]$model)[1])
if(i==1) {
df=as.data.frame(summary(fit[[i]])$coef[-1,])
df$Predictors=rownames(df)
} else{
temp=as.data.frame(summary(fit[[i]])$coef[-1,])
temp$Predictors=rownames(temp)
df=rbind(df,temp)
}
}
Y
df
res=modelsSummary2(fit,labels=labels)
class(res)="data.frame"
if(count==1){
nrow1=nrow(res)-1
Variables=rep(Y[1],nrow1)
} else if(count==2) {
nrow1=which(res$name1=="Constant")[2]-2
nrow2=nrow(res)-2-nrow1
Variables=c(rep(Y[1],nrow1),rep(Y[2],nrow2))
}
df$Variables=Variables
res=res[res$name1!="Constant",]
res$label=str_replace(res$name,"'","")
df$label=res$label
colnames(df)[1:4]=c("B","SE","t","p")
df$B=round(df$B,digits=digits)
df
}
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
fit=eq2fit(eq,data=disaster)
fit2table(fit=fit,labels=labels)
#' Make estimateTable with a list of lm object
#' @param fit A list of lm object
#' @param labels A list
#' @export
#' @examples
#' labels=list(X="frame",M="justify",Y="donate",W="skeptic")
#' moderator=list(name="skeptic",site=list(c("a","c")))
#' eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
#' fit=eq2fit(eq,data=disaster)
#' fit2table(fit=fit,labels=labels)
fit2table=function(fit,labels=labels,digits=3){
count=length(fit)
Y=c()
for(i in 1:count){
Y=c(Y,names(fit[[i]]$model)[1])
if(i==1) {
df=as.data.frame(summary(fit[[i]])$coef[-1,])
df$Predictors=rownames(df)
} else{
temp=as.data.frame(summary(fit[[i]])$coef[-1,])
temp$Predictors=rownames(temp)
df=rbind(df,temp)
}
}
Y
df
res=modelsSummary2(fit,labels=labels)
class(res)="data.frame"
if(count==1){
nrow1=nrow(res)-1
Variables=rep(Y[1],nrow1)
} else if(count==2) {
nrow1=which(res$name1=="Constant")[2]-2
nrow2=nrow(res)-2-nrow1
Variables=c(rep(Y[1],nrow1),rep(Y[2],nrow2))
}
df$Variables=Variables
res=res[res$name1!="Constant",]
res$label=str_replace(res$name,"'","")
df$label=res$label
colnames(df)[1:4]=c("B","SE","t","p")
df$B=round(df$B,digits=digits)
df$SE=round(df$SE,digits=digits)
df$t=round(df$t,digits=digits)
df
}
devtools::document()
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
fit=eq2fit(eq,data=disaster)
class(fit)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
covar=NULL
model=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2)
semfit=sem(model,data=disaster)
class(semfit)
class(semfit)=="lavaan"
devtools::document()
library(processR)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
fit=eq2fit(eq,data=disaster)
showModels()
statisticalDiagram(8,labels=labels,fit=fit)
statisticalDiagram(8,labels=labels)
library(processR)
statisticalDiagram(8,labels=labels)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
fit=eq2fit(eq,data=disaster)
statisticalDiagram(8,labels=labels,fit=fit)
statisticalDiagram(8,labels=labels,fit=fit,whatLabel="est")
statisticalDiagram(8,labels=labels,fit=fit,whatLabel="name")
library(processR)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
fit=eq2fit(eq,data=disaster)
statisticalDiagram(8,labels=labels,fit=fit)
statisticalDiagram(8,labels=labels,fit=fit,whatLabel="est")
statisticalDiagram(8,labels=labels,fit=fit)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
fit=eq2fit(eq,data=disaster)
semfit=fit
res=fit2table(semfit,labels=labels,digits=digits)
digits=3
res=fit2table(semfit,labels=labels,digits=digits)
res
library(lavaan)
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
semfit=sem(model=model,data=disaster)
res=parameterEstimates(semfit)
res=res[res$op=="~",]
res
res=res[c(1,3,4,5,8)]
colnames(res)=c("end","start","name","est","p")
res
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
fit=eq2fit(eq,data=disaster)
library(processR)
statisticalDiagram(8,labels=labels,fit=fit)
statisticalDiagram(8,labels=labels,fit=fit,whatLabel="est")
drawModel(fit)
drawModel(semfit=fit)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","c")))
eq=tripleEquation(labels=labels,moderator=moderator,data=disaster,mode=1)
fit=eq2fit(eq,data=disaster)
library(processR)
drawModel(semfit=fit,labels=labels)
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
semfit=sem(model,data=disaster)
drawModel(fit,labels=labels)
drawModel(semfit,labels=labels)
drawModel(fit,labels=labels)
drawModel(semfit,labels=labels)
drawModel(fit,labels=labels,whatLabel="est")
drawModel(semfit,labels=labels,whatLabel="est")
drawModel(fit,labels=labels,whatLabel="est")
drawModel(fit,labels=labels)
drawModel(fit,labels=labels,nodemode=2)
drawModel(fit,labels=labels,nodemode=3)
drawModel(fit,labels=labels,nodemode=4)
fit=eq2fit(eq,data=disaster)
showModels()
devtools::document()
devtools::check()
devtools:document()
devtools::document()
library(processR)
devtools::check()
library(processR)
devtools::check()
drawModel(semfit,labels=labels,nodelabels=nodelabels,whatLabel="name",
xlim=c(-0.4,1.3),xinterval=0.26)
devtools::document()
devtools::check()
devtools::document()
devtools::check()
