}
}
res1
if(length(res1)>0) temp=c(temp,paste0(Y[j],"~",paste0(res1,collapse="+")))
}
temp
library(processR)
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk",Z="hair")
# moderator=list(name=c("milk","hair"),matrix=list(c(1,0,0,0,1,0,1,0,0,0),c(1,1,0,0,0,0,0,0,0,0)))
moderator=list(name=c("milk"),matrix=list(c(1,0,0,0,1,0,1,0,0,0)))
bmatrix=c(1,1,0,0,1,1,1,1,0,1)
eq=multipleMediation(labels=labels,bmatrix=bmatrix,moderator=moderator,mode=1)
cat(eq)
drawModel(equation=eq,labels=labels)
cat(eq)
df=equations2var(eq,labels=labels)
df
equations=unlist(strsplit(eq,"\n"))
equations
purrr::map_df(equations,eq2var,labels=labels)
labels
eq2var(equations[1],labels=labels)
eq2var(equations[2],labels=labels)
eq2var(equations[3],labels=labels)
df=equations2var(eq,labels=labels)
df
eq2var(equations[4],labels=labels)
df=equations2var(eq,labels=labels)
df
labels=list(X="baby",M=c("wine","tent","sand"),Y="tile",W="milk",Z="hair")
# moderator=list(name=c("milk","hair"),matrix=list(c(1,0,0,0,1,0,1,0,0,0),c(1,1,0,0,0,0,0,0,0,0)))
moderator=list(name=c("milk"),matrix=list(c(1,0,0,0,1,0,1,0,0,0)))
bmatrix=c(1,1,0,0,1,1,1,1,0,1)
cat(multipleMediation(labels=labels,bmatrix=bmatrix,moderator=moderator))
modelsSummary(labels=list(X="cond",M="pmi",Y="reaction"),data=pmi)
devtools::document()
library(processR)
modelsSummary(labels=list(X="cond",M="pmi",Y="reaction"),data=pmi)
labels=list(X="cond",M="pmi",Y="reaction")
modelsSummary(labels=labels,data=pmi)
labels=list(X="cond",M="pmi",Y="reaction")
modelsSummaryTable(labels=labels,data=pmi)
modelsSummaryTable(labels=labels,data=pmi)
x=modelsSummary(labels=labels,data=pmi)
modelsSummaryTable(x)
library(processR)
library(processR)
modelsSummaryTable(labels=labels,data=pmi)
devtools::document()
devtools::check()
labels=list(X="cond",Y="reaction",M="pmi")
xlabels=c("Front Page","Interior Page")
meanSummary(data=pmi,labels=labels,xlabels=xlabels)
require(processR)
labels=list(X="cond",Y="reaction",M="pmi")
xlabels=c("Front Page","Interior Page")
meanSummary(data=pmi,labels=labels,xlabels=xlabels)
X=NULL;Y=NULL;M=NULL;W=NULL;digits=3;xlabels=NULL
data=disaster;maxylev=6,mode=1
X=NULL;Y=NULL;M=NULL;W=NULL;digits=3;xlabels=NULL
data=disaster;maxylev=6;mode=1
labels=list(X="cond",Y="reaction",M="pmi")
xlabels=c("Front Page","Interior Page")
# X=NULL;Y=NULL;M=NULL;W=NULL;digits=3;xlabels=NULL
# data=disaster;maxylev=6;mode=1
if(is.null(X)) X=labels[["X"]]
if(is.null(Y)) Y=labels[["Y"]]
if(is.null(M)) M=labels[["M"]]
if(is.null(W)) W=labels[["W"]]
values=sort(unique(data[[X]]))
count=length(values)
labels=list(X="cond",Y="reaction",M="pmi")
xlabels=c("Front Page","Interior Page")
# X=NULL;Y=NULL;M=NULL;W=NULL;digits=3;xlabels=NULL
# data=disaster;maxylev=6;mode=1
if(is.null(X)) X=labels[["X"]]
if(is.null(Y)) Y=labels[["Y"]]
if(is.null(M)) M=labels[["M"]]
if(is.null(W)) W=labels[["W"]]
values=sort(unique(data[[X]]))
labels=list(X="cond",Y="reaction",M="pmi")
xlabels=c("Front Page","Interior Page")
# X=NULL;Y=NULL;M=NULL;W=NULL;digits=3;xlabels=NULL
# data=disaster;maxylev=6;mode=1
if(is.null(X)) X=labels[["X"]]
X=NULL;Y=NULL;M=NULL;W=NULL;digits=3;xlabels=NULL
data=pmi;maxylev=6;mode=1
labels=list(X="cond",Y="reaction",M="pmi")
xlabels=c("Front Page","Interior Page")
# X=NULL;Y=NULL;M=NULL;W=NULL;digits=3;xlabels=NULL
# data=pmi;maxylev=6;mode=1
if(is.null(X)) X=labels[["X"]]
if(is.null(Y)) Y=labels[["Y"]]
if(is.null(M)) M=labels[["M"]]
if(is.null(W)) W=labels[["W"]]
values=sort(unique(data[[X]]))
count=length(values)
X
values=sort(unique(data[[X]]))
data=pmi
require(processR)
X=NULL;Y=NULL;M=NULL;W=NULL;digits=3;xlabels=NULL
data=pmi;maxylev=6;mode=1
labels=list(X="cond",Y="reaction",M="pmi")
xlabels=c("Front Page","Interior Page")
values=sort(unique(data[[X]]))
count=length(values)
data
values=sort(unique(data[[X]]))
# X=NULL;Y=NULL;M=NULL;W=NULL;digits=3;xlabels=NULL
# data=pmi;maxylev=6;mode=1
if(is.null(X)) X=labels[["X"]]
if(is.null(Y)) Y=labels[["Y"]]
if(is.null(M)) M=labels[["M"]]
if(is.null(W)) W=labels[["W"]]
X
data
values=sort(unique(data[[X]]))
count=length(values)
data
y=getMeanSd(data=data,X=X,Y=Y,digits=digits)
#' get mean and sd
#' @param data A data.frame
#' @param X Name of independant variable
#' @param Y Name of dependant variable
#' @param digits Integer indicating the number of decimal places
getMeanSd=function(data,X,Y,digits){
values=sort(unique(data[[X]]))
y=c()
for(i in seq_along(values)) {
y=c(y,mean(data[data[[X]]==values[i],Y],na.rm=T),
sd(data[data[[X]]==values[i],Y],na.rm=T))
}
y=c(y,mean(data[[Y]],na.rm=T),sd(data[[Y]],na.rm=T))
sprintf(paste0("%0.",digits,"f"),y)
}
y=getMeanSd(data=data,X=X,Y=Y,digits=digits)
y
m=getMeanSd(data=data,X=X,Y=M,digits=digits)
yhat=getYhat1(data=data,X=X,M=M,Y=Y,digits=digits,maxylev=maxylev,mode=mode)
yhat
mean(pmi$pmi)
fit2=lm(reaction~cond+pmi,data=pmi)
summary(fit2)
coef(fit2)[1]+coef(fit2)[3]*mean(pmi$pmi)
coef(fit2)[1]+coef(fit2)[3]*mean(pmi$pmi)+coef(fit2)[2]
library(lavaan)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(labels=labels)
semfit=sem(model=model,data=pmi, se="boot", bootstrap=100)
require(processR)
library(lavaan)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(labels=labels)
semfit=sem(model=model,data=pmi, se="boot", bootstrap=100)
medSummary(semfit)
medSummary(semfit,boot.ci.type="all")
medSummary(semfit,boot.ci.type="all",effects="indirect")
devtools::document()
library(processR)
devtools::check()
library(lavaan)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(labels=labels)
semfit=sem(model=model,data=pmi, se="boot", bootstrap=100)
medSummary(semfit,boot.ci.type="all")
medSummary(semfit)
devtools::document()
devtools::document()
devtools::check()
devtools::docuemnt()
devtools::document()
devtools::check()
require(lavaan)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(labels=labels)
set.seed(1234)
require(processR)
require(lavaan)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(labels=labels)
set.seed(1234)
semfit=sem(model,data=pmi,se="boot",bootstrap=100)
getBootData
#' @param ... Further argument to be passed to lavaan::lavTech()
#' @importFrom lavaan lavTech
#' @export
#' @examples
#' require(lavaan)
#' labels=list(X="cond",M="pmi",Y="reaction")
#' model=tripleEquation(labels=labels)
#' set.seed(1234)
#' semfit=sem(model,data=pmi,se="boot",bootstrap=100)
#' getBootData
getBootData=function(semfit,what="coef.boot",...){
as.data.frame(lavTech(fit, what=what, add.labels = TRUE,...))
}
getBootData(semfit)
#' @param ... Further argument to be passed to lavaan::lavTech()
#' @importFrom lavaan lavTech
#' @export
#' @examples
#' require(lavaan)
#' labels=list(X="cond",M="pmi",Y="reaction")
#' model=tripleEquation(labels=labels)
#' set.seed(1234)
#' semfit=sem(model,data=pmi,se="boot",bootstrap=100)
#' getBootData(semfit)
getBootData=function(semfit,what="coef.boot",...){
as.data.frame(lavTech(semfit, what=what, add.labels = TRUE,...))
}
getBootData(semfit)
set.seed(1234)
semfit=sem(model,data=pmi,se="boot",bootstrap=100)
getBootData(semfit)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(labels=labels)
set.seed(1234)
semfit=sem(model,data=pmi,se="boot",bootstrap=100)
bootData=getBootData(semfit)
bootData$indirect=bootData$a*bootData$b
x=bootData$indirect
x
df=as.data.frame(x=x)
df
sig=0.05
sig=0.05
quantile(x,probs=c(sig/2,1-sig/2),type=6)
df=as.data.frame(x=x)
df
quantile(x,probs=c(sig/2,1-sig/2),type=6)
sig/2
1-sig/2
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
xintercapt
xintercept
require(ggplot2)
require(predict3d)
p<-ggplot(data=df,aes(x=x,y=..density..))+
geom_histogram(color="grey60",fill="cornsilk")+
geom_line(stat="density",color="red")
res=getAspectRatio(p)
res
p<-ggplot(data=df,aes(x=x,y=..density..))+
geom_histogram(color="grey60",fill="cornsilk")+
geom_line(stat="density",color="red")
res=getAspectRatio(p)
res
p<-p+ geom_vline(xintercept=xintercept[1],lty=2)+
geom_vline(xintercept=xintercept[2],lty=2)+
annotate("text",x=xintercept[1],y=res$ymax,label=xintercept[1],hjust=1.1)+
annotate("text",x=xintercept[2],y=res$ymax,label=xintercept[2],hjust=-0.1)
p<-p+ geom_vline(xintercept=xintercept[1],lty=2)+
geom_vline(xintercept=xintercept[2],lty=2)+
annotate("text",x=xintercept[1],y=res$ymax,label=xintercept[1],hjust=1.1)+
annotate("text",x=xintercept[2],y=res$ymax,label=xintercept[2],hjust=-0.1)+
theme_bw2()
p
digits=3
labels=sprintf(paste0("%0.",digits,"f"),xintercept)
labels=sprintf(paste0("%0.",digits,"f"),xintercept)
p<-ggplot(data=df,aes(x=x,y=..density..))+
geom_histogram(color="grey60",fill="cornsilk")+
geom_line(stat="density",color="red")
res=getAspectRatio(p)
res
p<-p+ geom_vline(xintercept=xintercept[1],lty=2)+
geom_vline(xintercept=xintercept[2],lty=2)+
annotate("text",x=xintercept[1],y=res$ymax,label=labels[1],hjust=1.1)+
annotate("text",x=xintercept[2],y=res$ymax,label=labels[2],hjust=-0.1)+
theme_bw2()
p
medSummaryTable(semfit,boot.ci.type="all")
x=bootData$indirect
x
sig=0.05
digits=3
df=as.data.frame(x=x)
df
1-sig/2
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
xintercept
labels=sprintf(paste0("%0.",digits,"f"),xintercept)
p<-ggplot(data=df,aes(x=x,y=..density..))+
geom_histogram(color="grey60",fill="cornsilk")+
geom_line(stat="density",color="red")
res=getAspectRatio(p)
p<-p+ geom_vline(xintercept=xintercept[1],lty=2)+
geom_vline(xintercept=xintercept[2],lty=2)+
annotate("text",x=xintercept[1],y=res$ymax,label=labels[1],hjust=1.1)+
annotate("text",x=xintercept[2],y=res$ymax,label=labels[2],hjust=-0.1)+
theme_bw2()
p
xintercept
summary(semfit,ci=TRUE)
bootData=getBootData(semfit)
bootData$indirect=bootData$a*bootData$b
x=bootData$indirect
x
sig=0.05
digits=3
df=as.data.frame(x=x)
df
1-sig/2
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
xintercept
summary(semfit,ci=TRUE)
x=bootData$c
x
medSummaryTable(semfit,boot.ci.type="all")
x=bootData$indirect
x=bootData$c
x
sig=0.05
digits=3
df=as.data.frame(x=x)
df
1-sig/2
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
xintercept
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6,na.rm=TRUE)
xintercept
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
xintercept
set.seed(1234)
semfit=sem(model,data=pmi,se="boot",bootstrap=100)
summary(semfit,ci=TRUE)
semfit=sem(model,data=pmi,se="boot",bootstrap=1000)
set.seed(1234)
semfit=sem(model,data=pmi,se="boot",bootstrap=1000)
summary(semfit,ci=TRUE)
bootData=getBootData(semfit)
bootData$indirect=bootData$a*bootData$b
medSummaryTable(semfit,boot.ci.type="all")
summary(semfit,ci=TRUE)
bootData=getBootData(semfit)
bootData$indirect=bootData$a*bootData$b
medSummaryTable(semfit,boot.ci.type="all")
x=bootData$c
x
sig=0.05
digits=3
df=as.data.frame(x=x)
df
1-sig/2
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
xintercept
x=bootData$indirect
x
sig=0.05
digits=3
df=as.data.frame(x=x)
df
1-sig/2
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
xintercept
labels=sprintf(paste0("%0.",digits,"f"),xintercept)
p<-ggplot(data=df,aes(x=x,y=..density..))+
geom_histogram(color="grey60",fill="cornsilk")+
geom_line(stat="density",color="red")
res=getAspectRatio(p)
p<-p+ geom_vline(xintercept=xintercept[1],lty=2)+
geom_vline(xintercept=xintercept[2],lty=2)+
annotate("text",x=xintercept[1],y=res$ymax,label=labels[1],hjust=1.1)+
annotate("text",x=xintercept[2],y=res$ymax,label=labels[2],hjust=-0.1)+
theme_bw2()
p
xlab="Indirect effect(ab)"
if(is.null(ylab)){
ylab=paste0("Smoothed Kernel density estimates \nin ",length(x)," bootstrap samples")
}
x=bootData$indirect
x
sig=0.05
digits=3
ylab=NULL
xlab="Indirect effect(ab)"
if(is.null(ylab)){
ylab=paste0("Smoothed Kernel density estimates \nin ",length(x)," bootstrap samples")
}
df=as.data.frame(x=x)
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
labels=sprintf(paste0("%0.",digits,"f"),xintercept)
p<-ggplot(data=df,aes(x=x,y=..density..))+
geom_histogram(color="grey60",fill="cornsilk")+
geom_line(stat="density",color="red")
res=getAspectRatio(p)
p<-p+ geom_vline(xintercept=xintercept[1],lty=2)+
geom_vline(xintercept=xintercept[2],lty=2)+
annotate("text",x=xintercept[1],y=res$ymax,label=labels[1],hjust=1.1)+
annotate("text",x=xintercept[2],y=res$ymax,label=labels[2],hjust=-0.1)+
labs(x=xlab,y=ylab)+
theme_bw2()
p
densityPlot=function(sig=0.05,digits=3,xlab="Indirect effect(ab)",ylab=NULL){
if(is.null(ylab)){
ylab=paste0("Smoothed Kernel density estimates \nin ",length(x)," bootstrap samples")
}
df=as.data.frame(x=x)
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
labels=sprintf(paste0("%0.",digits,"f"),xintercept)
p<-ggplot(data=df,aes(x=x,y=..density..))+
geom_histogram(color="grey60",fill="cornsilk")+
geom_line(stat="density",color="red")
res=getAspectRatio(p)
p<-p+ geom_vline(xintercept=xintercept[1],lty=2)+
geom_vline(xintercept=xintercept[2],lty=2)+
annotate("text",x=xintercept[1],y=res$ymax,label=labels[1],hjust=1.1)+
annotate("text",x=xintercept[2],y=res$ymax,label=labels[2],hjust=-0.1)+
labs(x=xlab,y=ylab)+
theme_bw2()
p
}
x=bootData$indirect
densityPlot=function(x,sig=0.05,digits=3,xlab="Indirect effect(ab)",ylab=NULL){
if(is.null(ylab)){
ylab=paste0("Smoothed Kernel density estimates \nin ",length(x)," bootstrap samples")
}
df=as.data.frame(x=x)
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
labels=sprintf(paste0("%0.",digits,"f"),xintercept)
p<-ggplot(data=df,aes(x=x,y=..density..))+
geom_histogram(color="grey60",fill="cornsilk")+
geom_line(stat="density",color="red")
res=getAspectRatio(p)
p<-p+ geom_vline(xintercept=xintercept[1],lty=2)+
geom_vline(xintercept=xintercept[2],lty=2)+
annotate("text",x=xintercept[1],y=res$ymax,label=labels[1],hjust=1.1)+
annotate("text",x=xintercept[2],y=res$ymax,label=labels[2],hjust=-0.1)+
labs(x=xlab,y=ylab)+
theme_bw2()
p
}
densityPlot(bootData$indirect)
devtools::document()
devtools::check()
#' @export
#' @examples
#' require(lavaan)
#' labels=list(X="cond",M="pmi",Y="reaction")
#' model=tripleEquation(labels=labels)
#' set.seed(1234)
#' semfit=sem(model,data=pmi,se="boot",bootstrap=100)
#' bootData=getBootData(semfit)
#' bootData$indirect=bootData$a*bootData$b
#' densityPlot(bootData$indirect)
densityPlot=function(x,sig=0.05,digits=3,xlab="Indirect effect(ab)",ylab=NULL){
if(is.null(ylab)){
ylab=paste0("Smoothed Kernel density estimates \nin ",length(x)," bootstrap samples")
}
df=as.data.frame(x=x)
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
labels=sprintf(paste0("%0.",digits,"f"),xintercept)
p<-ggplot(data=df,aes(x=x,y=..density..))+
geom_histogram(color="grey60",fill="cornsilk")+
geom_line(stat="density",color="red")
res=getAspectRatio(p)
p<-p+ geom_vline(xintercept=xintercept[1],lty=2)+
geom_vline(xintercept=xintercept[2],lty=2)+
annotate("text",x=xintercept[1],y=res$ymax,label=labels[1],hjust=1.1)+
annotate("text",x=xintercept[2],y=res$ymax,label=labels[2],hjust=-0.1)+
labs(x=xlab,y=ylab)+
theme_bw2()
p
}
p<-ggplot(data=df,aes(x=x,y=..density..))+
geom_histogram(color="grey60",fill="cornsilk")+
geom_line(stat="density",color="red")
#' @export
#' @examples
#' require(lavaan)
#' labels=list(X="cond",M="pmi",Y="reaction")
#' model=tripleEquation(labels=labels)
#' set.seed(1234)
#' semfit=sem(model,data=pmi,se="boot",bootstrap=100)
#' bootData=getBootData(semfit)
#' bootData$indirect=bootData$a*bootData$b
#' densityPlot(bootData$indirect)
densityPlot=function(x,sig=0.05,digits=3,xlab="Indirect effect(ab)",ylab=NULL){
if(is.null(ylab)){
ylab=paste0("Smoothed Kernel density estimates \nin ",length(x)," bootstrap samples")
}
df=as.data.frame(x=x)
xintercept=quantile(x,probs=c(sig/2,1-sig/2),type=6)
labels=sprintf(paste0("%0.",digits,"f"),xintercept)
p<-ggplot(data=df,aes_string(x="x",y="..density.."))+
geom_histogram(color="grey60",fill="cornsilk")+
geom_line(stat="density",color="red")
res=getAspectRatio(p)
p<-p+ geom_vline(xintercept=xintercept[1],lty=2)+
geom_vline(xintercept=xintercept[2],lty=2)+
annotate("text",x=xintercept[1],y=res$ymax,label=labels[1],hjust=1.1)+
annotate("text",x=xintercept[2],y=res$ymax,label=labels[2],hjust=-0.1)+
labs(x=xlab,y=ylab)+
theme_bw2()
p
}
require(lavaan)
labels=list(X="cond",M="pmi",Y="reaction")
model=tripleEquation(labels=labels)
set.seed(1234)
semfit=sem(model,data=pmi,se="boot",bootstrap=100)
bootData=getBootData(semfit)
bootData$indirect=bootData$a*bootData$b
densityPlot(bootData$indirect)
devtools::docuemnt()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
library(processR)
