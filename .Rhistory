labels[[paste0("X",i)]]=labels$X[i]
}
}
if(icount>0) {
nodes$xpos[str_detect(nodes$name,":")]=seq(from=0.1,to=0.9,length.out=icount)
}
nodes$ypos=1
nodes$xpos[nodes$no==2]=mympos
xcount=nrow(nodes[nodes$no==3,])
if(xcount>1) {
for(i in 1:xcount){
labels[[paste0("X",i)]]=labels$X[i]
}
}
if(icount>0) {
nodes$xpos[nodes$no>=5]=seq(from=0.1,to=0.9,length.out=icount)
}
nodes
icount
icount=sum(which(nodes$no[nodes$no>=5]))
icount=sum(which(nodes$no>=5))
icount
if(is.null(radx)) radx=ifelse(nodemode==1,0.09,0.12)
res=parameterEstimates(semfit)
res=res[res$op=="~",]
res
res=res[c(1,3,4,5,8)]
colnames(res)=c("end","start","name","est","p")
res
res$start=changeLabelName(res$start,labels,add=FALSE)
res$end=changeLabelName(res$end,labels,add=FALSE)
df1=res
df1
name=unique(c(df1$start,df1$end))
nodes=data.frame(name=name,stringsAsFactors = FALSE)
nodes$no=4
nodes$no[nodes$name=="Y"]=1
nodes$no[str_detect(nodes$name,"^M[0-9]?$")]=2
nodes$no[str_detect(nodes$name,"^X[0-9]?$")]=3
count=length(nodes$no[nodes$no==4])
nodes$no[(nodes$no==4)&(str_detect(nodes$name,":"))]=6
nodes$no[(nodes$no==6)&(str_detect(nodes$name,"^X"))]=5
temp="dplyr::arrange(nodes,no,name)"
nodes<-eval(parse(text=temp))
nodes
if(interactionFirst){
nodes$no[nodes$no==5]=0
nodes$no[nodes$no==4]=5
nodes$no[nodes$no==3]=4
nodes$no[nodes$no==0]=3
}
nodes
which(nodes$no>=5)
which(nodes$no>=5)
icount=length(which(nodes$no>=5))
icount
icount=length(which(nodes$no>=5))
icount
nodes$xpos=0
nodes$xpos[nodes$name=="Y"]=ypos[1]
mcount=nrow(nodes[nodes$no==2,])
if(mcount>1) {
if(mcount==2){
mympos=seq(from=0.2,to=0.8,length.out=mcount)
} else{
mympos=seq(from=0.05,to=0.95,length.out=mcount)
}
for(i in 1:mcount){
labels[[paste0("M",i)]]=labels$M[i]
}
} else {
mympos=0.5
}
nodes$xpos[nodes$no==2]=mympos
xcount=nrow(nodes[nodes$no==3,])
if(xcount>1) {
for(i in 1:xcount){
labels[[paste0("X",i)]]=labels$X[i]
}
}
nodes
icount
if(icount>0) {
nodes$xpos[nodes$no>=5]=seq(from=0.1,to=0.9,length.out=icount)
}
nodes
nodes$ypos=1
nodes$ypos[nodes$no==1]=ypos[2]
nodes$ypos[nodes$no==2]=mpos[2]
if(mcount>2){
starty=mpos[2]-0.1
nodes$ypos[nodes$no==2]=c(starty,rep(mpos[2],mcount-2),starty)
}
select1=which(nodes$no<=2)
select=setdiff(which(!str_detect(nodes$name,":")),select1)
nodes$ypos[select]=seq(to=2,by=-1,length.out = length(select))
nodes
# nodes$xpos1=adjustxpos(nodes$xpos,xmargin=xmargin,radx=radx)
nodes$ypos=adjustypos(nodes$ypos,ymargin=ymargin,rady=rady,
maxypos=maxypos,minypos=minypos)
arrows=df1
arrows$labelpos=0.5
arrows$arrpos=0.8
arrows$no=1
arrows$lty=1
arrows$label1=arrows$name
if(whatLabel=="name") {
arrows$label=arrows$name
addprime=TRUE
} else{
arrows$label=round(arrows$est,digits)
arrows$lty=ifelse(arrows$p<0.05,1,3)
addprime=FALSE
}
# print(nodes)
#   print(arrows)
if(is.null(nodelabels)) {
nodelabels=labels
}
openplotmat(xlim=xlim,ylim=ylim)
require(diagram)
openplotmat(xlim=xlim,ylim=ylim)
for(i in 1:nrow(arrows)){
temppos=arrows$labelpos[i]
if(!is.null(label.pos[[arrows$name[i]]])) temppos=label.pos[[arrows$name[i]]]
myarrow2(nodes, from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=temppos,arr.pos=NULL,lty=arrows$lty[i],addprime=addprime,xspace=xspace,mode=2 )
}
library(processR)
devtools::document()
library(processR)
library(lavaan)
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
semfit=sem(model=model,data=disaster)
drawModel(semfit,labels=labels)
drawModel(semfit,labels=labels,interactionFirst=TRUE)
library(processR)
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
semfit=sem(model=model,data=disaster)
drawModel(semfit,labels=labels,interactionFirst=TRUE)
drawModel(semfit,labels=labels,interactionFirst=TRUE,nodemode=1)
drawModel(semfit,labels=labels,interactionFirst=TRUE,nodemode=2)
drawModel(semfit,labels=labels,interactionFirst=TRUE,nodemode=3)
drawModel(semfit,labels=labels,interactionFirst=TRUE,nodemode=4)
drawModel(semfit,labels=labels,nodemode=4)
drawModel(semfit,labels=labels,interactionFirst=TRUE,nodemode=4)
library(lavaan)
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
semfit=sem(model=model,data=disaster)
nodelabels=NULL;whatLabel="name"
xmargin=0.01;radx=NULL;mode=2;nodemode=1
ymargin=0.02;xlim=c(-0.2,1.2);ylim=xlim
rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
xinterval=NULL;yinterval=NULL;xspace=NULL;label.pos=list()
digits=3
interactionFirst=TRUE;totalOnly=TRUE
if(is.null(radx)) radx=ifelse(nodemode==1,0.09,0.12)
res=parameterEstimates(semfit)
res=res[res$op=="~",]
res
res=res[c(1,3,4,5,8)]
colnames(res)=c("end","start","name","est","p")
res
res$start=changeLabelName(res$start,labels,add=FALSE)
res$end=changeLabelName(res$end,labels,add=FALSE)
df1=res
df1
df1=df1[df1$end=="Y",]
df1=df1[df1$start!="M",]
df1
name=unique(c(df1$start,df1$end))
nodes=data.frame(name=name,stringsAsFactors = FALSE)
nodes$no=4
nodes$no[nodes$name=="Y"]=1
nodes$no[str_detect(nodes$name,"^M[0-9]?$")]=2
nodes$no[str_detect(nodes$name,"^X[0-9]?$")]=3
count=length(nodes$no[nodes$no==4])
nodes$no[(nodes$no==4)&(str_detect(nodes$name,":"))]=6
nodes$no[(nodes$no==6)&(str_detect(nodes$name,"^X"))]=5
temp="dplyr::arrange(nodes,no,name)"
nodes<-eval(parse(text=temp))
nodes
if(interactionFirst){
nodes$no[nodes$no==5]=0
nodes$no[nodes$no==4]=5
nodes$no[nodes$no==3]=4
nodes$no[nodes$no==0]=3
}
icount=length(which(nodes$no>=5))
icount
nodes$xpos=0
nodes$xpos[nodes$name=="Y"]=ypos[1]
mcount=nrow(nodes[nodes$no==2,])
if(mcount>1) {
if(mcount==2){
mympos=seq(from=0.2,to=0.8,length.out=mcount)
} else{
mympos=seq(from=0.05,to=0.95,length.out=mcount)
}
for(i in 1:mcount){
labels[[paste0("M",i)]]=labels$M[i]
}
} else {
mympos=0.5
}
nodes$xpos[nodes$no==2]=mympos
xcount=nrow(nodes[nodes$no==3,])
if(xcount>1) {
for(i in 1:xcount){
labels[[paste0("X",i)]]=labels$X[i]
}
}
nodes
icount
if(icount>0) {
nodes$xpos[nodes$no>=5]=seq(from=0.1,to=0.9,length.out=icount)
}
nodes
if(totalOnly) {
nodes$xpos[nodes$no!=1]=0
}
nodes$ypos=1
nodes$ypos[nodes$no==1]=ypos[2]
nodes$ypos[nodes$no==2]=mpos[2]
if(mcount>2){
starty=mpos[2]-0.1
nodes$ypos[nodes$no==2]=c(starty,rep(mpos[2],mcount-2),starty)
}
select1=which(nodes$no<=2)
select=setdiff(which(!str_detect(nodes$name,":")),select1)
nodes <- nodes %>% arrange(no)
nodes$ypos[select]=seq(to=2,by=-1,length.out = length(select))
nodes
require(tidyverse)
nodes <- nodes %>% arrange(no)
nodes$ypos[select]=seq(to=2,by=-1,length.out = length(select))
nodes
# nodes$xpos1=adjustxpos(nodes$xpos,xmargin=xmargin,radx=radx)
nodes$ypos=adjustypos(nodes$ypos,ymargin=ymargin,rady=rady,
maxypos=maxypos,minypos=minypos)
arrows=df1
arrows$labelpos=0.5
arrows$arrpos=0.8
arrows$no=1
arrows$lty=1
arrows$label1=arrows$name
if(whatLabel=="name") {
arrows$label=arrows$name
addprime=TRUE
} else{
arrows$label=round(arrows$est,digits)
arrows$lty=ifelse(arrows$p<0.05,1,3)
addprime=FALSE
}
# print(nodes)
#   print(arrows)
if(is.null(nodelabels)) {
nodelabels=labels
}
openplotmat(xlim=xlim,ylim=ylim)
for(i in 1:nrow(arrows)){
temppos=arrows$labelpos[i]
if(!is.null(label.pos[[arrows$name[i]]])) temppos=label.pos[[arrows$name[i]]]
myarrow2(nodes, from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=temppos,arr.pos=NULL,lty=arrows$lty[i],addprime=addprime,xspace=xspace,mode=2 )
}
library(processR)
devtools::document()
library(processR)
devtools::document()
library(processR)
library(processR)
library(lavaan)
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
semfit=sem(model=model,data=disaster)
drawModel(semfit,labels=labels,interactionFirst=TRUE)
drawModel(semfit,labels=labels,interactionFirst=TRUE,totalOnly=TRUE)
library(processR)
drawModel(semfit,labels=labels,interactionFirst=TRUE,totalOnly=TRUE)
nodelabels=NULL;whatLabel="name"
xmargin=0.01;radx=NULL;mode=2;nodemode=1
ymargin=0.02;xlim=c(-0.2,1.2);ylim=xlim
rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
xinterval=NULL;yinterval=NULL;xspace=NULL;label.pos=list()
digits=3
interactionFirst=TRUE;totalOnly=TRUE
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
semfit=sem(model=model,data=disaster)
if(is.null(radx)) radx=ifelse(nodemode==1,0.09,0.12)
res=parameterEstimates(semfit)
res=res[res$op=="~",]
res
res=res[c(1,3,4,5,8)]
colnames(res)=c("end","start","name","est","p")
res
res$start=changeLabelName(res$start,labels,add=FALSE)
res$end=changeLabelName(res$end,labels,add=FALSE)
df1=res
df1
if(totalOnly){
df1=df1[df1$end=="Y",]
df1=df1[df1$start!="M",]
}
name=unique(c(df1$start,df1$end))
nodes=data.frame(name=name,stringsAsFactors = FALSE)
nodes$no=4
nodes$no[nodes$name=="Y"]=1
nodes$no[str_detect(nodes$name,"^M[0-9]?$")]=2
nodes$no[str_detect(nodes$name,"^X[0-9]?$")]=3
count=length(nodes$no[nodes$no==4])
nodes$no[(nodes$no==4)&(str_detect(nodes$name,":"))]=6
nodes$no[(nodes$no==6)&(str_detect(nodes$name,"^X"))]=5
temp="dplyr::arrange(nodes,no,name)"
nodes<-eval(parse(text=temp))
nodes
if(interactionFirst){
nodes$no[nodes$no==5]=0
nodes$no[nodes$no==4]=5
nodes$no[nodes$no==3]=4
nodes$no[nodes$no==0]=3
}
icount=length(which(nodes$no>=5))
icount
nodes$xpos=0
nodes$xpos[nodes$name=="Y"]=ypos[1]
mcount=nrow(nodes[nodes$no==2,])
if(mcount>1) {
if(mcount==2){
mympos=seq(from=0.2,to=0.8,length.out=mcount)
} else{
mympos=seq(from=0.05,to=0.95,length.out=mcount)
}
for(i in 1:mcount){
labels[[paste0("M",i)]]=labels$M[i]
}
} else {
mympos=0.5
}
nodes$xpos[nodes$no==2]=mympos
xcount=nrow(nodes[nodes$no==3,])
if(xcount>1) {
for(i in 1:xcount){
labels[[paste0("X",i)]]=labels$X[i]
}
}
nodes
icount
if(icount>0) {
nodes$xpos[nodes$no>=5]=seq(from=0.1,to=0.9,length.out=icount)
}
if(totalOnly) {
nodes$xpos[nodes$no!=1]=0
}
nodes$ypos=1
nodes$ypos[nodes$no==1]=ypos[2]
nodes$ypos[nodes$no==2]=mpos[2]
if(mcount>2){
starty=mpos[2]-0.1
nodes$ypos[nodes$no==2]=c(starty,rep(mpos[2],mcount-2),starty)
}
select1=which(nodes$no<=2)
select=setdiff(which(!str_detect(nodes$name,":")),select1)
nodes <- nodes %>% arrange(no)
nodes$ypos[select]=seq(to=2,by=-1,length.out = length(select))
nodes
select
select1=which(nodes$no<=2)
select=setdiff(which(nodes$no<5),select1)
select
nodes <- nodes %>% arrange(no)
select1=which(nodes$no<=2)
select=setdiff(which(nodes$no<5),select1)
select
nodes$ypos[select]=seq(to=2,by=-1,length.out = length(select))
nodes
ypos=c(0.5,0.9,1,1,2,3)
adjustypos(ypos)
count=max(ypos)
count
drawModel(semfit,labels=labels,interactionFirst=TRUE)
drawModel(semfit,labels=labels,interactionFirst=TRUE,totalOnly=TRUE)
drawModel(semfit,labels=labels,interactionFirst=TRUE,totalOnly=TRUE,maxypos=0.7,minypos=0.3)
drawModel(semfit,labels=labels,interactionFirst=TRUE,totalOnly=TRUE,maxypos=0.7,minypos=0.2)
starty=0.5-yinterval*count/2
count=max(ypos)
starty=0.5-yinterval*count/2
#'@param ymargin verical margin of plot
#'@param rady vertical radius of the box
#' @param maxypos maximal y position of X or W variables
#' @param minypos minimal y position of X or W variables
#' @param totalOnly logical if TRUE, arrange ypos with center 0.5
#' @export
#' @examples
#' ypos=c(0.5,0.9,1,1,2,3)
#' adjustypos(ypos)
#' adjustypos(ypos,totalOnly=TRUE)
adjustypos=function(ypos,ymargin=0.02,rady=0.06,maxypos=0.6,minypos=0,totalOnly=FALSE){
if(totalOnly){
count=max(ypos)
yinterval=ymargin+2*rady
starty=0.5-yinterval*count/2
result=ifelse(ypos<1,ypos,starty+(ypos-1)*yinterval)
} else{
yinterval=ymargin+2*rady
starty=minypos+ymargin+rady
yinterval=max((maxypos-starty)/(max(ypos)-1),yinterval)
result=ifelse(ypos<1,ypos,starty+(ypos-1)*yinterval)
}
result
}
ypos=c(0.5,0.9,1,1,2,3)
adjustypos(ypos)
adjustypos(ypos,totalOnly=TRUE)
#'@param ymargin verical margin of plot
#'@param rady vertical radius of the box
#' @param maxypos maximal y position of X or W variables
#' @param minypos minimal y position of X or W variables
#' @param totalOnly logical if TRUE, arrange ypos with center 0.5
#' @export
#' @examples
#' ypos=c(0.5,0.9,1,1,2,3)
#' adjustypos(ypos)
#' adjustypos(ypos,totalOnly=TRUE)
adjustypos=function(ypos,ymargin=0.02,rady=0.06,maxypos=0.6,minypos=0,totalOnly=FALSE){
if(totalOnly){
count=max(ypos)
yinterval=ymargin+2*rady
starty=0.5-yinterval*(count-1)/2
result=ifelse(ypos<1,ypos,starty+(ypos-1)*yinterval)
} else{
yinterval=ymargin+2*rady
starty=minypos+ymargin+rady
yinterval=max((maxypos-starty)/(max(ypos)-1),yinterval)
result=ifelse(ypos<1,ypos,starty+(ypos-1)*yinterval)
}
result
}
ypos=c(0.5,0.9,1,1,2,3)
adjustypos(ypos)
adjustypos(ypos,totalOnly=TRUE)
library(processR)
library(lavaan)
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
semfit=sem(model=model,data=disaster)
drawModel(semfit,labels=labels,interactionFirst=TRUE)
drawModel(semfit,labels=labels,interactionFirst=TRUE,totalOnly=TRUE)
library(processR)
drawModel(semfit,labels=labels,interactionFirst=TRUE,totalOnly=TRUE)
system("grep -r 'myarrow' *")
devtools::check()
system("grep -r 'donttest' *")
devtools::document()
devtools::check()
library(processR)
library(lavaan)
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
semfit=sem(model=model,data=disaster)
drawModel(semfit,labels=labels,interactionFirst=TRUE)
labels=list(X="protest",W="sexism",M="respappr",Y="liking")
moderator=list(name="sexism",site=list(c("a","c")))
data1=addCatVars(protest,"protest",mode=3)
model=catMediation(X="protest",M="respappr",Y="liking",moderator=moderator,data=protest,maxylev=6)
semfit=sem(model,data=data1)
nodelabels=list(D1="Ind.Protest",D2="Col.Protest",W="sexism",M="respappr",Y="liking")
drawModel(semfit,labels=labels,nodelabels=nodelabels,whatLabel="name",xlim=c(-0.4,1.3),xinterval=0.26)
library(processR)
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
semfit=sem(model=model,data=disaster)
drawModel(semfit,labels=labels,interactionFirst=TRUE)
drawModel(semfit,labels=labels,interactionFirst=TRUE,totalOnly=TRUE)
drawModel(semfit,labels=labels,interactionFirst=TRUE)
library(processR)
labels=list(X="frame",W="skeptic",M="justify",Y="donate")
moderator=list(name="skeptic",site=list(c("a","c")))
model=tripleEquation(labels=labels,moderator=moderator,data=disaster)
semfit=sem(model=model,data=disaster)
drawModel(semfit,labels=labels,interactionFirst=TRUE)
library(processR)
drawModel(semfit,labels=labels,interactionFirst=TRUE)
library(processR)
drawModel(semfit,labels=labels,interactionFirst=TRUE)
drawModel(semfit,labels=labels,interactionFirst=TRUE,totalOnly=TRUE)
library(processR)
drawModel(semfit,labels=labels,interactionFirst=TRUE,totalOnly=TRUE)
drawModel(semfit,labels=labels,interactionFirst=TRUE)
drawModel(semfit,labels=labels)
drawModel(semfit,labels=labels,nodemode=4)
drawModel(semfit,labels=labels)
drawModel(semfit,labels=labels,nodemode=4)
library(processR)
drawModel(semfit,labels=labels,nodemode=4)
drawModel(semfit,labels=labels,nodemode=1)
devtools:document()
devtools::document()
devtools::check()
