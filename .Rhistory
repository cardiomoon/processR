# ymargin=0.02;xlim=c(-0.2,1.2);ylim=xlim
# rady=0.04;maxypos=0.6;minypos=0;ypos=c(1,0.5);mpos=c(0.5,0.9)
# xinterval=NULL;yinterval=NULL;xspace=NULL;label.pos=list()
# digits=3
if(is.null(radx)) radx=ifelse(nodemode==1,0.09,0.12)
res=parameterEstimates(semfit)
res=res[res$op=="~",]
res
res=res[c(1,3,4,5,8)]
colnames(res)=c("end","start","name","est","p")
res
res$start=changeLabelName(res$start,labels,add=FALSE)
res$end=changeLabelName(res$end,labels,add=FALSE)
df1=res
df1
if(is.null(nodelabels)) {
nodelabels=labels
}
name=unique(c(df1$start,df1$end))
name
count=length(setdiff(name,c("M","Y")))
count
nodes=data.frame(name=name,stringsAsFactors = FALSE)
nodes$no=4
nodes$no[nodes$name=="Y"]=1
nodes$no[nodes$name=="M"]=2
nodes$no[nodes$name=="X"]=3
nodes$no[(nodes$no==4)&(str_detect(nodes$name,":"))]=6
nodes$no[(nodes$no==6)&(str_detect(nodes$name,"X:"))]=5
nodes<-nodes %>% arrange(no,name)
nodes
icount=sum(str_detect(nodes$name,":"))
nodes$xpos=0
nodes$xpos[nodes$name=="Y"]=ypos[1]
nodes$xpos[nodes$name=="M"]=mpos[1]
if(icount>0) {
nodes$xpos[str_detect(nodes$name,":")]=seq(from=0.05,by=0.1,length.out=icount)
}
nodes$ypos=1
nodes$ypos[nodes$name=="Y"]=ypos[2]
nodes$ypos[nodes$name=="M"]=mpos[2]
select1=which(nodes$name %in% c("Y","M"))
select=setdiff(which(!str_detect(nodes$name,":")),select1)
nodes$ypos[select]=seq(to=2,by=-1,length.out = length(select))
nodes
# nodes$xpos1=adjustxpos(nodes$xpos,xmargin=xmargin,radx=radx)
nodes$ypos=adjustypos(nodes$ypos,ymargin=ymargin,rady=rady,
maxypos=maxypos,minypos=minypos)
arrows=df1
arrows$labelpos=0.5
arrows$arrpos=0.8
arrows$no=1
arrows$lty=1
arrows$label1=arrows$name
if(whatLabel=="name") {
arrows$label=arrows$name
addprime=TRUE
} else{
arrows$label=round(arrows$est,digits)
arrows$lty=ifelse(arrows$p<0.05,1,3)
addprime=FALSE
}
print(nodes)
print(arrows)
openplotmat(xlim=xlim,ylim=ylim)
for(i in 1:nrow(arrows)){
temppos=arrows$labelpos[i]
if(!is.null(label.pos[[arrows$name[i]]])) temppos=label.pos[[arrows$name[i]]]
myarrow2(nodes, from=arrows$start[i],to=arrows$end[i],
label=arrows$label[i],no=arrows$no[1],xmargin=xmargin,radx=radx,rady=rady,
label.pos=temppos,arr.pos=NULL,lty=arrows$lty[i],addprime=addprime,xspace=xspace)
}
for(i in 1:nrow(nodes)){
xpos=nodes$xpos[i]
xpos=adjustxpos(xpos,xmargin,radx,xspace=xspace)
mid=c(xpos,nodes$ypos[i])
label=nodes$name[i]
if(nodemode==2) {
if(!is.null(labels[[label]])) label=labels[[label]]
} else if(nodemode==3){
if(!is.null(labels[[label]])) label=paste0(labels[[label]],"(",label,")")
}
drawtext(mid,radx=radx,rady=rady,lab=label,latent=FALSE)
if(nodemode==1){
if(!is.null(nodelabels[[label]])) {
if(is.null(yinterval)) yinterval=2*rady+ymargin
if(is.null(xinterval)) xinterval=2*radx
if(mid[2]<=rady+ymargin){
newmid=mid-c(0,yinterval)
} else if(mid[2]>=0.9){
newmid=mid+c(0,yinterval)
} else if(mid[1]>0.85){
newmid=mid+c(xinterval,0)
} else{
newmid=mid-c(xinterval,0)
}
textplain(mid=newmid,lab=nodelabels[[label]])
}
}
}
library(processR)
drawModel(semfit,labels=labels,mode=2)
drawModel(semfit,labels=labels,mode=2,whatLabel="est")
statisticalDiagram(59,labels=labels,fit=semfit)
drawModel(semfit,labels=labels,mode=2,nodemode=2)
drawModel(semfit,labels=labels,mode=2,nodemode=3)
fit
statisticalDiagram(59,Mi="justify",labels=labels,fit=semfit)
statisticalDiagram(59,M="justify",labels=labels,fit=semfit)
statisticalDiagram(59,labels=labels,fit=semfit)
drawModel(semfit,labels=labels,mode=2,whatLabel="est")
statisticalDiagram(59,labels=labels,fit=semfit)
drawModel(semfit,labels=labels,mode=2,whatLabel="est")
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
statisticalDiagram(59)
statisticalDiagram(59)
statisticalDiagram(no=59)
showModels()
labels=list(X="wt",M="am",Y="mpg");name="MiX"
nodeslabels=list(X="weight",M="automatic",Y="milepergallon")
findName(labels=labels,nodeslabels=nodeslabels,name="MiX")
findName(labels=labels,name="MiX")
findName(labels=labels,nodeslabels=nodeslabels,name="M")
labels=list(X="GDPpp",M="Illit",Y="LifeEx")
nodeslabels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
findName(labels=labels,nodeslabels=nodeslabels,name="Mi")
nodeslabels=list(X="GDP\nper inhabitant",M="Illiteracy Rate",Y="Mean Life\nExpectation")
findName(labels=labels,name="Mi")
findName(labels=labels,nodeslabels=nodeslabels,name="Mi")
statisticalDiagram(59)
statisticalDiagram(no=1)
#
no=35;radx=0.10;rady=0.04;xmargin=0.01;arrowlabel=TRUE;arrowslabels=NULL
arrowslty=NULL
labels=list();nodeslabels=list();whatLabel="name";fit=NULL;estimateTable=NULL
digits=3;covar=list();addCovar=TRUE;type=NULL
includeLatentVars=FALSE;addprime=TRUE
if(!is.null(fit)) {
if(is.null(estimateTable)) estimateTable<-estimatesTable(fit,digits=digits)
}
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=getNodes(no)
}
source('~/ownCloud/Documents/processR/R/statisticalDiagram.R', echo=TRUE)
if(!is.null(fit)) {
if(is.null(estimateTable)) estimateTable<-estimatesTable(fit,digits=digits)
}
if(no==1.1) {
nodes=est2Nodes(estimateTable)
} else {
nodes=getNodes(no)
}
if(no==1.1){
arrows1=est2Arrows(estimateTable)
} else{
arrows1=getArrows(no)
}
nodes
arrows1
nodes=getNodes(no)
nodes
library(processR)
statisticalDiagram(no=1)
covar=list(name=c("posemot","ideology","sex"),site=list(c("Y"),c("Y"),c("Y")))
statisticalDiagram(no=1,covar=covar)
covar=list(name=c("posemot","ideology","sex"),site=list(c("M","Y"),c("Mi","Y"),c("Mi","Y")))
statisticalDiagram(no=4,covar=covar)
statisticalDiagram(59)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","b","c")))
eq=tripleEquation(labels=labels,moderator=moderator,mode=1)
eq
model=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2)
cat(model)
semfit=sem(model,data=disaster)
statisticalDiagram(no=59)
drawModel(semfit,labels=labels,mode=2)
drawModel(semfit,labels=labels,mode=2,whatLabel="est")
drawModel(semfit,labels=labels,mode=2,whatLabel="est",digits=2)
drawModel(semfit,labels=labels,mode=2)
statisticalDiagram(no=59,labels=labels,fit=semfit)
drawModel(semfit,labels=labels,mode=2,whatLabel="est",digits=2)
drawModel(semfit,labels=labels,mode=2,nodemode=2)
statisticalDiagram(no=59,labels=labels,fit=semfit)
labels=list(X="dysfunc",M="negtone",Y="perform",W="negexp")
moderator=list(name="negexp",site=list("b"))
model=tripleEquation(labels=labels,moderator=moderator,rangemode=2,data=teams)
cat(model)
semfit=sem(model,data=teams,se="boot",bootstrap=100)
drawModel(semfit,labels=labels,nodelabels=labels,xinterval=0.2)
showModels()
drawModel(semfit,labels=labels,nodelabels=labels,xinterval=0.2)
statisticalDiagram(14)
statisticalDiagram(14,labels=labels,fit=semfit)
drawModel(semfit,labels=labels,nodelabels=labels,xinterval=0.2)
statisticalDiagram(14,labels=labels,fit=semfit)
drawModel(semfit,labels=labels,nodelabels=labels,xinterval=0.2)
drawModel(semfit,labels=labels,nodelabels=labels,xinterval=0.2,whatLabel="est")
statisticalDiagram(14,labels=labels,fit=semfit)
semfit=sem(model,data=teams,se="boot",bootstrap=100)
drawModel(semfit,labels=labels,nodelabels=labels,xinterval=0.2,whatLabel="est")
drawModel(semfit,labels=labels,nodelabels=labels,xinterval=0.2,whatLabel="est")
statisticalDiagram(14,labels=labels,fit=semfit)
drawModel(semfit,labels=labels,nodelabels=labels,xinterval=0.2,whatLabel="est")
statisticalDiagram(14,labels=labels,fit=semfit)
drawModel(semfit,labels=labels,nodelabels=labels,xinterval=0.2,whatLabel="est")
drawModel(semfit,labels=labels,nodelabels=labels,xinterval=0.2)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","b","c")))
eq=tripleEquation(labels=labels,moderator=moderator,mode=1)
eq
fit=eq2fit(eq,data=disaster)
modelsSummary(fit,labels=labels)
modelsSummaryTable(fit,labels=labels)
model=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2)
cat(model)
semfit=sem(model,data=disaster)
modmedSummary(semfit)
modSummary(semfit)
medSummary(semfit)
semfit=sem(model,data=disaster)
modmedSummary(semfit)
modSummary(semfit)
fit=semfit;mod=NULL;values=NULL;boot.ci.type="bca.simple"
# fit=semfit;mod=NULL;values=NULL;boot.ci.type="bca.simple"
fit=semfit
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label!="",]
res
if(is.null(mod)){
mod=res$lhs[str_detect(res$label,"mean")][1]
mod
}
mod
if(is.null(values)){
# values1=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
values1=extractRange(res,mod=mod,what=key)
if(!is.numeric(values1)) values1=as.numeric(values1)
values1
} else{
values1=values
}
key=ifelse(sum(str_detect(res$label,"indirect"))==0,"direct","indirect")
if(is.null(values)){
# values1=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
values1=extractRange(res,mod=mod,what=key)
if(!is.numeric(values1)) values1=as.numeric(values1)
values1
} else{
values1=values
}
system("grep -r 'extractRange' *)
system("grep -r 'extractRange' *")
system("grep -r 'extractRange' *")
#'Extract range from a data.frame
#'@param res A data.frame
#'@param mod Name of moderator
#'@param what string
extractRange=function(res,mod,what="indirect"){
select=str_detect(res$lhs,what)
res1=res[select,c(1,3)]
temp=res1$rhs
temp
result=extractNumber(temp)
result
if(length(result)>0) {
values=result
} else{
values=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
}
values
}
#' extract number from string
#' @param x a string
#' @export
extractNumber=function(x){
result=c()
for(i in seq_along(x)){
temp=x[i]
# temp=str_replace_all(temp,"\\(|\\)","")
# temp=unlist(str_split(temp,"\\+|\\*|-"))
# temp
# select=which(str_detect(temp,"^[0-9|\\.].*"))
#
temp=str_replace_all(temp,"\\(|\\)","")
temp=unlist(str_split(temp,"\\+|\\*"))
select=which(str_detect(temp,"^[0-9|\\.|-].*"))
if(length(select)>0) {
result=c(result,temp[select])
}
}
result
}
# fit=semfit;mod=NULL;values=NULL;boot.ci.type="bca.simple"
fit=semfit
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label!="",]
res
if(is.null(mod)){
mod=res$lhs[str_detect(res$label,"mean")][1]
mod
}
key=ifelse(sum(str_detect(res$label,"indirect"))==0,"direct","indirect")
if(is.null(values)){
# values1=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
values1=extractRange(res,mod=mod,what=key)
if(!is.numeric(values1)) values1=as.numeric(values1)
values1
} else{
values1=values
}
select=paste0(key,c("",".below",".above"))
select
direct=res$est[which(res$lhs %in% select)]
lowerd=res$ci.lower[which(res$lhs %in% select)]
upperd=res$ci.upper[which(res$lhs %in% select)]
#
# se=res$se[which(res$lhs %in% select)]
directp=res$p[which(res$lhs %in% select)]
df=data.frame(values=values1,direct,lowerd,upperd,directp)
df=df[c(2,1,3),]
# str(df)
df[]=round(df,3)
attr(df,"mod")=mod
res
if(is.null(values)) {
direct=res$rhs[res$lhs==key]
direct
if(str_detect(direct,".mean")){
direct=str_replace(direct,paste0(mod,".mean"),"W")
} else{
temp=extractNumber(direct)
direct=str_replace_all(direct,temp,"W")
}
} else{
direct=res$rhs[res$lhs==key]
if(str_detect(direct,paste0(mod,".mean"))) {
direct=str_replace(direct,paste0(mod,".mean"),"W")
} else{
temp=as.character(values1[1])
direct=str_replace(direct,temp,"W")
}
}
attr(df,"direct")=direct
res=res[res$op=="~",]
temp=direct
res
temp
key=ifelse(sum(str_detect(res$label,"indirect"))==0,"direct","indirect")
if(is.null(values)){
# values1=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
values1=extractRange(res,mod=mod,what=key)
if(!is.numeric(values1)) values1=as.numeric(values1)
values1
} else{
values1=values
}
select=paste0(key,c("",".below",".above"))
select
direct=res$est[which(res$lhs %in% select)]
lowerd=res$ci.lower[which(res$lhs %in% select)]
upperd=res$ci.upper[which(res$lhs %in% select)]
#
# se=res$se[which(res$lhs %in% select)]
directp=res$p[which(res$lhs %in% select)]
df=data.frame(values=values1,direct,lowerd,upperd,directp)
df=df[c(2,1,3),]
# str(df)
df[]=round(df,3)
attr(df,"mod")=mod
res
key
fit=semfit;mod=NULL;values=NULL;boot.ci.type="bca.simple"
# fit=semfit;mod=NULL;values=NULL;boot.ci.type="bca.simple"
fit=semfit
res=parameterEstimates(fit,boot.ci.type = boot.ci.type,
level = .95, ci = TRUE,
standardized = FALSE)
res=res[res$label!="",]
res
if(is.null(mod)){
mod=res$lhs[str_detect(res$label,"mean")][1]
mod
}
key=ifelse(sum(str_detect(res$label,"indirect"))==0,"direct","indirect")
key
if(is.null(values)){
# values1=res$est[res$label==paste0(mod,".mean")]+c(0,-1,1)*sqrt(res$est[res$label==paste0(mod,".var")])
values1=extractRange(res,mod=mod,what=key)
if(!is.numeric(values1)) values1=as.numeric(values1)
values1
} else{
values1=values
}
select=paste0(key,c("",".below",".above"))
select
direct=res$est[which(res$lhs %in% select)]
lowerd=res$ci.lower[which(res$lhs %in% select)]
upperd=res$ci.upper[which(res$lhs %in% select)]
#
# se=res$se[which(res$lhs %in% select)]
directp=res$p[which(res$lhs %in% select)]
df=data.frame(values=values1,direct,lowerd,upperd,directp)
df=df[c(2,1,3),]
# str(df)
df[]=round(df,3)
attr(df,"mod")=mod
res
if(is.null(values)) {
direct=res$rhs[res$lhs==key]
direct
if(str_detect(direct,".mean")){
direct=str_replace(direct,paste0(mod,".mean"),"W")
} else{
temp=extractNumber(direct)
direct=str_replace_all(direct,temp,"W")
}
} else{
direct=res$rhs[res$lhs==key]
if(str_detect(direct,paste0(mod,".mean"))) {
direct=str_replace(direct,paste0(mod,".mean"),"W")
} else{
temp=as.character(values1[1])
direct=str_replace(direct,temp,"W")
}
}
direct
attr(df,"direct")=direct[1]
res=res[res$op=="~",]
temp=direct
temp
temp=direct[1]
temp
for(i in 1:nrow(res)){
temp=str_replace_all(temp,res$label[i],sprintf("%0.3f",res$est[i]))
}
temp=str_replace_all(temp,"\\+\\-","\\-")
attr(df,"direct2")=temp
attr(df,"boot.ci.type")=boot.ci.type
class(df)=c("modSummary","data.frame")
df
devtools::document()
library(processR)
devtools::check()
devtools::document()
library(processR)
devtools::check()
library(processR)
drawModel(semfit,labels=labels,mode=2)
labels=list(X="frame",M="justify",Y="donate",W="skeptic")
moderator=list(name="skeptic",site=list(c("a","b","c")))
eq=tripleEquation(labels=labels,moderator=moderator,mode=1)
eq
model=tripleEquation(labels=labels,moderator=moderator,data=disaster,rangemode=2)
cat(model)
semfit=sem(model,data=disaster)
drawModel(semfit,labels=labels,mode=2)
library(processR)
devtools::document()
devtools::check()
require(processR)
labels=list(X="negemot",W="sex",Z="age",Y="govact",C1="posemot",C2="ideology")
fit=lm(govact~negemot*sex+negemot*age+posemot+ideology,data=glbwarm)
modSummary2(fit,rangemode=2,mod2.values=c(30,50,70),summarymode=2)
modSummary2(fit,mod2.values=c(30,50,70),summarymode=1,labels=labels)
modSummary2(fit,rangemode=2,mod2.values=c(30,50,70),summarymode=2)
labels=list(X="frame",W="skeptic",Y="justify")
fit=lm(justify~frame*skeptic,data=disaster)
modSummary2(fit,labels=labels)
fit=lm(govact~negemot*sex+negemot*age+posemot+ideology,data=glbwarm)
modSummary3(fit,mod2.values=c(30,50,70))
fit1=lm(govact~negemot*sex*age+posemot+ideology,data=glbwarm)
modSummary3(fit1,rangemode=1)
fit=lm(mpg~hp*wt,data=mtcars)
modSummary3(fit)
pmacro
require(processR)
pmacro
require(processR)
require(lavaan)
labels=list(X="dysfunc",M="negtone",Y="perform",W="negexp")
moderator=list(name="negexp",site=list("b"))
model=tripleEquation(labels=labels,moderator=moderator,rangemode=2,data=teams)
cat(model)
semfit=sem(model,data=teams,se="boot",bootstrap=100)
pmacro
showModels()
showModels()
library(processR)
devtools::document()
library(processR)
devtools::document()
library(processR)
devtools::check()
pmacroModel(8)
devtools::document()
devtools::check()
library(processR)
pmacroModel(0)
pmacroModel(0,ylim=c(0.4,0.9))
pmacroModel(0)
pmacroModel(0,ylim=c(0.3,0.7))
pmacroModel(0,ylim=c(0.4,0.6))
pmacroModel(0,ylim=c(0.3,0.7))
pmacroModel(0,ylim=c(0.3,0.5))
